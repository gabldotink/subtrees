"use strict";(self.webpackChunkrecoil=self.webpackChunkrecoil||[]).push([[9900],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return u}});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(n),u=i,h=c["".concat(s,".").concat(u)]||c[u]||d[u]||a;return n?o.createElement(h,r(r({ref:t},m),{},{components:n})):o.createElement(h,r({ref:t},m))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var p=2;p<a;p++)r[p]=n[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9849:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return m},default:function(){return c}});var o=n(7462),i=n(3366),a=(n(7294),n(3905)),r=["components"],l={title:"Bonus: Performance"},s=void 0,p={unversionedId:"basic-tutorial/performance",id:"basic-tutorial/performance",title:"Bonus: Performance",description:"Our existing implementation is perfectly valid, but there are some important performance implications to consider as our app evolves from being a small toy project to a million-line corporate program.",source:"@site/i18n/zh-hans/docusaurus-plugin-content-docs/current/basic-tutorial/performance.md",sourceDirName:"basic-tutorial",slug:"/basic-tutorial/performance",permalink:"/zh-hans/docs/basic-tutorial/performance",editUrl:"https://github.com/facebookexperimental/Recoil/edit/docs/docs/i18n/zh-hans/docusaurus-plugin-content-docs/current/basic-tutorial/performance.md",tags:[],version:"current",frontMatter:{title:"Bonus: Performance"}},m=[{value:"<code>&lt;TodoList /&gt;</code>",id:"todolist-",children:[],level:3},{value:"<code>&lt;TodoItem /&gt;</code>",id:"todoitem-",children:[],level:3},{value:"<code>&lt;TodoItemCreator /&gt;</code>",id:"todoitemcreator-",children:[],level:3},{value:"<code>&lt;TodoListFilters /&gt;</code>",id:"todolistfilters-",children:[],level:3},{value:"<code>&lt;TodoListStats /&gt;</code>",id:"todoliststats-",children:[],level:3},{value:"Room for Improvement",id:"room-for-improvement",children:[],level:2},{value:"Optimization #1: <code>React.memo()</code>",id:"optimization-1-reactmemo",children:[],level:2},{value:"Optimization #2: <code>atomFamily()</code>",id:"optimization-2-atomfamily",children:[{value:"Rethinking State Shape",id:"rethinking-state-shape",children:[],level:3},{value:"<code>atomFamily()</code>",id:"atomfamily",children:[],level:3}],level:2}],d={toc:m};function c(e){var t=e.components,n=(0,i.Z)(e,r);return(0,a.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Our existing implementation is perfectly valid, but there are some important performance implications to consider as our app evolves from being a small toy project to a million-line corporate program."),(0,a.kt)("p",null,"Let's think about what will cause each of our components to re-render:"),(0,a.kt)("h3",{id:"todolist-"},(0,a.kt)("inlineCode",{parentName:"h3"},"<TodoList />")),(0,a.kt)("p",null,"This component is subscribed to ",(0,a.kt)("inlineCode",{parentName:"p"},"filteredTodoListState"),", which is a selector that has a dependency on ",(0,a.kt)("inlineCode",{parentName:"p"},"todoListState")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"todoListFilterState"),". This means ",(0,a.kt)("inlineCode",{parentName:"p"},"TodoList")," will re-render when the following state changes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"todoListState")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"todoListFilterState"))),(0,a.kt)("h3",{id:"todoitem-"},(0,a.kt)("inlineCode",{parentName:"h3"},"<TodoItem />")),(0,a.kt)("p",null,"This component is subscribed to ",(0,a.kt)("inlineCode",{parentName:"p"},"todoListState"),", so it will re-render whenever ",(0,a.kt)("inlineCode",{parentName:"p"},"todoListState")," changes and whenever its parent component, ",(0,a.kt)("inlineCode",{parentName:"p"},"TodoList"),", re-renders."),(0,a.kt)("h3",{id:"todoitemcreator-"},(0,a.kt)("inlineCode",{parentName:"h3"},"<TodoItemCreator />")),(0,a.kt)("p",null,"This component is not subscribed to Recoil state (",(0,a.kt)("inlineCode",{parentName:"p"},"useSetRecoilState()")," does not create a subscription), so it will only re-render when its parent component, ",(0,a.kt)("inlineCode",{parentName:"p"},"TodoList"),", re-renders."),(0,a.kt)("h3",{id:"todolistfilters-"},(0,a.kt)("inlineCode",{parentName:"h3"},"<TodoListFilters />")),(0,a.kt)("p",null,"This component is subcribed to ",(0,a.kt)("inlineCode",{parentName:"p"},"todoListFilterState"),", so it will re-render when either that state changes or when its parent component, ",(0,a.kt)("inlineCode",{parentName:"p"},"TodoList"),", re-renders."),(0,a.kt)("h3",{id:"todoliststats-"},(0,a.kt)("inlineCode",{parentName:"h3"},"<TodoListStats />")),(0,a.kt)("p",null,"This component is subscribed to ",(0,a.kt)("inlineCode",{parentName:"p"},"filteredTodoListState"),", so it will re-render whenever that state changes or when its parent component, ",(0,a.kt)("inlineCode",{parentName:"p"},"TodoList"),", re-renders."),(0,a.kt)("h2",{id:"room-for-improvement"},"Room for Improvement"),(0,a.kt)("p",null,"The existing implementation has a few drawbacks, mainly that fact that we are re-rendering the entire tree whenever we make any change to ",(0,a.kt)("inlineCode",{parentName:"p"},"todoListState")," due to the fact that ",(0,a.kt)("inlineCode",{parentName:"p"},"<TodoList />")," is the parent of all of our components, so when it re-renders so will all of its children."),(0,a.kt)("p",null,"Ideally, components would re-render only when they absolutely have to (when the data that they display on the screen has changed)."),(0,a.kt)("h2",{id:"optimization-1-reactmemo"},"Optimization #1: ",(0,a.kt)("inlineCode",{parentName:"h2"},"React.memo()")),(0,a.kt)("p",null,"To mitigate the issue of child components re-rendering unnecessarily, we can make use of ",(0,a.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/react-api.html#reactmemo"},(0,a.kt)("inlineCode",{parentName:"a"},"React.memo()")),", which memoizes a component based on the ",(0,a.kt)("strong",{parentName:"p"},"props")," passed to that component:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const TodoItem = React.memo(({item}) => ...);\n\nconst TodoItemCreator = React.memo(() => ...);\n\nconst TodoListFilters = React.memo(() => ...);\n\nconst TodoListStats = React.memo(() => ...);\n")),(0,a.kt)("p",null,"That helps with the re-renders of ",(0,a.kt)("inlineCode",{parentName:"p"},"<TodoItemCreator />")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"<TodoListFilters />")," as they no longer re-render in response to re-renders of their parent component, ",(0,a.kt)("inlineCode",{parentName:"p"},"<TodoList />"),", but we still have the problem of ",(0,a.kt)("inlineCode",{parentName:"p"},"<TodoItem />")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"<TodoListStats />")," re-rendering when individual todo items have their text changed as text changes will result in a new ",(0,a.kt)("inlineCode",{parentName:"p"},"todoListFilterState"),", which both ",(0,a.kt)("inlineCode",{parentName:"p"},"<TodoItem />")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"<TodoListStats />")," are subscribed to."),(0,a.kt)("h2",{id:"optimization-2-atomfamily"},"Optimization #2: ",(0,a.kt)("inlineCode",{parentName:"h2"},"atomFamily()")),(0,a.kt)("h3",{id:"rethinking-state-shape"},"Rethinking State Shape"),(0,a.kt)("p",null,"Thinking of a todo list as an array of objects is problematic because it forms a tight coupling between each individual todo item and the list of all todo items."),(0,a.kt)("p",null,"To fix this issue, we need to rethink our state shape by thinking about ",(0,a.kt)("strong",{parentName:"p"},"normalized state"),". In the context of our todo-list app, this means storing the ",(0,a.kt)("strong",{parentName:"p"},"list")," of item ids separately from the ",(0,a.kt)("strong",{parentName:"p"},"data")," for each individual item."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"For a more detailed discussion on how to think about normalized state, see ",(0,a.kt)("a",{parentName:"p",href:"https://redux.js.org/recipes/structuring-reducers/normalizing-state-shape"},"this page from the Redux documentation"),".")),(0,a.kt)("p",null,"This ultimately means that we will be splitting our ",(0,a.kt)("inlineCode",{parentName:"p"},"todoListState")," into two:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"An array of todo item IDs"),(0,a.kt)("li",{parentName:"ul"},"A mapping of item ID to item data")),(0,a.kt)("p",null,"The array of todo item IDs can be implemented using an atom like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const todoListItemIdsState = atom({\n  key: 'todoListItemIdsState',\n  default: [],\n});\n")),(0,a.kt)("p",null,"For implementing a mapping of item ID to item data, Recoil provides a utility method that allows us to dynamically create a mapping from ID to atom. This utility is ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/utils/atomFamily"},(0,a.kt)("inlineCode",{parentName:"a"},"atomFamily()")),"."),(0,a.kt)("h3",{id:"atomfamily"},(0,a.kt)("inlineCode",{parentName:"h3"},"atomFamily()")),(0,a.kt)("p",null,"We use the ",(0,a.kt)("inlineCode",{parentName:"p"},"atomFamily()")," function"))}c.isMDXComponent=!0}}]);