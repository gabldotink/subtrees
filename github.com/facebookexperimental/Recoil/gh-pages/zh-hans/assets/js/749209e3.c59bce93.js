"use strict";(self.webpackChunkrecoil=self.webpackChunkrecoil||[]).push([[8009],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return f}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(t),f=a,d=m["".concat(c,".").concat(f)]||m[f]||u[f]||o;return t?r.createElement(d,i(i({ref:n},s),{},{components:t})):r.createElement(d,i({ref:n},s))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7757:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return p},assets:function(){return s},toc:function(){return u},default:function(){return f}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],l={title:"Refine 0.1"},c=void 0,p={permalink:"/zh-hans/blog/2022/06/21/refine-0.1.0-release",editUrl:"https://github.com/facebookexperimental/Recoil/edit/docs/docs/blog/blog/2022-06-21-refine-0.1.0-release.md",source:"@site/blog/2022-06-21-refine-0.1.0-release.md",title:"Refine 0.1",description:"Initial open source release for the @recoiljs/refine library for type refinement and input validation for Flow and TypeScript!  To get started learning about Refine, check out the documentation on the core concepts of Utilities and Checkers.",date:"2022-06-21T00:00:00.000Z",formattedDate:"2022\u5e746\u670821\u65e5",tags:[],readingTime:1.525,truncated:!1,authors:[],prevItem:{title:"Recoil Sync 0.1",permalink:"/zh-hans/blog/2022/06/21/recoil-sync-0.1.0-release"},nextItem:{title:"Recoil 0.7.4",permalink:"/zh-hans/blog/2022/06/20/recoil-0.7.4-release"}},s={authorsImageUrls:[]},u=[{value:"Why would I want to use Refine?",id:"why-would-i-want-to-use-refine",children:[],level:3},{value:"Type Refinement Example",id:"type-refinement-example",children:[],level:3},{value:"Backward Compatible Example",id:"backward-compatible-example",children:[],level:3},{value:"JSON Parser Example",id:"json-parser-example",children:[],level:3}],m={toc:u};function f(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Initial open source release for the ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@recoiljs/refine"},(0,o.kt)("inlineCode",{parentName:"a"},"@recoiljs/refine"))," library for type refinement and input validation for Flow and TypeScript!  To get started learning about Refine, check out the documentation on the core concepts of ",(0,o.kt)("a",{parentName:"p",href:"/docs/refine/api/Utilities"},"Utilities")," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/refine/api/Checkers"},"Checkers"),"."),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"/docs/recoil-sync/introduction"},"Recoil Sync")," library leverages ",(0,o.kt)("strong",{parentName:"p"},"Refine")," for type refinement, input validation, and upgrading types for backward compatibility.  See the ",(0,o.kt)("a",{parentName:"p",href:"/docs/recoil-sync/introduction"},(0,o.kt)("inlineCode",{parentName:"a"},"recoil-sync")," docs")," for more details."),(0,o.kt)("h3",{id:"why-would-i-want-to-use-refine"},"Why would I want to use Refine?"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Refine is useful when your code encounters ",(0,o.kt)("inlineCode",{parentName:"li"},"unknown")," TypeScript type or ",(0,o.kt)("inlineCode",{parentName:"li"},"mixed")," Flow type values and you need to ",(0,o.kt)("a",{parentName:"li",href:"/docs/refine/Introduction#type-refinement-example"},"assert those values have a specific static type"),"."),(0,o.kt)("li",{parentName:"ul"},"Refine provides an API for building type-refinement helper functions which can validate that an unknown value conforms to an expected type."),(0,o.kt)("li",{parentName:"ul"},"Refine can validate input values and ",(0,o.kt)("a",{parentName:"li",href:"/docs/refine/Introduction#backward-compatible-example"},"upgrade from previous versions"),".")),(0,o.kt)("h3",{id:"type-refinement-example"},"Type Refinement Example"),(0,o.kt)("p",null,"Coerce unknown types to a strongly typed variable.  ",(0,o.kt)("a",{parentName:"p",href:"/docs/refine/api/Utilities#assertion"},(0,o.kt)("inlineCode",{parentName:"a"},"assertion()"))," will throw if the input doesn't match the expected type while ",(0,o.kt)("a",{parentName:"p",href:"/docs/refine/api/Utilities#coercion"},(0,o.kt)("inlineCode",{parentName:"a"},"coercion()"))," will return ",(0,o.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"const myObjectChecker = object({\n  numberProperty: number(),\n  stringProperty: optional(string()),\n  arrayProperty: array(number()),\n});\n\nconst myObjectAssertion = assertion(myObjectChecker);\nconst myObject: CheckerReturnType<myObjectChecker> = myObjectAssertion({\n  numberProperty: 123,\n  stringProperty: 'hello',\n  arrayProperty: [1, 2, 3],\n});\n")),(0,o.kt)("h3",{id:"backward-compatible-example"},"Backward Compatible Example"),(0,o.kt)("p",null,"Using ",(0,o.kt)("a",{parentName:"p",href:"/docs/refine/api/Advanced_Checkers#match"},(0,o.kt)("inlineCode",{parentName:"a"},"match()"))," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/refine/api/Advanced_Checkers#asType"},(0,o.kt)("inlineCode",{parentName:"a"},"asType()"))," you can upgrade from previous types to the latest version."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"const myChecker: Checker<{str: string}> = match(\n  object({str: string()}),\n  asType(string(), str => ({str: str})),\n  asType(number(), num => ({str: String(num)})),\n);\n\nconst obj1: {str: string} = coercion(myChecker({str: 'hello'}));\nconst obj2: {str: string} = coercion(myChecker('hello'));\nconst obj3: {str: string} = coercion(myChecker(123));\n")),(0,o.kt)("h3",{id:"json-parser-example"},"JSON Parser Example"),(0,o.kt)("p",null,"Refine wraps ",(0,o.kt)("inlineCode",{parentName:"p"},"JSON")," to provide a built-in strongly typed parser."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'const myParser = jsonParser(\n    array(object({num: number()}))\n);\n\nconst result = myParser(\'[{"num": 1}, {"num": 2}]\');\n\nif (result != null) {\n  // we can now access values in num typesafe way\n  assert(result[0].num === 1);\n} else {\n  // value failed to match parser spec\n}\n')))}f.isMDXComponent=!0}}]);