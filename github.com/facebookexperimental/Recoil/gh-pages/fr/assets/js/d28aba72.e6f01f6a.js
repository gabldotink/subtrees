"use strict";(self.webpackChunkrecoil=self.webpackChunkrecoil||[]).push([[2548],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(n),d=r,f=c["".concat(s,".").concat(d)]||c[d]||m[d]||i;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7920:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return p},default:function(){return c}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],l={title:"atomFamily(options)",sidebar_label:"atomFamily()"},s=void 0,u={unversionedId:"api-reference/utils/atomFamily",id:"api-reference/utils/atomFamily",title:"atomFamily(options)",description:"Renvoie une fonction qui renvoie un RecoilState atom inscriptible.",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/api-reference/utils/atomFamily.md",sourceDirName:"api-reference/utils",slug:"/api-reference/utils/atomFamily",permalink:"/fr/docs/api-reference/utils/atomFamily",editUrl:"https://github.com/facebookexperimental/Recoil/edit/docs/docs/i18n/fr/docusaurus-plugin-content-docs/current/api-reference/utils/atomFamily.md",tags:[],version:"current",frontMatter:{title:"atomFamily(options)",sidebar_label:"atomFamily()"},sidebar:"docs",previous:{title:"isRecoilValue()",permalink:"/fr/docs/api-reference/core/isRecoilValue"},next:{title:"selectorFamily()",permalink:"/fr/docs/api-reference/utils/selectorFamily"}},p=[{value:"Exemple",id:"exemple",children:[],level:2},{value:"Abonnements",id:"abonnements",children:[],level:2},{value:"Persistance",id:"persistance",children:[],level:2}],m={toc:p};function c(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Renvoie une fonction qui renvoie un ",(0,i.kt)("inlineCode",{parentName:"p"},"RecoilState")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/api-reference/core/atom"},"atom")," inscriptible."),(0,i.kt)("hr",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"function atomFamily<T, Parameter>({\n  key: string,\n\n  default:\n    | RecoilValue<T>\n    | Promise<T>\n    | T\n    | (Parameter => T | RecoilValue<T> | Promise<T>),\n\n  effects_UNSTABLE?:\n    | $ReadOnlyArray<AtomEffect<T>>\n    | (P => $ReadOnlyArray<AtomEffect<T>>),\n\n  dangerouslyAllowMutability?: boolean,\n}): Parameter => RecoilState<T>\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"key")," - Une cha\xeene unique utilis\xe9e pour identifier l'atome en interne. Cette cha\xeene doit \xeatre unique par rapport aux autres atomes et s\xe9lecteurs dans l'ensemble de l'application."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"default")," - La valeur initiale de l'atome. Il peut s'agir soit directement d'une valeur, d'une ",(0,i.kt)("inlineCode",{parentName:"li"},"RecoilValue")," ou d'une",(0,i.kt)("inlineCode",{parentName:"li"}," Promise")," qui repr\xe9sente la valeur par d\xe9faut, ou d'une fonction pour obtenir la valeur par d\xe9faut. La fonction de rappel re\xe7oit une copie du param\xe8tre utilis\xe9 lorsque la fonction ",(0,i.kt)("inlineCode",{parentName:"li"},"atomFamily")," est appel\xe9e."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"effects_UNSTABLE")," - Un tableau facultatif, ou une fonction de rappel pour obtenir le tableau bas\xe9 sur le param\xe8tre de famille, voire ",(0,i.kt)("a",{parentName:"li",href:"/docs/guides/atom-effects"},"Effets Atomiques"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dangerouslyAllowMutability")," - Recoil d\xe9pend des changements d'\xe9tat de l'atome pour savoir quand notifier les composants qui utilisent les atomes pour effectuer un nouveau rendu. Si la valeur d'un atome a \xe9t\xe9 mut\xe9e, il peut contourner cela et provoquer un changement d'\xe9tat sans notifier correctement les composants abonn\xe9s. Pour vous prot\xe9ger contre cela, toutes les valeurs stock\xe9es sont gel\xe9es. Dans certains cas, il peut \xeatre souhaitable de remplacer cette option en utilisant cette option.")),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Un ",(0,i.kt)("inlineCode",{parentName:"p"},"atome")," repr\xe9sente un morceau d'\xe9tat avec ",(0,i.kt)("em",{parentName:"p"},"Recoil"),". Un atome est cr\xe9\xe9 et enregistr\xe9 par ",(0,i.kt)("inlineCode",{parentName:"p"},"<RecoilRoot>")," par votre application. Mais que se passe-t-il si votre \xe9tat n\u2019est pas mondial? Que faire si votre \xe9tat est associ\xe9 \xe0 une instance particuli\xe8re d'un contr\xf4le ou \xe0 un \xe9l\xe9ment particulier? Par exemple, votre application est peut-\xeatre un outil de prototypage d'interface utilisateur dans lequel l'utilisateur peut ajouter dynamiquement des \xe9l\xe9ments et chaque \xe9l\xe9ment a un \xe9tat, tel que sa position. Id\xe9alement, chaque \xe9l\xe9ment aurait son propre atome d'\xe9tat. Vous pouvez l'impl\xe9menter vous-m\xeame via un mod\xe8le de m\xe9morisation. Mais, ",(0,i.kt)("em",{parentName:"p"},"Recoil")," fournit ce mod\xe8le pour vous avec l'utilitaire ",(0,i.kt)("inlineCode",{parentName:"p"},"atomFamily"),". Une famille d'atomes repr\xe9sente une collection d'atomes. Lorsque vous appelez ",(0,i.kt)("inlineCode",{parentName:"p"},"atomFamily"),", il retournera une fonction qui fournit l'atome",(0,i.kt)("inlineCode",{parentName:"p"}," RecoilState")," en fonction des param\xe8tres que vous passez."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"AtomFamily")," fournit essentiellement une carte du param\xe8tre \xe0 un atome. Il vous suffit de fournir une cl\xe9 unique pour ",(0,i.kt)("inlineCode",{parentName:"p"},"atomFamily")," et elle g\xe9n\xe9rera une cl\xe9 unique pour chaque atome sous-jacent. Ces cl\xe9s atom peuvent \xeatre utilis\xe9es pour la persistance et doivent donc \xeatre stables entre les ex\xe9cutions d'application. Les param\xe8tres peuvent \xe9galement \xeatre g\xe9n\xe9r\xe9s sur diff\xe9rents sites d'appel et nous voulons que des param\xe8tres \xe9quivalents utilisent le m\xeame atome sous-jacent. Par cons\xe9quent, l'\xe9galit\xe9 des valeurs est utilis\xe9e \xe0 la place de l'\xe9galit\xe9 des r\xe9f\xe9rences pour les param\xe8tres ",(0,i.kt)("inlineCode",{parentName:"p"},"atomFamily"),". Cela impose des restrictions sur les types qui peuvent \xeatre utilis\xe9s pour le param\xe8tre. ",(0,i.kt)("inlineCode",{parentName:"p"},"atomFamily")," accepte des types primitifs, ou des tableaux ou des objets qui peuvent contenir des tableaux, des objets ou des types primitifs."),(0,i.kt)("h2",{id:"exemple"},"Exemple"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"const elementPositionStateFamily = atomFamily({\n  key: 'ElementPosition',\n  default: [0, 0],\n});\n\nfunction ElementListItem({elementID}) {\n  const position = useRecoilValue(elementPositionStateFamily(elementID));\n  return (\n    <div>\n      Element: {elementID}\n      Position: {position}\n    </div>\n  );\n}\n")),(0,i.kt)("p",null,"Un ",(0,i.kt)("inlineCode",{parentName:"p"},"atomFamily()")," prend presque les m\xeames options qu'un simple ","[",(0,i.kt)("inlineCode",{parentName:"p"},"atom()"),"]","(/docs/api-reference/ core/atom). Cependant, la valeur par d\xe9faut peut \xe9galement \xeatre param\xe9tr\xe9e. Cela signifie que vous pouvez fournir une fonction qui prend la valeur du param\xe8tre et renvoie la valeur par d\xe9faut r\xe9elle. Par exemple:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"const myAtomFamily = atomFamily({\n  key: \u2018MyAtom\u2019,\n  default: param => defaultBasedOnParam(param),\n});\n")),(0,i.kt)("p",null,"ou en utilisant ",(0,i.kt)("a",{parentName:"p",href:"/docs/api-reference/utils/selectorFamily"},(0,i.kt)("inlineCode",{parentName:"a"},"selectorFamily"))," au lieu de ",(0,i.kt)("inlineCode",{parentName:"p"},"selector"),", vous pouvez \xe9galement acc\xe9der \xe0 la valeur du param\xe8tre dans un s\xe9lecteur ",(0,i.kt)("inlineCode",{parentName:"p"},"default"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"const myAtomFamily = atomFamily({\n  key: \u2018MyAtom\u2019,\n  default: selectorFamily({\n    key: 'MyAtom/Default',\n    get: param => ({get}) => {\n      return computeDefaultUsingParam(param);\n    },\n  }),\n});\n")),(0,i.kt)("h2",{id:"abonnements"},"Abonnements"),(0,i.kt)("p",null,"Un avantage de l'utilisation de ce mod\xe8le pour des atomes s\xe9par\xe9s pour chaque \xe9l\xe9ment par rapport \xe0 essayer de stocker un seul atome avec une carte d'\xe9tat pour tous les \xe9l\xe9ments est qu'ils maintiennent tous leurs propres abonnements individuels. Ainsi, la mise \xe0 jour de la valeur d'un \xe9l\xe9ment entra\xeenera uniquement la mise \xe0 jour des composants React qui se sont abonn\xe9s uniquement \xe0 cet atome."),(0,i.kt)("h2",{id:"persistance"},"Persistance"),(0,i.kt)("p",null,"Les observateurs de persistance conserveront l'\xe9tat de chaque valeur de param\xe8tre en tant qu'atome distinct avec une cl\xe9 unique bas\xe9e sur la s\xe9rialisation de la valeur de param\xe8tre utilis\xe9e. Par cons\xe9quent, il est important de n'utiliser que des param\xe8tres qui sont des primitives ou de simples objets compos\xe9s contenant des primitives. Les classes ou fonctions personnalis\xe9es ne sont pas autoris\xe9es."),(0,i.kt)("p",null,'Il est permis de "promouvoir" un simple ',(0,i.kt)("inlineCode",{parentName:"p"},"atom")," pour en faire un ",(0,i.kt)("inlineCode",{parentName:"p"},"atomFamily")," dans une version plus r\xe9cente de votre application bas\xe9e sur la m\xeame cl\xe9. Si vous faites cela, alors toutes les valeurs persistantes avec l'ancienne cl\xe9 simple peuvent toujours \xeatre lues et toutes les valeurs de param\xe8tres de la nouvelle ",(0,i.kt)("inlineCode",{parentName:"p"},"atomFamily")," seront par d\xe9faut \xe0 l'\xe9tat persistant de l'atome simple. Si vous modifiez le format du param\xe8tre dans une ",(0,i.kt)("inlineCode",{parentName:"p"},"atomFamily"),", cependant, il ne lira pas automatiquement les valeurs pr\xe9c\xe9dentes qui \xe9taient conserv\xe9es avant la modification. Cependant, vous pouvez ajouter une logique dans un s\xe9lecteur ou un validateur par d\xe9faut pour rechercher des valeurs bas\xe9es sur les formats de param\xe8tres pr\xe9c\xe9dents. Nous esp\xe9rons aider \xe0 automatiser ce mod\xe8le \xe0 l'avenir."))}c.isMDXComponent=!0}}]);