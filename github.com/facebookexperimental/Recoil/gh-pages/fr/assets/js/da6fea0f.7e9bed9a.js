"use strict";(self.webpackChunkrecoil=self.webpackChunkrecoil||[]).push([[4413],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},c=Object.keys(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var a=n.createContext({}),u=function(e){var t=n.useContext(a),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=u(e.components);return n.createElement(a.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,c=e.originalType,a=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),f=u(r),m=o,d=f["".concat(a,".").concat(m)]||f[m]||p[m]||c;return r?n.createElement(d,i(i({ref:t},s),{},{components:r})):n.createElement(d,i({ref:t},s))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=r.length,i=new Array(c);i[0]=f;var l={};for(var a in t)hasOwnProperty.call(t,a)&&(l[a]=t[a]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var u=2;u<c;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},1467:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return a},metadata:function(){return u},toc:function(){return s},default:function(){return f}});var n=r(7462),o=r(3366),c=(r(7294),r(3905)),i=["components"],l={title:"constSelector(constante)",sidebar_label:"constSelector()"},a=void 0,u={unversionedId:"api-reference/utils/constSelector",id:"api-reference/utils/constSelector",title:"constSelector(constante)",description:"Un s\xe9lecteur qui fournit toujours une valeur constante.",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/api-reference/utils/constSelector.md",sourceDirName:"api-reference/utils",slug:"/api-reference/utils/constSelector",permalink:"/fr/docs/api-reference/utils/constSelector",editUrl:"https://github.com/facebookexperimental/Recoil/edit/docs/docs/i18n/fr/docusaurus-plugin-content-docs/current/api-reference/utils/constSelector.md",tags:[],version:"current",frontMatter:{title:"constSelector(constante)",sidebar_label:"constSelector()"},sidebar:"docs",previous:{title:"selectorFamily()",permalink:"/fr/docs/api-reference/utils/selectorFamily"},next:{title:"errorSelector()",permalink:"/fr/docs/api-reference/utils/errorSelector"}},s=[{value:"Exemple",id:"exemple",children:[],level:3}],p={toc:s};function f(e){var t=e.components,r=(0,o.Z)(e,i);return(0,c.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("p",null,"Un ",(0,c.kt)("a",{parentName:"p",href:"/docs/api-reference/core/selector"},"s\xe9lecteur")," qui fournit toujours une valeur constante."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-jsx"},"function constSelector<T: Parameter>(constant: T): RecoilValueReadOnly<T>\n")),(0,c.kt)("p",null,"Un ",(0,c.kt)("inlineCode",{parentName:"p"},"constSelector")," peut \xeatre utile si vous avez une interface qui utilise un type tel que ",(0,c.kt)("inlineCode",{parentName:"p"},"RecoilValue<T>")," ou ",(0,c.kt)("inlineCode",{parentName:"p"},"RecoilValueReadOnly<T> "),"qui peut \xeatre fournie par diff\xe9rentes impl\xe9mentations de s\xe9lecteur."),(0,c.kt)("p",null,"Ces s\xe9lecteurs m\xe9moriseront en fonction de l'\xe9galit\xe9 des valeurs de r\xe9f\xe9rence. Ainsi, ",(0,c.kt)("inlineCode",{parentName:"p"},"constSelector()")," peut \xeatre appel\xe9 plusieurs fois avec la m\xeame valeur et le m\xeame s\xe9lecteur sera fourni. Pour cette raison, la valeur utilis\xe9e comme constante est limit\xe9e aux types qui peuvent \xeatre s\xe9rialis\xe9s \xe0 l'aide de la s\xe9rialisation Recoil. Veuillez consulter la documentation dans ",(0,c.kt)("a",{parentName:"p",href:"/docs/api-reference/utils/selectorFamily"},(0,c.kt)("inlineCode",{parentName:"a"},"selectorFamily"))," d\xe9crivant les limitations."),(0,c.kt)("h3",{id:"exemple"},"Exemple"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-jsx"},"type MyInterface = {\n  queryForStuff: RecoilValue<Thing>,\n  ...\n};\n\nconst myInterfaceInstance1: MyInterface = {\n  queryForStuff: selectorThatDoesQuery,\n};\n\nconst myInterfaceInstance2: MyInterface = {\n  queryForStuff: constSelector(thing),\n};\n")))}f.isMDXComponent=!0}}]);