"use strict";(self.webpackChunkrecoil=self.webpackChunkrecoil||[]).push([[5789],{3905:function(e,r,t){t.d(r,{Zo:function(){return u},kt:function(){return m}});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=n.createContext({}),p=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},u=function(e){var r=p(e.components);return n.createElement(c.Provider,{value:r},e.children)},s={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),f=p(t),m=a,y=f["".concat(c,".").concat(m)]||f[m]||s[m]||i;return t?n.createElement(y,o(o({ref:r},u),{},{components:t})):n.createElement(y,o({ref:r},u))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=f;var l={};for(var c in r)hasOwnProperty.call(r,c)&&(l[c]=r[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},4152:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return u},default:function(){return f}});var n=t(7462),a=t(3366),i=(t(7294),t(3905)),o=["components"],l={title:"graphQLQueryEffect()",sidebar_label:"graphQLQueryEffect()"},c=void 0,p={unversionedId:"recoil-relay/api/graphQLQueryEffect",id:"recoil-relay/api/graphQLQueryEffect",title:"graphQLQueryEffect()",description:"The underlying atom effect for syncing a Recoil atom with a GraphQL query.  It initializes an atom based on the results of a GraphQL query and subscribes to local mutations or updates.",source:"@site/docs/recoil-relay/api/graphQLQueryEffect.md",sourceDirName:"recoil-relay/api",slug:"/recoil-relay/api/graphQLQueryEffect",permalink:"/fr/docs/recoil-relay/api/graphQLQueryEffect",editUrl:"https://github.com/facebookexperimental/Recoil/edit/docs/docs/i18n/fr/docusaurus-plugin-content-docs/current/recoil-relay/api/graphQLQueryEffect.md",tags:[],version:"current",frontMatter:{title:"graphQLQueryEffect()",sidebar_label:"graphQLQueryEffect()"},sidebar:"recoil-relay",previous:{title:"graphQLSelectorFamily()",permalink:"/fr/docs/recoil-relay/api/graphQLSelectorFamily"},next:{title:"graphQLSubscriptionEffect()",permalink:"/fr/docs/recoil-relay/api/graphQLSubscriptionEffect"}},u=[],s={toc:u};function f(e){var r=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},s,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The underlying ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/atom-effects"},"atom effect")," for syncing a Recoil ",(0,i.kt)("a",{parentName:"p",href:"/docs/api-reference/core/atom"},"atom")," with a ",(0,i.kt)("a",{parentName:"p",href:"https://graphql.org/learn/queries/"},"GraphQL query"),".  It initializes an atom based on the results of a GraphQL query and subscribes to local mutations or updates."),(0,i.kt)("p",null,"If you would like to subscribe to updates that are initiated by the server consider using ",(0,i.kt)("a",{parentName:"p",href:"/docs/recoil-relay/api/graphQLSubscriptionEffect"},(0,i.kt)("inlineCode",{parentName:"a"},"graphQLSubscriptionEffect()"))," and GraphQL subscriptions instead."),(0,i.kt)("hr",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"function graphQLQueryEffect<\n  TVariables: Variables,\n  TData: $ReadOnly<{[string]: mixed}>,\n  T = TData,\n  TRawResponse = void,\n>({\n  environment: IEnvironment | EnvironmentKey,\n  query: Query<TVariables, TData, TRawResponse>,\n  variables: TVariables | null,\n  mapResponse: TData => T,\n}): AtomEffect<T>\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"environment"),": The Relay Environment or an ",(0,i.kt)("a",{parentName:"li",href:"/docs/recoil-relay/api/EnvironmentKey"},(0,i.kt)("inlineCode",{parentName:"a"},"EnvironmentKey"))," to match with the environment provided with ",(0,i.kt)("a",{parentName:"li",href:"/docs/recoil-relay/api/RecoilRelayEnvironment"},(0,i.kt)("inlineCode",{parentName:"a"},"<RecoilRelayEnvironemnt>")),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"query"),": The ",(0,i.kt)("a",{parentName:"li",href:"https://graphql.org/learn/queries/"},"GraphQL query")," to query.  ",(0,i.kt)("a",{parentName:"li",href:"/docs/recoil-relay/graphql-queries#graphql-fragments"},"Fragments")," are supported in queries."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"variables"),": ",(0,i.kt)("a",{parentName:"li",href:"https://graphql.org/learn/queries/#variables"},"Variables")," object provided as input to the GraphQL query.  If ",(0,i.kt)("inlineCode",{parentName:"li"},"null"),", then skip query and use the default atom value."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"mapResponse"),": Callback to map the query response to the atom value.")),(0,i.kt)("hr",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"const myAtom = atom({\n  key: 'MyQuery',\n  effects: [\n    graphQLQueryEffect({\n      environment: myEnvironment,\n      query: graphql`\n        query MyEventQuery($id: ID!) {\n          myevent(id: $id) {\n            id\n            name\n          }\n        }\n      `,\n      variables: {id: 123},\n    }),\n  ],\n});\n")))}f.isMDXComponent=!0}}]);