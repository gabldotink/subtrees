"use strict";(self.webpackChunkrecoil=self.webpackChunkrecoil||[]).push([[5207],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=o.createContext({}),l=function(e){var t=o.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return o.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=l(n),m=r,f=p["".concat(u,".").concat(m)]||p[m]||d[m]||i;return n?o.createElement(f,a(a({ref:t},c),{},{components:n})):o.createElement(f,a({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=p;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var l=2;l<i;l++)a[l]=n[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6706:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return l},toc:function(){return c},default:function(){return p}});var o=n(7462),r=n(3366),i=(n(7294),n(3905)),a=["components"],s={title:"Atomes"},u=void 0,l={unversionedId:"basic-tutorial/atoms",id:"basic-tutorial/atoms",title:"Atomes",description:"Les atomes contiennent la source de v\xe9rit\xe9 de l'\xe9tat de notre application. Dans notre liste de t\xe2ches, la source de v\xe9rit\xe9 sera un tableau d'objets, chaque objet repr\xe9sentant une t\xe2che.",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/basic-tutorial/atoms.mdx",sourceDirName:"basic-tutorial",slug:"/basic-tutorial/atoms",permalink:"/fr/docs/basic-tutorial/atoms",editUrl:"https://github.com/facebookexperimental/Recoil/edit/docs/docs/i18n/fr/docusaurus-plugin-content-docs/current/basic-tutorial/atoms.mdx",tags:[],version:"current",frontMatter:{title:"Atomes"},sidebar:"docs",previous:{title:"Introduction",permalink:"/fr/docs/basic-tutorial/intro"},next:{title:"S\xe9lecteurs",permalink:"/fr/docs/basic-tutorial/selectors"}},c=[],d={toc:c};function p(e){var t=e.components,n=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Les atomes contiennent la source de v\xe9rit\xe9 de l'\xe9tat de notre application. Dans notre liste de t\xe2ches, la source de v\xe9rit\xe9 sera un tableau d'objets, chaque objet repr\xe9sentant une t\xe2che."),(0,i.kt)("p",null,"Nous appellerons notre liste atom ",(0,i.kt)("inlineCode",{parentName:"p"},"todoListState")," et la cr\xe9erons en utilisant la fonction ",(0,i.kt)("inlineCode",{parentName:"p"},"atom()"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const todoListState = atom({\n  key: 'todoListState',\n  default: [],\n});\n")),(0,i.kt)("p",null,"Nous donnons \xe0 notre atome une cl\xe9 unique et d\xe9finissons la valeur par ",(0,i.kt)("inlineCode",{parentName:"p"},"d\xe9faut")," comment \xe9tant un tableau vide. Pour lire le contenu de cet atome, nous pouvons utiliser le hook ",(0,i.kt)("inlineCode",{parentName:"p"},"useRecoilValue()")," dans notre composant ",(0,i.kt)("inlineCode",{parentName:"p"},"TodoList"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"function TodoList() {\n  const todoList = useRecoilValue(todoListState);\n\n  return (\n    <>\n      {/* <TodoListStats /> */}\n      {/* <TodoListFilters /> */}\n      <TodoItemCreator />\n\n      {todoList.map((todoItem) => (\n        <TodoItem key={todoItem.id} item={todoItem} />\n      ))}\n    </>\n  );\n}\n")),(0,i.kt)("p",null,"Les composants comment\xe9s seront impl\xe9ment\xe9s dans les sections suivantes."),(0,i.kt)("p",null,"Pour cr\xe9er de nouveaux \xe9l\xe9ments todo, nous devons acc\xe9der \xe0 une fonction setter qui mettra \xe0 jour le contenu de ",(0,i.kt)("inlineCode",{parentName:"p"},"todoListState"),". Nous pouvons utiliser le hook ",(0,i.kt)("inlineCode",{parentName:"p"},"useSetRecoilState()")," pour obtenir une fonction setter dans notre composant ",(0,i.kt)("inlineCode",{parentName:"p"},"TodoItemCreator"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"function TodoItemCreator() {\n  const [inputValue, setInputValue] = useState('');\n  const setTodoList = useSetRecoilState(todoListState);\n\n  const addItem = () => {\n    setTodoList((oldTodoList) => [\n      ...oldTodoList,\n      {\n        id: getId(),\n        text: inputValue,\n        isComplete: false,\n      },\n    ]);\n    setInputValue('');\n  };\n\n  const onChange = ({target: {value}}) => {\n    setInputValue(value);\n  };\n\n  return (\n    <div>\n      <input type=\"text\" value={inputValue} onChange={onChange} />\n      <button onClick={addItem}>Ajouter</button>\n    </div>\n  );\n}\n\n// utilitaire pour cr\xe9er un identifiant unique\nlet id = 0;\nfunction getId() {\n  return id++;\n}\n")),(0,i.kt)("p",null,"Notez que nous utilisons la forme ",(0,i.kt)("strong",{parentName:"p"},"mise \xe0 jour")," de la fonction d'assignement afin que nous puissions cr\xe9er une nouvelle liste de t\xe2ches bas\xe9e sur l'ancienne liste de t\xe2ches."),(0,i.kt)("p",null,"Le composant ",(0,i.kt)("inlineCode",{parentName:"p"},"TodoItem")," affichera la valeur de la t\xe2che tout en permettant de changer son texte et de supprimer l'\xe9l\xe9ment. Nous utilisons ",(0,i.kt)("inlineCode",{parentName:"p"},"useRecoilState()")," pour lire ",(0,i.kt)("inlineCode",{parentName:"p"},"todoListState")," et pour obtenir une fonction d'assignement que nous utilisons pour mettre \xe0 jour le texte de l'\xe9l\xe9ment, le marquer comme termin\xe9 et le supprimer:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'function TodoItem({item}) {\n  const [todoList, setTodoList] = useRecoilState(todoListState);\n  const index = todoList.findIndex((listItem) => listItem === item);\n\n  const editItemText = ({target: {value}}) => {\n    const newList = replaceItemAtIndex(todoList, index, {\n      ...item,\n      text: value,\n    });\n\n    setTodoList(newList);\n  };\n\n  const toggleItemCompletion = () => {\n    const newList = replaceItemAtIndex(todoList, index, {\n      ...item,\n      isComplete: !item.isComplete,\n    });\n\n    setTodoList(newList);\n  };\n\n  const deleteItem = () => {\n    const newList = removeItemAtIndex(todoList, index);\n\n    setTodoList(newList);\n  };\n\n  return (\n    <div>\n      <input type="text" value={item.text} onChange={editItemText} />\n      <input\n        type="checkbox"\n        checked={item.isComplete}\n        onChange={toggleItemCompletion}\n      />\n      <button onClick={deleteItem}>X</button>\n    </div>\n  );\n}\n\nfunction replaceItemAtIndex(arr, index, newValue) {\n  return [...arr.slice(0, index), newValue, ...arr.slice(index + 1)];\n}\n\nfunction removeItemAtIndex(arr, index) {\n  return [...arr.slice(0, index), ...arr.slice(index + 1)];\n}\n')),(0,i.kt)("p",null,"Et avec cela, nous avons une liste de t\xe2ches enti\xe8rement fonctionnelle! Dans la section suivante, nous verrons comment utiliser les s\xe9lecteurs pour amener notre liste au niveau suivant."))}p.isMDXComponent=!0}}]);