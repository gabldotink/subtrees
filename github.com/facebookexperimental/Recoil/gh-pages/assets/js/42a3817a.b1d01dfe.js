"use strict";(self.webpackChunkrecoil=self.webpackChunkrecoil||[]).push([[1034],{3905:function(t,e,n){n.d(e,{Zo:function(){return u},kt:function(){return m}});var o=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,o,r=function(t,e){if(null==t)return{};var n,o,r={},i=Object.keys(t);for(o=0;o<i.length;o++)n=i[o],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(o=0;o<i.length;o++)n=i[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var s=o.createContext({}),c=function(t){var e=o.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},u=function(t){var e=c(t.components);return o.createElement(s.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return o.createElement(o.Fragment,{},e)}},p=o.forwardRef((function(t,e){var n=t.components,r=t.mdxType,i=t.originalType,s=t.parentName,u=l(t,["components","mdxType","originalType","parentName"]),p=c(n),m=r,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||i;return n?o.createElement(f,a(a({ref:e},u),{},{components:n})):o.createElement(f,a({ref:e},u))}));function m(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=n.length,a=new Array(i);a[0]=p;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=t,l.mdxType="string"==typeof t?t:r,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2285:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return p}});var o=n(7462),r=n(3366),i=(n(7294),n(3905)),a=["components"],l={title:"Atoms"},s=void 0,c={unversionedId:"basic-tutorial/atoms",id:"basic-tutorial/atoms",title:"Atoms",description:"Atoms contain the source of truth for our application state. In our todo-list, the source of truth will be an array of objects, with each object representing a todo item.",source:"@site/docs/basic-tutorial/atoms.mdx",sourceDirName:"basic-tutorial",slug:"/basic-tutorial/atoms",permalink:"/docs/basic-tutorial/atoms",editUrl:"https://github.com/facebookexperimental/Recoil/edit/docs/docs/docs/basic-tutorial/atoms.mdx",tags:[],version:"current",frontMatter:{title:"Atoms"},sidebar:"docs",previous:{title:"Intro",permalink:"/docs/basic-tutorial/intro"},next:{title:"Selectors",permalink:"/docs/basic-tutorial/selectors"}},u=[],d={toc:u};function p(t){var e=t.components,n=(0,r.Z)(t,a);return(0,i.kt)("wrapper",(0,o.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Atoms contain the source of truth for our application state. In our todo-list, the source of truth will be an array of objects, with each object representing a todo item."),(0,i.kt)("p",null,"We'll call our list atom ",(0,i.kt)("inlineCode",{parentName:"p"},"todoListState")," and create it using the ",(0,i.kt)("inlineCode",{parentName:"p"},"atom()")," function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const todoListState = atom({\n  key: 'TodoList',\n  default: [],\n});\n")),(0,i.kt)("p",null,"We give our atom a unique ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," and set the ",(0,i.kt)("inlineCode",{parentName:"p"},"default")," value to an empty array. To read the contents of this atom, we can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"useRecoilValue()")," hook in our ",(0,i.kt)("inlineCode",{parentName:"p"},"TodoList")," component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"function TodoList() {\n  const todoList = useRecoilValue(todoListState);\n\n  return (\n    <>\n      {/* <TodoListStats /> */}\n      {/* <TodoListFilters /> */}\n      <TodoItemCreator />\n\n      {todoList.map((todoItem) => (\n        <TodoItem key={todoItem.id} item={todoItem} />\n      ))}\n    </>\n  );\n}\n")),(0,i.kt)("p",null,"The commented-out components will be implemented in the sections that follow."),(0,i.kt)("p",null,"To create new todo items, we need to access a setter function that will update the contents of the ",(0,i.kt)("inlineCode",{parentName:"p"},"todoListState"),". We can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"useSetRecoilState()")," hook to get a setter function in our ",(0,i.kt)("inlineCode",{parentName:"p"},"TodoItemCreator")," component:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"function TodoItemCreator() {\n  const [inputValue, setInputValue] = useState('');\n  const setTodoList = useSetRecoilState(todoListState);\n\n  const addItem = () => {\n    setTodoList((oldTodoList) => [\n      ...oldTodoList,\n      {\n        id: getId(),\n        text: inputValue,\n        isComplete: false,\n      },\n    ]);\n    setInputValue('');\n  };\n\n  const onChange = ({target: {value}}) => {\n    setInputValue(value);\n  };\n\n  return (\n    <div>\n      <input type=\"text\" value={inputValue} onChange={onChange} />\n      <button onClick={addItem}>Add</button>\n    </div>\n  );\n}\n\n// utility for creating unique Id\nlet id = 0;\nfunction getId() {\n  return id++;\n}\n")),(0,i.kt)("p",null,"Notice we use the ",(0,i.kt)("strong",{parentName:"p"},"updater")," form of the setter function so that we can create a new todo list based on the old todo list."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"TodoItem")," component will display the value of the todo item while allowing you to change its text and delete the item. We use ",(0,i.kt)("inlineCode",{parentName:"p"},"useRecoilState()")," to read ",(0,i.kt)("inlineCode",{parentName:"p"},"todoListState")," and to get a setter function that we use to update the item text, mark it as completed, and delete it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'function TodoItem({item}) {\n  const [todoList, setTodoList] = useRecoilState(todoListState);\n  const index = todoList.findIndex((listItem) => listItem === item);\n\n  const editItemText = ({target: {value}}) => {\n    const newList = replaceItemAtIndex(todoList, index, {\n      ...item,\n      text: value,\n    });\n\n    setTodoList(newList);\n  };\n\n  const toggleItemCompletion = () => {\n    const newList = replaceItemAtIndex(todoList, index, {\n      ...item,\n      isComplete: !item.isComplete,\n    });\n\n    setTodoList(newList);\n  };\n\n  const deleteItem = () => {\n    const newList = removeItemAtIndex(todoList, index);\n\n    setTodoList(newList);\n  };\n\n  return (\n    <div>\n      <input type="text" value={item.text} onChange={editItemText} />\n      <input\n        type="checkbox"\n        checked={item.isComplete}\n        onChange={toggleItemCompletion}\n      />\n      <button onClick={deleteItem}>X</button>\n    </div>\n  );\n}\n\nfunction replaceItemAtIndex(arr, index, newValue) {\n  return [...arr.slice(0, index), newValue, ...arr.slice(index + 1)];\n}\n\nfunction removeItemAtIndex(arr, index) {\n  return [...arr.slice(0, index), ...arr.slice(index + 1)];\n}\n')),(0,i.kt)("p",null,"And with that we've got a fully functional todo list! In the next section we'll see how we can use selectors to take our list to the next level."))}p.isMDXComponent=!0}}]);