"use strict";(self.webpackChunkrecoil=self.webpackChunkrecoil||[]).push([[3843],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return y}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=s(t),y=i,d=m["".concat(l,".").concat(y)]||m[y]||u[y]||o;return t?r.createElement(d,a(a({ref:n},p),{},{components:t})):r.createElement(d,a({ref:n},p))}));function y(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=m;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:i,a[1]=c;for(var s=2;s<o;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2122:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return p},default:function(){return m}});var r=t(7462),i=t(3366),o=(t(7294),t(3905)),a=["components"],c={title:"Implementing a Store",sidebar_label:"Implementing a Store"},l=void 0,s={unversionedId:"recoil-sync/implement-store",id:"recoil-sync/implement-store",title:"Implementing a Store",description:"While the library comes with some built-in stores, you can implement your own using `.   Specify an optional storeKey` to identify and match up which atoms should sync with which store.  Then, specify the following optional callbacks to define the behavior for your store:",source:"@site/docs/recoil-sync/implement-store.md",sourceDirName:"recoil-sync",slug:"/recoil-sync/implement-store",permalink:"/docs/recoil-sync/implement-store",editUrl:"https://github.com/facebookexperimental/Recoil/edit/docs/docs/docs/recoil-sync/implement-store.md",tags:[],version:"current",frontMatter:{title:"Implementing a Store",sidebar_label:"Implementing a Store"},sidebar:"recoil-sync",previous:{title:"Syncing Atoms",permalink:"/docs/recoil-sync/sync-effect"},next:{title:"URL Persistence",permalink:"/docs/recoil-sync/url-persistence"}},p=[{value:"Example Syncing with React Props",id:"example-syncing-with-react-props",children:[],level:2},{value:"Example Syncing with User Database",id:"example-syncing-with-user-database",children:[],level:2}],u={toc:p};function m(e){var n=e.components,t=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"While the library comes with some built-in stores, you can implement your own using ",(0,o.kt)("a",{parentName:"p",href:"/docs/recoil-sync/api/RecoilSync"},(0,o.kt)("inlineCode",{parentName:"a"},"<RecoilSync>")),".   Specify an optional ",(0,o.kt)("inlineCode",{parentName:"p"},"storeKey")," to identify and match up which atoms should sync with which store.  Then, specify the following optional callbacks to define the behavior for your store:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/recoil-sync/api/RecoilSync#read-interface"},(0,o.kt)("strong",{parentName:"a"},(0,o.kt)("inlineCode",{parentName:"strong"},"read")))," - How to read an individual item from the external store, such as when initializing the atom."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/recoil-sync/api/RecoilSync#write-interface"},(0,o.kt)("strong",{parentName:"a"},(0,o.kt)("inlineCode",{parentName:"strong"},"write")))," - How to write mutated atom state to the external store."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/recoil-sync/api/RecoilSync#listen-interface"},(0,o.kt)("strong",{parentName:"a"},(0,o.kt)("inlineCode",{parentName:"strong"},"listen")))," - How to subscribe to async updates from the store to mutate atom state.")),(0,o.kt)("p",null,"See the ",(0,o.kt)("a",{parentName:"p",href:"/docs/recoil-sync/api/RecoilSync"},(0,o.kt)("inlineCode",{parentName:"a"},"<RecoilSync>")," API reference")," for the full details on the callbacks."),(0,o.kt)("h2",{id:"example-syncing-with-react-props"},"Example Syncing with React Props"),(0,o.kt)("p",null,"An example store using ",(0,o.kt)("a",{parentName:"p",href:"/docs/recoil-sync/api/RecoilSync"},(0,o.kt)("inlineCode",{parentName:"a"},"<RecoilSync>"))," that will initialize atoms based on React prop values:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'function InitFromProps({children, ...props}) {\n  return (\n    <RecoilSync\n      storeKey="init-from-props"\n      read={itemKey => props[itemKey]}\n    >\n      {children}\n    </RecoilSync>\n  );\n}\n')),(0,o.kt)("h2",{id:"example-syncing-with-user-database"},"Example Syncing with User Database"),(0,o.kt)("p",null,"An example store using ",(0,o.kt)("a",{parentName:"p",href:"/docs/recoil-sync/api/RecoilSync"},(0,o.kt)("inlineCode",{parentName:"a"},"<RecoilSync>"))," that will synchronize with a custom database:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'function SyncWithDB({children}) {\n  const connection = useMyDB();\n  return (\n    <RecoilSync\n      storeKey="my-db"\n      read={itemKey => connection.get(itemKey)}\n      write={({diff}) => {\n        for (const [key, value] of diff) {\n          connection.set(key, value);\n        }\n      }}\n      listen={({updateItem}) => {\n        const subscription = connection.subscribe((key, value) => {\n          updateItem(key, value);\n        });\n        return () => subscription.release();\n      }}\n    >\n      {children}\n    </RecoilSync>\n  );\n}\n')))}m.isMDXComponent=!0}}]);