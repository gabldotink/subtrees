"use strict";(self.webpackChunkrecoil=self.webpackChunkrecoil||[]).push([[9741],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),h=a,m=d["".concat(l,".").concat(h)]||d[h]||u[h]||r;return n?o.createElement(m,s(s({ref:t},p),{},{components:n})):o.createElement(m,s({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var c=2;c<r;c++)s[c]=n[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2571:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var o=n(7462),a=n(3366),r=(n(7294),n(3905)),s=["components"],i={title:"Development Tools",sidebar_label:"Dev Tools"},l=void 0,c={unversionedId:"guides/dev-tools",id:"guides/dev-tools",title:"Development Tools",description:"Recoil has functionality to allow you to observe and update state changes.",source:"@site/docs/guides/dev-tools.md",sourceDirName:"guides",slug:"/guides/dev-tools",permalink:"/docs/guides/dev-tools",editUrl:"https://github.com/facebookexperimental/Recoil/edit/docs/docs/docs/guides/dev-tools.md",tags:[],version:"current",frontMatter:{title:"Development Tools",sidebar_label:"Dev Tools"},sidebar:"docs",previous:{title:"Transitions",permalink:"/docs/guides/transitions"},next:{title:"<RecoilRoot>",permalink:"/docs/api-reference/core/RecoilRoot"}},p=[{value:"<em>IMPORTANT NOTE</em>",id:"important-note",children:[],level:2},{value:"Observing All State Changes",id:"observing-all-state-changes",children:[],level:2},{value:"Observing State Changes On-Demand",id:"observing-state-changes-on-demand",children:[],level:2},{value:"Time Travel",id:"time-travel",children:[],level:2},{value:"Inspecting current state",id:"inspecting-current-state",children:[],level:2}],u={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,s);return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Recoil has functionality to allow you to observe and update state changes."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"important-note"},(0,r.kt)("em",{parentName:"h2"},"IMPORTANT NOTE")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"This API is currently under development and will change.  Please stay tuned..."))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"observing-all-state-changes"},"Observing All State Changes"),(0,r.kt)("p",null,"You can use a hook such as ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/useRecoilSnapshot"},(0,r.kt)("strong",{parentName:"a"},(0,r.kt)("inlineCode",{parentName:"strong"},"useRecoilSnapshot()")))," or ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/useRecoilTransactionObserver"},(0,r.kt)("strong",{parentName:"a"},(0,r.kt)("inlineCode",{parentName:"strong"},"useRecoilTransactionObserver_UNSTABLE()")))," to subscribe to state changes and obtain a ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/Snapshot"},(0,r.kt)("strong",{parentName:"a"},(0,r.kt)("inlineCode",{parentName:"strong"},"Snapshot")))," of the new state."),(0,r.kt)("p",null,"Once you have a ",(0,r.kt)("inlineCode",{parentName:"p"},"Snapshot"),", you can use methods such as ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"getLoadable()")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"getPromise()")),", and ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"getInfo_UNSTABLE()"))," to inspect the state and use ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"getNodes_UNSTABLE()"))," to iterate over the set of known atoms."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"function DebugObserver(): React.Node {\n  const snapshot = useRecoilSnapshot();\n  useEffect(() => {\n    console.debug('The following atoms were modified:');\n    for (const node of snapshot.getNodes_UNSTABLE({isModified: true})) {\n      console.debug(node.key, snapshot.getLoadable(node));\n    }\n  }, [snapshot]);\n\n  return null;\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"function MyApp() {\n  return (\n    <RecoilRoot>\n      <DebugObserver />\n      ...\n    </RecoilRoot>\n  );\n}\n")),(0,r.kt)("h2",{id:"observing-state-changes-on-demand"},"Observing State Changes On-Demand"),(0,r.kt)("p",null,"Or, you can use the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/useRecoilCallback"},(0,r.kt)("strong",{parentName:"a"},(0,r.kt)("inlineCode",{parentName:"strong"},"useRecoilCallback()")))," hook to obtain a ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/Snapshot"},(0,r.kt)("strong",{parentName:"a"},(0,r.kt)("inlineCode",{parentName:"strong"},"Snapshot")))," on-demand."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"function DebugButton(): React.Node {\n  const onClick = useRecoilCallback(({snapshot}) => async () => {\n    console.debug('Atom values:');\n    for (const node of snapshot.getNodes_UNSTABLE()) {\n      const value = await snapshot.getPromise(node);\n      console.debug(node.key, value);\n    }\n  }, []);\n\n  return <button onClick={onClick}>Dump State</button>\n}\n")),(0,r.kt)("h2",{id:"time-travel"},"Time Travel"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/useGotoRecoilSnapshot"},(0,r.kt)("strong",{parentName:"a"},(0,r.kt)("inlineCode",{parentName:"strong"},"useGotoRecoilSnapshot()")))," hook can be used to update the entire Recoil state to match the provided ",(0,r.kt)("inlineCode",{parentName:"p"},"Snapshot"),".  This example maintains a history of state changes with the ability to go back and restore previous global state."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Snapshot"),"'s also provide a ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"getID()"))," method.  That can be used, for example, to help determine if you are reverting to a previous known state to avoid updating your snapshot history."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"function TimeTravelObserver() {\n  const [snapshots, setSnapshots] = useState([]);\n\n  const snapshot = useRecoilSnapshot();\n  useEffect(() => {\n    if (snapshots.every(s => s.getID() !== snapshot.getID())) {\n      setSnapshots([...snapshots, snapshot]);\n    }\n  }, [snapshot]);\n\n  const gotoSnapshot = useGotoRecoilSnapshot();\n\n  return (\n    <ol>\n      {snapshots.map((snapshot, i) => (\n        <li key={i}>\n          Snapshot {i}\n          <button onClick={() => gotoSnapshot(snapshot)}>\n            Restore\n          </button>\n        </li>\n      ))}\n    </ol>\n  );\n}\n")),(0,r.kt)("h2",{id:"inspecting-current-state"},"Inspecting current state"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/useGetRecoilValueInfo"},(0,r.kt)("inlineCode",{parentName:"a"},"useGetRecoilValueInfo_UNSTABLE()"))," provides a callback which can be used to peek at the current state and get information about atoms and selectors.  For the most part this is equivalent to calling ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/Snapshot#debug-information"},(0,r.kt)("inlineCode",{parentName:"a"},"getInfo_UNSTABLE()"))," on a current ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-reference/core/Snapshot"},(0,r.kt)("inlineCode",{parentName:"a"},"Snapshot")),", except that it can provide additional information such as the set of React components subscribing to an atom, which can change and isn't associated with a snapshot of Recoil state."))}d.isMDXComponent=!0}}]);