"use strict";(self.webpackChunkrecoil=self.webpackChunkrecoil||[]).push([[6506],{5171:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return k},default:function(){return N},frontMatter:function(){return g},metadata:function(){return f},toc:function(){return v}});var a=n(7462),o=n(3366),r=n(7294),l=n(3905),i=n(2804),c=(0,i.cn)({key:"textState",default:""}),s=(0,i.nZ)({key:"charCountState",get:function(e){return(0,e.get)(c).length}});function p(){return r.createElement("div",null,r.createElement(m,null),r.createElement(u,null))}function u(){var e=(0,i.sJ)(s);return r.createElement(r.Fragment,null,"Character Count: ",e)}function m(){var e=(0,i.FV)(c),t=e[0],n=e[1];return r.createElement("div",null,r.createElement("input",{type:"text",value:t,onChange:function(e){n(e.target.value)}}),r.createElement("br",null),"Echo: ",t)}var d=function(){return r.createElement(i.Wh,null,r.createElement(p,null))},h=["components"],g={title:"Getting Started"},k=void 0,f={unversionedId:"introduction/getting-started",id:"introduction/getting-started",title:"Getting Started",description:"Create React App",source:"@site/docs/introduction/getting-started.mdx",sourceDirName:"introduction",slug:"/introduction/getting-started",permalink:"/docs/introduction/getting-started",editUrl:"https://github.com/facebookexperimental/Recoil/edit/docs/docs/docs/introduction/getting-started.mdx",tags:[],version:"current",frontMatter:{title:"Getting Started"},sidebar:"docs",previous:{title:"Installation",permalink:"/docs/introduction/installation"},next:{title:"Intro",permalink:"/docs/basic-tutorial/intro"}},v=[{value:"Create React App",id:"create-react-app",children:[],level:2},{value:"Installation",id:"installation",children:[],level:2},{value:"RecoilRoot",id:"recoilroot",children:[],level:2},{value:"Atom",id:"atom",children:[],level:2},{value:"Selector",id:"selector",children:[],level:2},{value:"Demo",id:"demo",children:[],level:2}],C={toc:v};function N(e){var t=e.components,n=(0,o.Z)(e,h);return(0,l.kt)("wrapper",(0,a.Z)({},C,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"create-react-app"},"Create React App"),(0,l.kt)("p",null,"Recoil is a state management library for React, so you need to have React installed and running to use Recoil. The easiest and recommended way for bootstrapping a React application is to use ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/facebook/create-react-app#creating-an-app"},"Create React App"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"npx create-react-app my-app\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("a",{parentName:"p",href:"https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b"},(0,l.kt)("inlineCode",{parentName:"a"},"npx"))," is a package runner tool that comes with npm 5.2+ and higher, see ",(0,l.kt)("a",{parentName:"p",href:"https://gist.github.com/gaearon/4064d3c23a77c74a3614c498a8bb1c5f"},"instructions for older npm versions"),".")),(0,l.kt)("p",null,"For more ways to install Create React App, see the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/facebook/create-react-app#creating-an-app"},"official documentation"),"."),(0,l.kt)("h2",{id:"installation"},"Installation"),(0,l.kt)("p",null,"The Recoil package lives in ",(0,l.kt)("a",{href:"https://www.npmjs.com/get-npm",target:"_blank"},"npm"),". To install the latest stable version, run the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"npm install recoil\n")),(0,l.kt)("p",null,"Or if you're using ",(0,l.kt)("a",{href:"https://classic.yarnpkg.com/en/docs/install/",target:"_blank"},"yarn"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"yarn add recoil\n")),(0,l.kt)("p",null,"Or if you're using ",(0,l.kt)("a",{href:"https://cloud.google.com/community/tutorials/install-bower-dependencies-on-google-app-engine",target:"_blank"},"bower"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"bower install --save recoil\n")),(0,l.kt)("h2",{id:"recoilroot"},"RecoilRoot"),(0,l.kt)("p",null,"Components that use recoil state need ",(0,l.kt)("inlineCode",{parentName:"p"},"RecoilRoot")," to appear somewhere in the parent tree. A good place to put this is in your root component:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport {\n  RecoilRoot,\n  atom,\n  selector,\n  useRecoilState,\n  useRecoilValue,\n} from 'recoil';\n\nfunction App() {\n  return (\n    <RecoilRoot>\n      <CharacterCounter />\n    </RecoilRoot>\n  );\n}\n")),(0,l.kt)("p",null,"We'll implement the ",(0,l.kt)("inlineCode",{parentName:"p"},"CharacterCounter")," component in the following section."),(0,l.kt)("h2",{id:"atom"},"Atom"),(0,l.kt)("p",null,"An ",(0,l.kt)("strong",{parentName:"p"},"atom")," represents a piece of ",(0,l.kt)("strong",{parentName:"p"},"state"),". Atoms can be read from and written to from any component. Components that read the value of an atom are implicitly ",(0,l.kt)("strong",{parentName:"p"},"subscribed")," to that atom, so any atom updates will result in a re-render of all components subscribed to that atom:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"const textState = atom({\n  key: 'textState', // unique ID (with respect to other atoms/selectors)\n  default: '', // default value (aka initial value)\n});\n")),(0,l.kt)("p",null,"Components that need to read from ",(0,l.kt)("em",{parentName:"p"},"and")," write to an atom should use ",(0,l.kt)("inlineCode",{parentName:"p"},"useRecoilState()")," as shown below:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'function CharacterCounter() {\n  return (\n    <div>\n      <TextInput />\n      <CharacterCount />\n    </div>\n  );\n}\n\nfunction TextInput() {\n  const [text, setText] = useRecoilState(textState);\n\n  const onChange = (event) => {\n    setText(event.target.value);\n  };\n\n  return (\n    <div>\n      <input type="text" value={text} onChange={onChange} />\n      <br />\n      Echo: {text}\n    </div>\n  );\n}\n')),(0,l.kt)("h2",{id:"selector"},"Selector"),(0,l.kt)("p",null,"A ",(0,l.kt)("strong",{parentName:"p"},"selector")," represents a piece of ",(0,l.kt)("strong",{parentName:"p"},"derived state"),". Derived state is a ",(0,l.kt)("strong",{parentName:"p"},"transformation")," of state. You can think of derived state as the output of passing state to a pure function that modifies the given state in some way:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"const charCountState = selector({\n  key: 'charCountState', // unique ID (with respect to other atoms/selectors)\n  get: ({get}) => {\n    const text = get(textState);\n\n    return text.length;\n  },\n});\n")),(0,l.kt)("p",null,"We can use the ",(0,l.kt)("inlineCode",{parentName:"p"},"useRecoilValue()")," hook to read the value of ",(0,l.kt)("inlineCode",{parentName:"p"},"charCountState"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"function CharacterCount() {\n  const count = useRecoilValue(charCountState);\n\n  return <>Character Count: {count}</>;\n}\n")),(0,l.kt)("h2",{id:"demo"},"Demo"),(0,l.kt)("p",null,"Below is the finished product:"),(0,l.kt)(d,{mdxType:"GettingStarted"}))}N.isMDXComponent=!0}}]);