"use strict";(self.webpackChunkrecoil=self.webpackChunkrecoil||[]).push([[5078],{3905:function(e,a,t){t.d(a,{Zo:function(){return d},kt:function(){return m}});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=n.createContext({}),c=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},d=function(e){var a=c(e.components);return n.createElement(s.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},p=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=c(t),m=r,b=p["".concat(s,".").concat(m)]||p[m]||u[m]||o;return t?n.createElement(b,l(l({ref:a},d),{},{components:t})):n.createElement(b,l({ref:a},d))}));function m(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=p;var i={};for(var s in a)hasOwnProperty.call(a,s)&&(i[s]=a[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=t[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},4820:function(e,a,t){t.r(a),t.d(a,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return d},default:function(){return p}});var n=t(7462),r=t(3366),o=(t(7294),t(3905)),l=["components"],i={title:"class Loadable",sidebar_label:"Loadable"},s=void 0,c={unversionedId:"api-reference/core/Loadable",id:"api-reference/core/Loadable",title:"class Loadable",description:"A Loadable object represents the current state of a Recoil atom or selector.  This state may either have a value available, may be in an error state, or may still be pending asynchronous resolution.  A Loadable has the following interface:",source:"@site/docs/api-reference/core/Loadable.md",sourceDirName:"api-reference/core",slug:"/api-reference/core/Loadable",permalink:"/docs/api-reference/core/Loadable",editUrl:"https://github.com/facebookexperimental/Recoil/edit/docs/docs/docs/api-reference/core/Loadable.md",tags:[],version:"current",frontMatter:{title:"class Loadable",sidebar_label:"Loadable"},sidebar:"docs",previous:{title:"selector()",permalink:"/docs/api-reference/core/selector"},next:{title:"useRecoilState()",permalink:"/docs/api-reference/core/useRecoilState"}},d=[{value:"Example",id:"example",children:[],level:3},{value:"Creating Loadables",id:"creating-loadables",children:[{value:"Examples",id:"examples",children:[],level:3}],level:2}],u={toc:d};function p(e){var a=e.components,t=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,n.Z)({},u,t,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"Loadable")," object represents the current state of a Recoil ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/atom"},"atom")," or ",(0,o.kt)("a",{parentName:"p",href:"/docs/api-reference/core/selector"},"selector"),".  This state may either have a value available, may be in an error state, or may still be pending asynchronous resolution.  A ",(0,o.kt)("inlineCode",{parentName:"p"},"Loadable")," has the following interface:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"state"),": The current state of the atom or selector.  Possible values are ",(0,o.kt)("inlineCode",{parentName:"li"},"'hasValue'"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"'hasError'"),", or ",(0,o.kt)("inlineCode",{parentName:"li"},"'loading'"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"contents"),": The value represented by this ",(0,o.kt)("inlineCode",{parentName:"li"},"Loadable"),".  If the state is ",(0,o.kt)("inlineCode",{parentName:"li"},"hasValue"),", it is the actual value, if the state is ",(0,o.kt)("inlineCode",{parentName:"li"},"hasError")," it is the ",(0,o.kt)("inlineCode",{parentName:"li"},"Error")," object that was thrown, and if the state is ",(0,o.kt)("inlineCode",{parentName:"li"},"loading"),", then a ",(0,o.kt)("inlineCode",{parentName:"li"},"Promise")," of the value.")),(0,o.kt)("p",null,"Loadables also contain helper methods for accessing the current state.  ",(0,o.kt)("em",{parentName:"p"},"Consider this API to be unstable"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"getValue()")," - Method to access the value that matches the semantics of React Suspense and Recoil selectors.  If the state has a value then it returns a value, if it has an error then it throws that error, and if it is still pending then it suspends execution or rendering to propagate the pending state."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"toPromise()"),": returns a ",(0,o.kt)("inlineCode",{parentName:"li"},"Promise")," that will resolve when the selector has resolved. If the selector is synchronous or has already resolved it returns a ",(0,o.kt)("inlineCode",{parentName:"li"},"Promise")," that resolves immediately."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"valueMaybe()")," - Returns the value if available, otherwise returns ",(0,o.kt)("inlineCode",{parentName:"li"},"undefined")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"valueOrThrow()")," - Returns the value if available or throws an Error."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"map(callback)")," - Takes a function to transform the value of the Loadable and returns a new ",(0,o.kt)("inlineCode",{parentName:"li"},"Loadable")," with the transformed value.  The transformation function gets a parameter of the parent Loadable's value and you can return the new value for the new Loadable; it also propagates thrown errors or suspense.  Your callback function can return either a new value, a ",(0,o.kt)("inlineCode",{parentName:"li"},"Promise")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"Loadable")," of a new value, or it can throw an error.  This method is comparable to ",(0,o.kt)("inlineCode",{parentName:"li"},".then()")," for Promises.")),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"function UserInfo({userID}) {\n  const userNameLoadable = useRecoilValueLoadable(userNameQuery(userID));\n  switch (userNameLoadable.state) {\n    case 'hasValue':\n      return <div>{userNameLoadable.contents}</div>;\n    case 'loading':\n      return <div>Loading...</div>;\n    case 'hasError':\n      throw userNameLoadable.contents;\n  }\n}\n")),(0,o.kt)("h2",{id:"creating-loadables"},"Creating Loadables"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"RecoilLoadable")," interface can be imported to create your own ",(0,o.kt)("inlineCode",{parentName:"p"},"Loadable")," objects."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"interface RecoilLoadable {\n  function of<T>(T | Promise<T>, Loadable<T>): Loadable<T>;\n  function error<T>(mixed): Loadable<T>;\n  function all(Array<mixed | Loadable<mixed> | Promise<mixed>>): Loadable<Array<mixed>>;\n  function all({[string]: mixed | Loadable<mixed> | Promise<mixed>}): Loadable<{[string]: mixed}>;\n  function loading(): Loadable<empty>;\n  function isLoadable(mixed): boolean;\n}\n")),(0,o.kt)("h3",{id:"examples"},"Examples"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"RecoilLoadable.of(123);\n\nRecoilLoadable.error(new Error('ERROR'));\n\nRecoilLoadable.all([\n  RecoilLoadable.of(1),\n  RecoilLoadable.of(10),\n  RecoilLoadable.of(100),\n]).map(([a, b, c]) => a+b+c);\n")),(0,o.kt)("p",null,"Loadables may represent asynchronous values:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// Asynchronously resolves to 123\nRecoilLoadable.of(Promise.resolve(123));\n")),(0,o.kt)("p",null,"Similar to ",(0,o.kt)("inlineCode",{parentName:"p"},"Promise.resolve()"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"RecoilLoadable.of()")," can accept literal values as well as Loadables or Promises, which will be unpacked:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// All resolve to 'x'\nRecoilLoadable.of('x');\nRecoilLoadable.of(RecoilLoadable.of('x'));\nRecoilLoadable.of(Promise.resolve('x'));\n")),(0,o.kt)("p",null,"Likewise, similar to ",(0,o.kt)("inlineCode",{parentName:"p"},"Promise.all()"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"RecoilLoadable.all()")," can accept arrays of Loadables, Promises, or literal values:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// Resolves to [1, 2, 3]\nRecoilLoadable.all([1, RecoilLoadable.of(2), Promise.resolve(3)]);\n\n// Resolves to {value: 1, loadable: 2, promise: 3}\nRecoilLoadable.all({\n  value: 1,\n  loadable: RecoilLoadable.of(2),\n  promise: Promise.resolve(3),\n});\n\n// Never resolves\nRecoilLoadable.loading();\n")))}p.isMDXComponent=!0}}]);