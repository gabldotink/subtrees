"use strict";(self.webpackChunkrecoil=self.webpackChunkrecoil||[]).push([[5372],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return d}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),p=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(a),d=n,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return a?r.createElement(h,l(l({ref:t},c),{},{components:a})):r.createElement(h,l({ref:t},c))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var p=2;p<i;p++)l[p]=a[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},1557:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return m}});var r=a(7462),n=a(3366),i=(a(7294),a(3905)),l=["components"],o={title:"graphQLSelectorFamily()",sidebar_label:"graphQLSelectorFamily()"},s=void 0,p={unversionedId:"recoil-relay/api/graphQLSelectorFamily",id:"recoil-relay/api/graphQLSelectorFamily",title:"graphQLSelectorFamily()",description:"graphQLSelectorFamily() is similar to graphQLSelector() except that it returns a function which accepts a parameter and returns a selector for that parameter.  This basically allows us to pass parameters to the query from the calling component based on props or other state.",source:"@site/docs/recoil-relay/api/graphQLSelectorFamily.md",sourceDirName:"recoil-relay/api",slug:"/recoil-relay/api/graphQLSelectorFamily",permalink:"/docs/recoil-relay/api/graphQLSelectorFamily",editUrl:"https://github.com/facebookexperimental/Recoil/edit/docs/docs/docs/recoil-relay/api/graphQLSelectorFamily.md",tags:[],version:"current",frontMatter:{title:"graphQLSelectorFamily()",sidebar_label:"graphQLSelectorFamily()"},sidebar:"recoil-relay",previous:{title:"graphQLSelector()",permalink:"/docs/recoil-relay/api/graphQLSelector"},next:{title:"graphQLQueryEffect()",permalink:"/docs/recoil-relay/api/graphQLQueryEffect"}},c=[{value:"Query with Parameter",id:"query-with-parameter",children:[],level:3},{value:"Query with Parameter and Upstream State",id:"query-with-parameter-and-upstream-state",children:[],level:3}],u={toc:c};function m(e){var t=e.components,a=(0,n.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"graphQLSelectorFamily()")," is similar to ",(0,i.kt)("a",{parentName:"p",href:"/docs/recoil-relay/api/graphQLSelector"},(0,i.kt)("inlineCode",{parentName:"a"},"graphQLSelector()"))," except that it returns a function which accepts a parameter and returns a selector for that parameter.  This basically allows us to pass parameters to the query from the calling component based on props or other state."),(0,i.kt)("hr",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"function graphQLSelectorFamily<\n  TVariables: Variables,\n  TData: $ReadOnly<{[string]: mixed}>,\n  P: Parameter = TVariables,\n  T = TData,\n  TRawResponse = void,\n  TMutationVariables: Variables = {},\n  TMutationData: $ReadOnly<{[string]: mixed}> = {},\n  TMutationRawResponse = void,\n>({\n  key: string,\n\n  environment: IEnvironment | EnvironmentKey,\n\n  query:\n    | Query<TVariables, TData, TRawResponse>\n    | GraphQLSubscription<TVariables, TData, TRawResponse>,\n\n  variables:\n    | TVariables\n    | P => TVariables | null\n    | P => ({get: GetRecoilValue}) => TVariables | null,\n\n  mapReponse:\n    | (TData, {get: GetRecoilValue, variables: TVariables}) => T\n    | (TData, {get: GetRecoilValue, variables: TVariables}) => P => T,\n\n  default?:\n    | T\n    | P => T,\n\n  mutations?: {\n    mutation: Mutation<TMutationVariables, TMudationData, TMutationRawResposne>,\n    variables:\n      | T => TMutationVariables | null\n      | T => P => TMutationVariables | null,\n  },\n\n}): P => RecoilState<T>\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"key"))," - A unique string used to identify the selector."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"environment"))," - The Relay Environment or an ",(0,i.kt)("a",{parentName:"li",href:"/docs/recoil-relay/api/EnvironmentKey"},(0,i.kt)("inlineCode",{parentName:"a"},"EnvironmentKey"))," to match with an environment pprovided by a surrounding ",(0,i.kt)("a",{parentName:"li",href:"/docs/recoil-relay/api/RecoilRelayEnvironment"},(0,i.kt)("inlineCode",{parentName:"a"},"<RecoilRelayEnvironment>")),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"query"))," - A ",(0,i.kt)("a",{parentName:"li",href:"https://graphql.org/learn/queries/"},"GraphQL Query or Subscription"),". ",(0,i.kt)("a",{parentName:"li",href:"/docs/recoil-relay/graphql-queries#graphql-fragments"},"Fragments")," are supported in queries."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"variables"))," - Callback to provide the ",(0,i.kt)("a",{parentName:"li",href:"https://graphql.org/learn/queries/#variables"},"variables")," object to use for the query.  This may be the variables object directly or a callback which is provided the famliy parameter and returns the variables.  A nested callback can also be used that gets a ",(0,i.kt)("inlineCode",{parentName:"li"},"get()")," function that allows the selector to reference other upstream Recoil atoms/selectors.  If ",(0,i.kt)("inlineCode",{parentName:"li"},"null")," is provided as the variables then no query will be performed and the ",(0,i.kt)("inlineCode",{parentName:"li"},"default")," value will be used instead."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"mapResponse"))," - Callback to transform the GraphQL results for using as the value of the selector.  It is also provided a ",(0,i.kt)("inlineCode",{parentName:"li"},"get()")," function so it can reference other Recoil atoms/selectors to perform the transformation.  A nested callback that receives the family parameter can also be used."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"default"))," - The default value to use if ",(0,i.kt)("inlineCode",{parentName:"li"},"null")," is provided as the ",(0,i.kt)("inlineCode",{parentName:"li"},"variables"),".  A callback can be used which gets the family parameter as an argument.  If ",(0,i.kt)("inlineCode",{parentName:"li"},"default")," is not provided then the selector will remain in a pending state."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"mutations"))," - Optional configuration of a ",(0,i.kt)("a",{parentName:"li",href:"https://graphql.org/learn/queries/#mutations"},"GraphQL Mutation")," and variables to commit if the selector is explicitly written to.")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"query-with-parameter"},"Query with Parameter"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"const eventQuery = graphQLSelectorFamily({\n  key: 'EventQuery',\n  environment: myEnvironment,\n  query: graphql`\n    query MyEventQuery($id: ID!) {\n      myevent(id: $id) {\n        id\n        name\n      }\n    }\n  `,\n  variables: id => ({id}),\n  mapResponse: data => data.myevent,\n});\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"function MyComponent(props) {\n  const eventInfo = useRecoilValue(eventQuery(props.eventID));\n\n  return (\n    <div>\n      <h1>{eventInfo.name}</h1>\n    </div>\n  );\n}\n")),(0,i.kt)("h3",{id:"query-with-parameter-and-upstream-state"},"Query with Parameter and Upstream State"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"variables")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"mapResponse")," can depend on both parameters and other upstream Recoil atoms/selectors."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"const eventQuery = graphQLSelectorFamily({\n  key: 'EventQuery',\n  environment: myEnvironment,\n  query: graphql`\n    query MyEventQuery($id: ID!) {\n      myevent(id: $id) {\n        id\n        name\n      }\n    }\n  `,\n  variables: id => ({get}) => ({id, clientID: get(clientIDAtom)}),\n  mapResponse: (data, {get}) => id => ({\n    id,\n    name: data.myevent?.name,\n    region: get(regionForIDSelector(id)),\n  }),\n});\n")))}m.isMDXComponent=!0}}]);