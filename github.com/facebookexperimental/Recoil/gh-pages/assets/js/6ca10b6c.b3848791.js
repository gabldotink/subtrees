"use strict";(self.webpackChunkrecoil=self.webpackChunkrecoil||[]).push([[2563],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),s=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return o.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},f=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),f=s(n),d=r,m=f["".concat(c,".").concat(d)]||f[d]||p[d]||a;return n?o.createElement(m,i(i({ref:t},u),{},{components:n})):o.createElement(m,i({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=f;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}f.displayName="MDXCreateElement"},7588:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return u},default:function(){return f}});var o=n(7462),r=n(3366),a=(n(7294),n(3905)),i=["components"],l={title:"useGetRecoilValueInfo_UNSTABLE()",sidebar_label:"useGetRecoilValueInfo()"},c=void 0,s={unversionedId:"api-reference/core/useGetRecoilValueInfo",id:"api-reference/core/useGetRecoilValueInfo",title:"useGetRecoilValueInfo_UNSTABLE()",description:'This hook allows a component to "peek" at the current state, value, and other information about an atom or selector.  This is similar to the getInfo_UNSTABLE() method in Snapshot and atom effects',source:"@site/docs/api-reference/core/useGetRecoilValueInfo.md",sourceDirName:"api-reference/core",slug:"/api-reference/core/useGetRecoilValueInfo",permalink:"/docs/api-reference/core/useGetRecoilValueInfo",editUrl:"https://github.com/facebookexperimental/Recoil/edit/docs/docs/docs/api-reference/core/useGetRecoilValueInfo.md",tags:[],version:"current",frontMatter:{title:"useGetRecoilValueInfo_UNSTABLE()",sidebar_label:"useGetRecoilValueInfo()"},sidebar:"docs",previous:{title:"useRecoilValueLoadable()",permalink:"/docs/api-reference/core/useRecoilValueLoadable"},next:{title:"useRecoilRefresher()",permalink:"/docs/api-reference/core/useRecoilRefresher"}},u=[{value:"Example",id:"example",children:[],level:3}],p={toc:u};function f(e){var t=e.components,n=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,'This hook allows a component to "peek" at the current state, value, and other information about an atom or selector.  This is similar to the ',(0,a.kt)("inlineCode",{parentName:"p"},"getInfo_UNSTABLE()")," method in ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/core/Snapshot#debug-information"},(0,a.kt)("inlineCode",{parentName:"a"},"Snapshot"))," and ",(0,a.kt)("a",{parentName:"p",href:"/docs/guides/atom-effects"},"atom effects")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"function useGetRecoilValueInfo_UNSTABLE(): RecoilValue<T> => RecoilValueInfo<T>;\n\ninterface RecoilValueInfo<T> {\n  loadable?: Loadable<T>;\n  isActive: boolean;\n  isSet: boolean;\n  isModified: boolean; // TODO report modified selectors\n  type: 'atom' | 'selector';\n  deps: Iterable<RecoilValue<T>>;\n  subscribers: {\n    nodes: Iterable<RecoilValue<T>>,\n    components: Iterable<ComponentInfo>,\n  };\n}\n\ninterface ComponentInfo {\n  name: string;\n}\n")),(0,a.kt)("p",null,"It provides a function which can be passed a ",(0,a.kt)("inlineCode",{parentName:"p"},"RecoilValue<T>")," and will return an object which contains current information about that atom/selector.  It will not cause any state to change or create any subscriptions.  It is primarily intended for use in debugging or dev tools."),(0,a.kt)("p",null,"The debug information is evolving, but may include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"loadable")," - A Loadable with the current state.  Unlike methods like ",(0,a.kt)("inlineCode",{parentName:"li"},"getLoadable()"),", this method will not mutate the snapshot at all.  It provides the current state and will not initialize new atoms/selectors, perform any new selector evaluations, or update any dependencies or subscriptions."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"isSet")," - True if this is an atom with an explicit value stored in the snapshot state.  False if this is a selector or using the default atom state."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"isModified")," - True if this is an atom which was modified since the last transaction."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"type")," - Either an ",(0,a.kt)("inlineCode",{parentName:"li"},"atom")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"selector")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"deps")," - An iterator over the atoms or selectors this node depends on."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"subscribers")," - Information about what is subscribing to this node for this snapshot.  Details under development.")),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"function ButtonToShowCurrentSubscriptions() {\n  const getRecoilValueInfo = useGetRecoilValueInfo_UNSTABLE();\n  function onClick() {\n    const {subscribers} = getRecoilValueInfo(myAtom);\n    console.debug(\n      'Current Subscriber Nodes:',\n      Array.from(subscribers.nodes).map(({key}) => key),\n    );\n  }\n\n  return <button onClick={onClick} >See Current Subscribers</button>;\n}\n")))}f.isMDXComponent=!0}}]);