# {{ ansible_managed }}
server {
    listen 8080 default_server;
    server_name localhost;

    access_log /var/log/nginx/default_server_8080.log;
    error_log /var/log/nginx/default_server_8080.log;

    location /nginx_status {
        stub_status on;
        allow 127.0.0.1;
        deny all;
    }

    location / {
        empty_gif;
    }

    location /hb {
        empty_gif;
    }
}

server {
    listen 80;
    server_name {{ inventory_hostname }} {{ ansible_default_ipv4.address }};

    access_log /var/log/nginx/{{ inventory_hostname }}.log;
    error_log /var/log/nginx/{{ inventory_hostname }}.log;

    location / {
        empty_gif;
    }

    location /hb {
        empty_gif;
    }

    location /maintenance {
        allow 127.0.0.1;

{% if nginx_maintenance_extra_allowed %}
        # extra authorization
{% for allow in nginx_maintenance_extra_allowed %}
        allow {{ allow }};
{% endfor %}
{% endif %}

        deny all;

        content_by_lua_block {
            local maintenance_file_path = "{{ nginx_maintenance_dir }}maintenance.txt"

            -- return the current server status.
            local function return_current_status()
                file = io.open(maintenance_file_path, "r")

                if file == nil then
                    ngx.say("enabled")
                    ngx.exit(0)
                end

                local status = file:read()
                file:close()
                if status == nil then
                    ngx.say("enabled")
                    ngx.exit(0)
                else
                    ngx.say(status)
                    ngx.exit(0)
                end
            end

            local args = ngx.req.get_uri_args()
            for key, val in pairs(args) do
                -- (re-)disabled the server.
                if key == "disabled" then
                    file = io.open(maintenance_file_path, "w")
                    file:write("disabled")
                    file:close()
                    ngx.say("disabled")
                    ngx.exit(0)
                -- (re-)enabled the server.
                elseif key == "enabled" then
                    file = io.open(maintenance_file_path, "w")
                    file:write("enabled")
                    file:close()
                    ngx.say("enabled")
                    ngx.exit(0)
                else
                    return_current_status()
                end
            end

            -- when no http argument.
            return_current_status()
        }
    }
}
