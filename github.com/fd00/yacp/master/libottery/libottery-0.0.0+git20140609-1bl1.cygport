HOMEPAGE="https://github.com/nmathewson/${PN}"
GIT_URI="https://github.com/nmathewson/${PN}.git"

CATEGORY="Libs"
SUMMARY="Fast secure userspace pseudorandom number generator"
DESCRIPTION="This project is meant to provide a drop-in replacement for the horrible random
number generator you are using today.

The RNG you are using today is probably horrible because:

 * If it's fast, it's probably very insecure. If you have ever gotten bytes
   from random() or rand() or mt_rand() or whatever and exposed them to the
   world, you have typically just let the world know what bytes you're going
   to be using from now to the end of time.

 * If it's secure, it's probably slow. So you probably have an insecure one
   that you use when you need random numbers fast.

 * If it's arc4random from an older OpenBSD (before October 2013), or any of
   the dozens of copies of the old arc4random() that have found their ways
   into other codebases, then you probably think it's secure, but it isn't,
   really. Even after you do the discard the first N bytes trick, RC4 still
   has detectable statistical biases. See also What's wrong with RC4-based
   arcreandom() below.

   (The arc4random() from newer OpenBSDs is better, and doesn't use RC4 any
   more. The architecture there seems basically sound.)

This tool aims to be a speed-competitive replacement for arc4random, for your
libc's random() or rand() function. It aims to be so fast that you will never
need to think do I need to use a secure random number generator here, or can
I use a fast one?

It currently uses Dan Bernstein's ChaCha stream cipher as its base. When it
goes fast, it goes fast because of Ted Krovetz's implementation."

inherit git

DOCS="
	doc/*.txt
"

PKG_NAMES="
	${PN}
	${PN}0
	${PN}-devel
"
libottery_CONTENTS="
	usr/share
"
libottery0_CONTENTS="
	usr/bin
"
libottery_devel_CONTENTS="
	usr/include
	usr/lib
"

libottery_SUMMARY="${SUMMARY} (licensing & readmes)"
libottery0_SUMMARY="${SUMMARY} (runtime)"
libottery_devel_SUMMARY="${SUMMARY} (development)"
