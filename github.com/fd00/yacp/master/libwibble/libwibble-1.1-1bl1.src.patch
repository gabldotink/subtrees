--- origsrc/libwibble-1.1/configure.ac	2013-10-22 19:53:18.000000000 +0900
+++ src/libwibble-1.1/configure.ac	2020-01-16 15:12:35.746730100 +0900
@@ -14,7 +14,7 @@ AC_ARG_ENABLE(docs,
 AM_CONDITIONAL(DO_DOCS, test x$docs = xtrue)
 
 dnl Doen not work when embedded
-dnl AC_CONFIG_HEADERS(wibble/config.h)
+AC_CONFIG_HEADERS(wibble/config.h)
 
 dnl To use subdirs
 AC_PROG_MAKE_SET
--- origsrc/libwibble-1.1/wibble/Makefile.am	2013-10-21 02:26:23.000000000 +0900
+++ src/libwibble-1.1/wibble/Makefile.am	2020-01-16 15:23:52.988629700 +0900
@@ -127,7 +127,7 @@ libwibble_la_SOURCES = \
     net/http.cpp
 
 #libwibble_la_LIBADD = 
-#libwibble_la_LDFLAGS = -no-undefined
+libwibble_la_LDFLAGS = -no-undefined
 
 EXTRA_DIST = README libwibble.m4 libwibble.pc.in \
     amorph.test.h \
--- origsrc/libwibble-1.1/wibble/exception.cpp	2010-10-31 00:10:53.000000000 +0900
+++ src/libwibble-1.1/wibble/exception.cpp	2020-01-16 15:04:22.860947400 +0900
@@ -29,7 +29,7 @@
 #include <sstream>
 #include <iostream>
 
-#if defined(POSIX) && ! defined(__xlC__)
+#if defined(POSIX) && ! defined(__xlC__) && !defined(__CYGWIN__)
 #include <execinfo.h>
 #endif
 
@@ -40,7 +40,7 @@ namespace exception {
 
 std::vector< std::string > *AddContext::s_context = 0;
 
-#if defined(POSIX) && ! defined(__xlC__)
+#if defined(POSIX) && ! defined(__xlC__) && !defined(__CYGWIN__)
 void DefaultUnexpected()
 {
 	try {
--- origsrc/libwibble-1.1/wibble/sys/filelock.h	2013-10-21 07:29:57.000000000 +0900
+++ src/libwibble-1.1/wibble/sys/filelock.h	2020-01-16 15:15:52.077253800 +0900
@@ -5,6 +5,7 @@
 
 #ifdef POSIX
 
+#include <cstdio>
 #include <fcntl.h>
 
 namespace wibble {
--- origsrc/libwibble-1.1/wibble/sys/mutex.h	2013-10-21 01:52:20.000000000 +0900
+++ src/libwibble-1.1/wibble/sys/mutex.h	2020-01-16 15:21:56.700329400 +0900
@@ -64,13 +64,13 @@ public:
             pthread_mutexattr_t attr;
             pthread_mutexattr_init( &attr );
             if ( recursive ) {
-#if (__APPLE__ || __xlC__)
+#if (__APPLE__ || __xlC__) || defined(__CYGWIN__)
                 pthread_mutexattr_settype( &attr, PTHREAD_MUTEX_RECURSIVE );
 #else
                 pthread_mutexattr_settype( &attr, PTHREAD_MUTEX_RECURSIVE_NP );
 #endif
             } else {
-#ifndef NDEBUG
+#if !defined(NDEBUG) && defined(PTHREAD_MUTEX_ERRORCHECK_NP)
                 pthread_mutexattr_settype( &attr, PTHREAD_MUTEX_ERRORCHECK_NP );
 #endif
             }
--- origsrc/libwibble-1.1/wibble/sys/process.cpp	2013-10-21 01:52:20.000000000 +0900
+++ src/libwibble-1.1/wibble/sys/process.cpp	2020-01-16 15:19:52.011581500 +0900
@@ -271,10 +271,14 @@ static string describe_rlimit_res_t(int
 		case RLIMIT_DATA: return "max data size";
 		case RLIMIT_STACK: return "max stack size";
 		case RLIMIT_CORE: return "max core file size";
+#if defined(RLIMIT_RSS)
 		case RLIMIT_RSS: return "max resident set size";
+#endif
+#if defined(RLIMIT_NPROC)
 		case RLIMIT_NPROC: return "max number of processes";
+#endif
 		case RLIMIT_NOFILE: return "max number of open files";
-#ifndef __xlC__
+#if defined(RLIMIT_MEMLOCK)
 		case RLIMIT_MEMLOCK: return "max locked-in-memory address spac";
 #endif
 #ifndef __APPLE__
@@ -312,14 +316,22 @@ int getCPUTimeLimit(int* max) { return g
 int getFileSizeLimit(int* max) { return getLimit(RLIMIT_FSIZE, max); }
 int getDataMemoryLimit(int* max) { return getLimit(RLIMIT_DATA, max); }
 int getCoreSizeLimit(int* max) { return getLimit(RLIMIT_CORE, max); }
+#if defined(RLIMIT_NPROC)
 int getChildrenLimit(int* max) { return getLimit(RLIMIT_NPROC, max); }
+#else
+int getChildrenLimit(int* max) { return 0; }
+#endif
 int getOpenFilesLimit(int* max) { return getLimit(RLIMIT_NOFILE, max); }
 
 void setCPUTimeLimit(int value) { setLimit(RLIMIT_CPU, value); }
 void setFileSizeLimit(int value) { setLimit(RLIMIT_FSIZE, value); }
 void setDataMemoryLimit(int value) { setLimit(RLIMIT_DATA, value); }
 void setCoreSizeLimit(int value) { setLimit(RLIMIT_CORE, value); }
+#if defined(RLIMIT_NPROC)
 void setChildrenLimit(int value) { setLimit(RLIMIT_NPROC, value); }
+#else
+void setChildrenLimit(int value) { }
+#endif
 void setOpenFilesLimit(int value) { setLimit(RLIMIT_NOFILE, value); }
 
 #ifdef __linux__
