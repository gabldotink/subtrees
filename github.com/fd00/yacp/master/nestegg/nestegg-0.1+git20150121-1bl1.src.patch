--- origsrc/nestegg/Makefile.am	2015-02-15 19:50:14.000000000 +0900
+++ src/nestegg/Makefile.am	2015-02-15 20:48:52.766339800 +0900
@@ -1,7 +1,7 @@
 AUTOMAKE_OPTIONS = foreign 1.11 no-dist-gzip dist-xz subdir-objects
 ACLOCAL_AMFLAGS = -I m4
 
-AM_CPPFLAGS = -I$(top_srcdir)/include -I. -I$(top_srcdir)/halloc
+AM_CPPFLAGS = -I$(top_builddir)/include -I$(top_srcdir)/include -I. -I$(top_srcdir)/halloc
 AM_CFLAGS = -ansi -pedantic -Wall -Wextra -Wno-long-long -Wno-unused-parameter -O2 -g
 
 SUBDIRS = docs
@@ -27,14 +27,10 @@ nestegginclude_HEADERS = include/nestegg
 lib_LTLIBRARIES = src/libnestegg.la
 
 src_libnestegg_la_SOURCES = \
-	src/nestegg.c \
-	halloc/src/halloc.c \
-	halloc/halloc.h \
-	halloc/src/align.h \
-	halloc/src/hlist.h \
-	halloc/src/macros.h
+	src/nestegg.c 
 
 src_libnestegg_la_LDFLAGS = -export-symbols-regex '^nestegg_' -no-undefined
+src_libnestegg_la_LIBADD = $(HALLOC_LIBS)
 
 check_PROGRAMS = test/test test/regress
 
--- origsrc/nestegg/configure.ac	2015-02-15 19:50:14.000000000 +0900
+++ src/nestegg/configure.ac	2015-02-15 20:46:09.408556900 +0900
@@ -72,6 +72,8 @@ AC_PROG_LD
 AC_PROG_LD_GNU
 AC_MSG_CHECKING([how to control symbol export])
 
+PKG_CHECK_MODULES([HALLOC], [halloc])
+
 dnl --------------------------------------------------
 dnl Do substitutions
 dnl --------------------------------------------------
--- origsrc/nestegg/src/nestegg.c	2015-02-15 19:50:14.000000000 +0900
+++ src/nestegg/src/nestegg.c	2015-02-15 20:55:31.170335500 +0900
@@ -2612,8 +2612,36 @@ nestegg_sniff(unsigned char const * buff
   return ne_match_webm(io, length);
 }
 
+#define allocator halloc_allocator
+
 /* From halloc.c */
-int halloc_set_allocator(realloc_t realloc_func);
+int halloc_set_allocator(realloc_t realloc_func)
+{
+  void * p;
+  assert(! allocator);
+  
+  /*
+   *  the purpose of the test below is to check the behaviour
+   *  of realloc(ptr, 0), which is defined in the standard
+   *  as an implementation-specific. if it returns zero,
+   *  then it's equivalent to free(). it can however return
+   *  non-zero, in which case it cannot be used for freeing
+   *  memory blocks and we'll need to supply our own version
+   *
+   *  Thanks to Stan Tobias for pointing this tricky part out.
+   */
+  if (! (p = realloc_func(NULL, 1)))
+    /* hmm */
+    return -1;
+    
+  if ((p = realloc_func(p, 0)))
+  {
+    /* realloc_func cannot be used as free() */
+    return 0;
+  }
+  allocator = realloc_func;
+  return 1;
+}
 
 int
 nestegg_set_halloc_func(void * (* realloc_func)(void *, size_t))
