--- origsrc/forestdb-1.2/CMakeLists.txt	2016-05-25 05:35:54.000000000 +0900
+++ src/forestdb-1.2/CMakeLists.txt	2020-01-09 13:52:42.680722600 +0900
@@ -20,7 +20,7 @@ IF (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/.
                     ERROR_QUIET
                     OUTPUT_STRIP_TRAILING_WHITESPACE)
 ELSE (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/.git)
-    SET(FORESTDB_VERSION "unknown")
+    SET(FORESTDB_VERSION "1.2")
 ENDIF (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/.git)
 
 include_directories(BEFORE ${PROJECT_SOURCE_DIR}/option)
@@ -189,7 +189,7 @@ add_library(forestdb SHARED
 target_link_libraries(forestdb ${PTHREAD_LIB} ${LIBM} ${SNAPPY_LIBRARIES}
                       ${ASYNC_IO_LIB} ${MALLOC_LIBRARIES} ${LIBRT}
                       ${BACKTRACE_LIBRARIES} ${PLATFORM_LIBRARY} ${CRYPTO_LIB})
-
+set_target_properties(forestdb PROPERTIES SOVERSION 0)
 
 # Create objects libraries for the different "tools" parts forestdb, which can be reused
 # by various targets.
@@ -252,6 +252,17 @@ if (("${CMAKE_BUILD_TYPE}" STREQUAL "Val
     SETUP_TARGET_FOR_MEMCHECK(test_valgrind ${PROJECT_BINARY_DIR}/fdb_functional_test)
 endif()
 
+if (CYGWIN)
+  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fpermissive")
+endif()
+
 # add top-level testing dir
 enable_testing()
 add_subdirectory("${PROJECT_SOURCE_DIR}/tests")
+
+SET(prefix ${CMAKE_INSTALL_PREFIX})
+SET(exec_prefix ${CMAKE_INSTALL_PREFIX})
+SET(libdir ${CMAKE_INSTALL_PREFIX}/lib)
+SET(includedir ${CMAKE_INSTALL_PREFIX}/include)
+CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/forestdb.pc.in ${CMAKE_BINARY_DIR}/forestdb.pc @ONLY)
+INSTALL(FILES ${CMAKE_BINARY_DIR}/forestdb.pc DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig)
--- origsrc/forestdb-1.2/forestdb.pc.in	1970-01-01 09:00:00.000000000 +0900
+++ src/forestdb-1.2/forestdb.pc.in	2020-01-09 13:52:42.696348100 +0900
@@ -0,0 +1,10 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: forestdb
+Description: Fast Key-Value Storage Engine Based on Hierarchical B+-Tree Trie
+Version: @FORESTDB_VERSION@
+Libs: -L${libdir} -lforestdb
+Cflags: -I${includedir}/libforestdb
--- origsrc/forestdb-1.2/src/filemgr_ops_linux.cc	2016-05-25 05:35:54.000000000 +0900
+++ src/forestdb-1.2/src/filemgr_ops_linux.cc	2020-01-09 13:52:42.696348100 +0900
@@ -364,7 +364,7 @@ struct tranfer_blk_ownership {
 };
 #endif // EXT4_IOC_TRANSFER_BLK_OWNERSHIP
 
-#ifndef __sun
+#if !defined(__sun) && !defined(__CYGWIN__)
 static
 int _filemgr_linux_ext4_share_blks(int src_fd, int dst_fd, uint64_t src_off,
                                    uint64_t dst_off, uint64_t len)
@@ -385,7 +385,7 @@ int _filemgr_linux_ext4_share_blks(int s
 
 int _filemgr_linux_get_fs_type(int src_fd)
 {
-#ifdef __sun
+#if defined(__sun) || defined(__CYGWIN__)
     // No support for ZFS
     return FILEMGR_FS_NO_COW;
 #else
@@ -419,7 +419,7 @@ int _filemgr_linux_copy_file_range(int f
                                    uint64_t dst_off, uint64_t len)
 {
     int ret = (int)FDB_RESULT_INVALID_ARGS;
-#ifndef __sun
+#if !defined(__sun) && !defined(__CYGWIN__)
     if (fs_type == FILEMGR_FS_BTRFS) {
         struct btrfs_ioctl_clone_range_args cr_args;
 
--- origsrc/forestdb-1.2/utils/timing.cc	2016-05-25 05:35:54.000000000 +0900
+++ src/forestdb-1.2/utils/timing.cc	2020-01-09 13:52:42.711978700 +0900
@@ -261,7 +261,7 @@ ts_nsec get_monotonic_ts() {
     }
 
     ts = (double)time * timebase.numer / timebase.denom;
-#elif defined(__linux__) || defined(__sun) || defined(__FreeBSD__)
+#elif defined(__linux__) || defined(__sun) || defined(__FreeBSD__) || defined(__CYGWIN__)
     /* Linux and Solaris can use clock_gettime */
     struct timespec tm;
     if (clock_gettime(CLOCK_MONOTONIC, &tm) == -1) {
