--- origsrc/rocksdb-6.11.4/CMakeLists.txt	2020-07-16 09:54:15.000000000 +0900
+++ src/rocksdb-6.11.4/CMakeLists.txt	2020-08-17 11:34:17.077659900 +0900
@@ -855,9 +855,11 @@ else()
   set(SYSTEM_LIBS ${CMAKE_THREAD_LIBS_INIT})
 endif()
 
-add_library(${ROCKSDB_STATIC_LIB} STATIC ${SOURCES})
-target_link_libraries(${ROCKSDB_STATIC_LIB} PRIVATE
-  ${THIRDPARTY_LIBS} ${SYSTEM_LIBS})
+if(NOT CYGWIN)
+  add_library(${ROCKSDB_STATIC_LIB} STATIC ${SOURCES})
+  target_link_libraries(${ROCKSDB_STATIC_LIB} PRIVATE
+    ${THIRDPARTY_LIBS} ${SYSTEM_LIBS})
+endif()
 
 if(ROCKSDB_BUILD_SHARED)
   add_library(${ROCKSDB_SHARED_LIB} SHARED ${SOURCES})
@@ -897,7 +899,10 @@ option(WITH_CORE_TOOLS "build with ldb a
 option(WITH_TOOLS "build with tools" ON)
 
 if(WITH_TESTS OR WITH_BENCHMARK_TOOLS OR WITH_TOOLS OR WITH_JNI OR JNI)
-  include_directories(SYSTEM ${PROJECT_SOURCE_DIR}/third-party/gtest-1.8.1/fused-src)
+  find_package(gtest)
+  if(NOT GTEST_FOUND)
+    include_directories(SYSTEM ${PROJECT_SOURCE_DIR}/third-party/gtest-1.8.1/fused-src)
+  endif()
 endif()
 if(WITH_JNI OR JNI)
   message(STATUS "JNI library is enabled")
@@ -938,13 +943,15 @@ if(NOT WIN32 OR ROCKSDB_INSTALL_ON_WINDO
 
   install(DIRECTORY "${PROJECT_SOURCE_DIR}/cmake/modules" COMPONENT devel DESTINATION ${package_config_destination})
 
-  install(
-    TARGETS ${ROCKSDB_STATIC_LIB}
-    EXPORT RocksDBTargets
-    COMPONENT devel
-    ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}"
-    INCLUDES DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}"
-  )
+  if(NOT CYGWIN)
+    install(
+      TARGETS ${ROCKSDB_STATIC_LIB}
+      EXPORT RocksDBTargets
+      COMPONENT devel
+      ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}"
+      INCLUDES DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}"
+    )
+  endif()
 
   if(ROCKSDB_BUILD_SHARED)
     install(
@@ -975,7 +982,9 @@ if(NOT WIN32 OR ROCKSDB_INSTALL_ON_WINDO
 endif()
 
 if(WITH_TESTS)
-  add_subdirectory(third-party/gtest-1.8.1/fused-src/gtest)
+  if(NOT GTEST_FOUND)
+    add_subdirectory(third-party/gtest-1.8.1/fused-src/gtest)
+  endif()
   add_library(testharness STATIC
   test_util/testharness.cc)
   target_link_libraries(testharness gtest)
@@ -1180,7 +1189,7 @@ if(WITH_TESTS)
         EXCLUDE_FROM_DEFAULT_BUILD_RELWITHDEBINFO 1
         OUTPUT_NAME ${exename}${ARTIFACT_SUFFIX}
       )
-      target_link_libraries(${CMAKE_PROJECT_NAME}_${exename}${ARTIFACT_SUFFIX} testutillib${ARTIFACT_SUFFIX} testharness gtest ${ROCKSDB_LIB})
+      target_link_libraries(${CMAKE_PROJECT_NAME}_${exename}${ARTIFACT_SUFFIX} testutillib${ARTIFACT_SUFFIX} testharness gtest ${ROCKSDB_LIB} ${THIRDPARTY_LIBS})
       if(NOT "${exename}" MATCHES "db_sanity_test")
         add_test(NAME ${exename} COMMAND ${exename}${ARTIFACT_SUFFIX})
         add_dependencies(check ${CMAKE_PROJECT_NAME}_${exename}${ARTIFACT_SUFFIX})
@@ -1217,37 +1226,37 @@ if(WITH_BENCHMARK_TOOLS)
     tools/db_bench.cc
     tools/db_bench_tool.cc)
   target_link_libraries(db_bench
-    ${ROCKSDB_LIB})
+    ${ROCKSDB_LIB} ${THIRDPARTY_LIBS})
 
   add_executable(cache_bench
     cache/cache_bench.cc)
   target_link_libraries(cache_bench
-    ${ROCKSDB_LIB})
+    ${ROCKSDB_LIB} ${THIRDPARTY_LIBS})
 
   add_executable(memtablerep_bench
     memtable/memtablerep_bench.cc)
   target_link_libraries(memtablerep_bench
-    ${ROCKSDB_LIB})
+    ${ROCKSDB_LIB} ${THIRDPARTY_LIBS})
 
   add_executable(range_del_aggregator_bench
     db/range_del_aggregator_bench.cc)
   target_link_libraries(range_del_aggregator_bench
-    ${ROCKSDB_LIB})
+    ${ROCKSDB_LIB} ${THIRDPARTY_LIBS})
 
   add_executable(table_reader_bench
     table/table_reader_bench.cc)
   target_link_libraries(table_reader_bench
-    ${ROCKSDB_LIB} testharness)
+    ${ROCKSDB_LIB} testharness ${THIRDPARTY_LIBS})
 
   add_executable(filter_bench
     util/filter_bench.cc)
   target_link_libraries(filter_bench
-    ${ROCKSDB_LIB})
+    ${ROCKSDB_LIB} ${THIRDPARTY_LIBS})
 
   add_executable(hash_table_bench
     utilities/persistent_cache/hash_table_bench.cc)
   target_link_libraries(hash_table_bench
-    ${ROCKSDB_LIB})
+    ${ROCKSDB_LIB} ${THIRDPARTY_LIBS})
 endif()
 
 if(WITH_CORE_TOOLS OR WITH_TOOLS)
@@ -1261,3 +1270,10 @@ if(WITH_TOOLS)
   add_custom_target(tools
     DEPENDS ${tool_deps})
 endif()
+
+SET(prefix ${CMAKE_INSTALL_PREFIX})
+SET(exec_prefix ${CMAKE_INSTALL_PREFIX})
+SET(libdir ${CMAKE_INSTALL_PREFIX}/lib)
+SET(includedir ${CMAKE_INSTALL_PREFIX}/include)
+CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/rocksdb.pc.in ${CMAKE_BINARY_DIR}/rocksdb.pc @ONLY)
+INSTALL(FILES ${CMAKE_BINARY_DIR}/rocksdb.pc DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig)
--- origsrc/rocksdb-6.11.4/db/db_wal_test.cc	2020-07-16 09:54:15.000000000 +0900
+++ src/rocksdb-6.11.4/db/db_wal_test.cc	2020-08-16 17:12:49.469667200 +0900
@@ -7,6 +7,8 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file. See the AUTHORS file for names of contributors.
 
+#include <alloca.h>
+
 #include "db/db_test_util.h"
 #include "env/composite_env_wrapper.h"
 #include "options/options_helper.h"
--- origsrc/rocksdb-6.11.4/env/env_test.cc	2020-07-16 09:54:15.000000000 +0900
+++ src/rocksdb-6.11.4/env/env_test.cc	2020-08-16 17:14:07.308151100 +0900
@@ -1472,7 +1472,7 @@ TEST_P(EnvPosixTestWithParam, Preallocat
   std::unique_ptr<WritableFile> srcfile;
   EnvOptions soptions;
   soptions.use_direct_reads = soptions.use_direct_writes = direct_io_;
-#if !defined(OS_MACOSX) && !defined(OS_WIN) && !defined(OS_SOLARIS) && !defined(OS_AIX) && !defined(OS_OPENBSD) && !defined(OS_FREEBSD)
+#if !defined(OS_MACOSX) && !defined(OS_WIN) && !defined(OS_SOLARIS) && !defined(OS_AIX) && !defined(OS_OPENBSD) && !defined(OS_FREEBSD) && !defined(__CYGWIN__)
     if (soptions.use_direct_writes) {
       ROCKSDB_NAMESPACE::SyncPoint::GetInstance()->SetCallBack(
           "NewWritableFile:O_DIRECT", [&](void* arg) {
@@ -1533,7 +1533,7 @@ TEST_P(EnvPosixTestWithParam, Consistent
     const std::string path =
         test::TmpDir(env_) + "/" + "testfile_" + std::to_string(i);
     std::unique_ptr<WritableFile> file;
-#if !defined(OS_MACOSX) && !defined(OS_WIN) && !defined(OS_SOLARIS) && !defined(OS_AIX) && !defined(OS_OPENBSD) && !defined(OS_FREEBSD)
+#if !defined(OS_MACOSX) && !defined(OS_WIN) && !defined(OS_SOLARIS) && !defined(OS_AIX) && !defined(OS_OPENBSD) && !defined(OS_FREEBSD) && !defined(__CYGWIN__)
       if (soptions.use_direct_writes) {
         ROCKSDB_NAMESPACE::SyncPoint::GetInstance()->SetCallBack(
             "NewWritableFile:O_DIRECT", [&](void* arg) {
--- origsrc/rocksdb-6.11.4/port/port_posix.cc	2020-07-16 09:54:15.000000000 +0900
+++ src/rocksdb-6.11.4/port/port_posix.cc	2020-08-17 08:58:49.033431500 +0900
@@ -19,7 +19,9 @@
 #include <stdio.h>
 #include <string.h>
 #include <sys/resource.h>
+#if !defined(__CYGWIN__)
 #include <sys/syscall.h>
+#endif
 #include <sys/time.h>
 #include <unistd.h>
 #include <cstdlib>
--- origsrc/rocksdb-6.11.4/port/port_posix.h	2020-07-16 09:54:15.000000000 +0900
+++ src/rocksdb-6.11.4/port/port_posix.h	2020-08-16 17:15:42.928764600 +0900
@@ -21,7 +21,9 @@
 // in fact, we could use that one
 #define ROCKSDB_PRIszt "zu"
 
+#if !defined(__declspec)
 #define __declspec(S)
+#endif
 
 #define ROCKSDB_NOEXCEPT noexcept
 
--- origsrc/rocksdb-6.11.4/rocksdb.pc.in	1970-01-01 09:00:00.000000000 +0900
+++ src/rocksdb-6.11.4/rocksdb.pc.in	2020-08-17 11:34:42.171956300 +0900
@@ -0,0 +1,10 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: rocksdb
+Description: Persistent Key-Value Store for Flash and RAM Storage
+Version: @PROJECT_VERSION@
+Libs: -L${libdir} -lrocksdb
+Cflags: -I${includedir}
--- origsrc/rocksdb-6.11.4/util/filelock_test.cc	2020-07-16 09:54:15.000000000 +0900
+++ src/rocksdb-6.11.4/util/filelock_test.cc	2020-08-16 17:16:17.456603300 +0900
@@ -7,6 +7,7 @@
 #include "rocksdb/env.h"
 
 #include <fcntl.h>
+#include <sys/wait.h>
 #include <vector>
 #include "test_util/testharness.h"
 #include "util/coding.h"
