--- origsrc/sqlcheck-1.3/CMakeLists.txt	2022-03-20 08:56:18.000000000 +0900
+++ src/sqlcheck-1.3/CMakeLists.txt	2022-06-16 15:20:07.588532800 +0900
@@ -44,7 +44,9 @@ endif ()
 include(CheckCXXCompilerFlag)
 CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
 if(COMPILER_SUPPORTS_CXX11)
-	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
+    if (NOT CYGWIN)
+    	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
+    endif()
 else()
     message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
 endif()
@@ -54,30 +56,37 @@ set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_F
 
 # -- [ GTest
 enable_testing()
-set(GOOGLETEST_ROOT external/googletest/googletest CACHE STRING "Google Test source root")
-include_directories(
-    ${PROJECT_SOURCE_DIR}/${GOOGLETEST_ROOT}
-    ${PROJECT_SOURCE_DIR}/${GOOGLETEST_ROOT}/include
-    )
-set(GOOGLETEST_SOURCES
-    ${PROJECT_SOURCE_DIR}/${GOOGLETEST_ROOT}/src/gtest-all.cc
-    ${PROJECT_SOURCE_DIR}/${GOOGLETEST_ROOT}/src/gtest_main.cc
-    )
-foreach(_source ${GOOGLETEST_SOURCES})
-    set_source_files_properties(${_source} PROPERTIES GENERATED 1)
-endforeach()
+find_package(gtest)
+if (NOT GTEST_FOUND)
+    set(GOOGLETEST_ROOT external/googletest/googletest CACHE STRING "Google Test source root")
+    include_directories(
+        ${PROJECT_SOURCE_DIR}/${GOOGLETEST_ROOT}
+        ${PROJECT_SOURCE_DIR}/${GOOGLETEST_ROOT}/include
+        )
+    set(GOOGLETEST_SOURCES
+        ${PROJECT_SOURCE_DIR}/${GOOGLETEST_ROOT}/src/gtest-all.cc
+        ${PROJECT_SOURCE_DIR}/${GOOGLETEST_ROOT}/src/gtest_main.cc
+        )
+    foreach(_source ${GOOGLETEST_SOURCES})
+        set_source_files_properties(${_source} PROPERTIES GENERATED 1)
+    endforeach()
 
-add_library(googletest ${GOOGLETEST_SOURCES})
+    add_library(googletest ${GOOGLETEST_SOURCES})
+endif()
 
 # -- [ GFlags
 
-set(GFLAGS_ROOT external/gflags CACHE STRING "Google Flags")
+find_package(pkgconfig)
+pkg_check_modules(GFLAGS gflags)
+if (NOT GFLAGS_FOUND)
+    set(GFLAGS_ROOT external/gflags CACHE STRING "Google Flags")
 
-add_subdirectory(${PROJECT_SOURCE_DIR}/${GFLAGS_ROOT})
+    add_subdirectory(${PROJECT_SOURCE_DIR}/${GFLAGS_ROOT})
 
-include_directories(
-    ${PROJECT_BINARY_DIR}/${GFLAGS_ROOT}/include
-)
+    include_directories(
+        ${PROJECT_BINARY_DIR}/${GFLAGS_ROOT}/include
+    )
+endif()
 
 # --[ Threads
 
@@ -136,3 +145,9 @@ INCLUDE(CPack)
 add_subdirectory(src)
 add_subdirectory(test)
 
+set(prefix ${CMAKE_INSTALL_PREFIX})
+set(exec_prefix ${CMAKE_INSTALL_PREFIX})
+set(libdir ${CMAKE_INSTALL_PREFIX}/lib)
+set(includedir ${CMAKE_INSTALL_PREFIX}/include)
+configure_file(${CMAKE_SOURCE_DIR}/sqlcheck.pc.in ${CMAKE_BINARY_DIR}/sqlcheck.pc @ONLY)
+install(FILES ${CMAKE_BINARY_DIR}/sqlcheck.pc DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig)
--- origsrc/sqlcheck-1.3/sqlcheck.pc.in	1970-01-01 09:00:00.000000000 +0900
+++ src/sqlcheck-1.3/sqlcheck.pc.in	2022-06-16 15:20:07.495503800 +0900
@@ -0,0 +1,10 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: sqlcheck
+Description: Automatically identify anti-patterns in SQL queries
+Version: @VERSION@
+Libs: -L${libdir} -lsqlcheck
+Cflags: -I${includedir}
--- origsrc/sqlcheck-1.3/src/CMakeLists.txt	2022-03-20 08:56:18.000000000 +0900
+++ src/sqlcheck-1.3/src/CMakeLists.txt	2022-06-16 15:18:33.277779900 +0900
@@ -11,6 +11,10 @@ include_directories (${CMAKE_CURRENT_SOU
 
 # Create our sqlcheck library
 add_library (sqlcheck_library checker.cpp configuration.cpp list.cpp)
+set_target_properties(sqlcheck_library PROPERTIES OUTPUT_NAME sqlcheck)
+if (DEFINED SOVERSION)
+    set_target_properties(sqlcheck_library PROPERTIES SOVERSION "${SOVERSION}")
+endif()
 
 # Create our executable
 add_executable(sqlcheck main.cpp)
@@ -18,8 +22,12 @@ target_link_libraries(sqlcheck sqlcheck_
 ${GTEST_BOTH_LIBRARIES} 
 ${GLOG_LIBRARIES} 
 ${CMAKE_THREAD_LIBS_INIT}
-gflags
+${GFLAGS_LIBRARIES}
 )
 
 # Add installation target
-install (TARGETS sqlcheck sqlcheck_library DESTINATION bin)
+install (TARGETS sqlcheck DESTINATION bin)
+
+file(GLOB headers "${CMAKE_CURRENT_SOURCE_DIR}/include/*")
+install(FILES ${headers} DESTINATION include/sqlcheck)
+install(TARGETS sqlcheck_library RUNTIME DESTINATION bin ARCHIVE DESTINATION lib)
--- origsrc/sqlcheck-1.3/test/CMakeLists.txt	2022-03-20 08:56:18.000000000 +0900
+++ src/sqlcheck-1.3/test/CMakeLists.txt	2022-06-16 14:41:43.490333100 +0900
@@ -9,7 +9,6 @@ include_directories (${CMAKE_SOURCE_DIR}
 add_executable(test_suite test_suite.cpp)
 target_link_libraries(test_suite sqlcheck_library 
 ${GTEST_BOTH_LIBRARIES} 
-googletest
 ${GLOG_LIBRARIES} 
 ${CMAKE_THREAD_LIBS_INIT}
 )
