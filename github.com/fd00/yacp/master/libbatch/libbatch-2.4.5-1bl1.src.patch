--- origsrc/libbatch/CMakeLists.txt	2022-01-09 18:14:24.018613900 +0900
+++ src/libbatch/CMakeLists.txt	2022-01-09 18:14:28.800642400 +0900
@@ -46,7 +46,7 @@ IF(WIN32 AND NOT CYGWIN)
   # different installation directories for LibBatchConfig.cmake:
   SET(INSTALL_CMAKE_CONFIG_DIR cmake)
 ELSE()
-  SET(INSTALL_CMAKE_CONFIG_DIR share/cmake/libbatch)
+  SET(INSTALL_CMAKE_CONFIG_DIR lib/cmake/libbatch)
 ENDIF()
 SET(INSTALL_INCLUDE_DIR include)
 
@@ -183,3 +183,9 @@ SET(CPACK_SOURCE_IGNORE_FILES /\\\\.;/CV
 SET(CPACK_SOURCE_PACKAGE_FILE_NAME ${PROJECT_NAME}-${${PROJECT_NAME}_VERSION})
 INCLUDE(CPack)
 
+SET(prefix ${CMAKE_INSTALL_PREFIX})
+SET(exec_prefix ${CMAKE_INSTALL_PREFIX})
+SET(libdir ${CMAKE_INSTALL_PREFIX}/lib)
+SET(includedir ${CMAKE_INSTALL_PREFIX}/include)
+CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/libbatch.pc.in ${CMAKE_BINARY_DIR}/libbatch.pc @ONLY)
+INSTALL(FILES ${CMAKE_BINARY_DIR}/libbatch.pc DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig)
--- origsrc/libbatch/CMakeModules/FindLibbatchPython.cmake	2022-01-09 18:14:18.000000000 +0900
+++ src/libbatch/CMakeModules/FindLibbatchPython.cmake	2022-01-09 18:14:28.808634800 +0900
@@ -75,7 +75,7 @@ IF(EXISTS "${PYTHON_ROOT_DIR}")
 ENDIF()
 
 # Otherwise try the standard way (module mode, with the standard CMake Find*** macro):
-SALOME_FIND_PACKAGE(LibbatchPython PythonInterp MODULE)
+SALOME_FIND_PACKAGE(LibbatchPython PythonInterp 3 MODULE)
 SET(_found1 ${PYTHONINTERP_FOUND})
 
 IF (PYTHONINTERP_FOUND)
@@ -100,7 +100,7 @@ IF (PYTHONINTERP_FOUND)
   # Prepare call to FIND_PACKAGE(PythonLibs) and ensure priority is given to 
   # the location found for the interpreter:
   GET_FILENAME_COMPONENT(_tmp "${_python_dir}" PATH)
-  SALOME_FIND_PACKAGE(LibbatchPython PythonLibs MODULE)
+  SALOME_FIND_PACKAGE(LibbatchPython PythonLibs MODULE 3)
   # Restore variables:
   SET(LibbatchPython_FIND_VERSION_EXACT ${_old_EXACT})
   SET(LibbatchPython_FIND_VERSION "${_old_VERSION}")
--- origsrc/libbatch/libbatch.pc.in	1970-01-01 09:00:00.000000000 +0900
+++ src/libbatch/libbatch.pc.in	2022-01-09 18:14:28.811715800 +0900
@@ -0,0 +1,10 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: libbatch
+Description: Generic batch management library
+Version: @LIBBATCH_VERSION@
+Libs: -L${libdir} -lbatch
+Cflags: -I${includedir}
--- origsrc/libbatch/misc/CMakeLists.txt	2022-01-09 18:14:18.000000000 +0900
+++ src/libbatch/misc/CMakeLists.txt	2022-01-09 18:14:28.814682700 +0900
@@ -21,4 +21,4 @@
 #
 
 INSTALL(FILES check_libbatch.m4
-        DESTINATION share/libbatch/misc)
+        DESTINATION share/aclocal)
--- origsrc/libbatch/src/CMakeLists.txt	2022-01-09 18:14:24.501604800 +0900
+++ src/libbatch/src/CMakeLists.txt	2022-01-09 18:14:28.819694600 +0900
@@ -77,7 +77,8 @@ ENDIF (WIN32)
 
 INSTALL(TARGETS batch 
         EXPORT LibBatchTargets 
-        DESTINATION lib${LIB_SUFFIX})
+        RUNTIME DESTINATION bin
+        ARCHIVE DESTINATION lib${LIB_SUFFIX})
 INSTALL(FILES ${HDR_FILES} DESTINATION include/libbatch)
 
 IF (LIBBATCH_PYTHON_WRAPPING AND PYTHONINTERP_FOUND AND PYTHONLIBS_FOUND AND SWIG_FOUND)
--- origsrc/libbatch/src/Local/BatchManager_Local.cxx	2022-01-09 18:14:18.000000000 +0900
+++ src/libbatch/src/Local/BatchManager_Local.cxx	2022-01-09 18:14:28.823662200 +0900
@@ -306,6 +306,7 @@ namespace Batch {
     tempOutputFile << "#!/bin/sh -f" << endl;
     tempOutputFile << "cd " << workDir << endl;
 
+#if !defined(__CYGWIN__)
     // Optional parameters (system limits on the job process)
     if (param.find(MAXCPUTIME) != param.end()) {
       long maxcputime = (long)param[MAXCPUTIME] * 60;
@@ -321,6 +322,7 @@ namespace Batch {
       long maxramsize = (long)param[MAXRAMSIZE] * 1024;
       tempOutputFile << "ulimit -H -v " << maxramsize << endl;
     }
+#endif
 
     // Number of cores to use
     int nbproc = 1;
