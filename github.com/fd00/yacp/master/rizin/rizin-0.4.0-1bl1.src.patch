--- origsrc/rizin-0.4.0/librz/analysis/d/meson.build	2022-06-24 05:47:04.000000000 +0900
+++ src/rizin-0.4.0/librz/analysis/d/meson.build	2022-09-06 08:31:13.712482900 +0900
@@ -100,7 +100,6 @@ foreach file : sdb_files
     input: infiles,
     output: outfile,
     command: sdb_gen_cmd,
-    depends: sdb_exe,
     build_by_default: true,
     install: true,
     install_dir: join_paths(rizin_sdb, 'types')
--- origsrc/rizin-0.4.0/librz/asm/cpus/meson.build	2022-06-24 05:47:04.000000000 +0900
+++ src/rizin-0.4.0/librz/asm/cpus/meson.build	2022-09-06 08:30:40.809665700 +0900
@@ -19,7 +19,6 @@ foreach file : sdb_files
     input: '@0@.sdb.txt'.format(file),
     output: outfile,
     command: sdb_gen_cmd,
-    depends: sdb_exe,
     build_by_default: true,
     install: true,
     install_dir: join_paths(rizin_sdb, 'asm/cpus')
--- origsrc/rizin-0.4.0/librz/asm/d/meson.build	2022-06-24 05:47:04.000000000 +0900
+++ src/rizin-0.4.0/librz/asm/d/meson.build	2022-09-06 08:29:33.475998500 +0900
@@ -36,7 +36,6 @@ foreach file : sdb_files
     input: '@0@.sdb.txt'.format(file),
     output: outfile,
     command: sdb_gen_cmd,
-    depends: sdb_exe,
     build_by_default: true,
     install: true,
     install_dir: join_paths(rizin_sdb, 'opcodes')
--- origsrc/rizin-0.4.0/librz/asm/platforms/meson.build	2022-06-24 05:47:04.000000000 +0900
+++ src/rizin-0.4.0/librz/asm/platforms/meson.build	2022-09-06 08:30:18.145288300 +0900
@@ -11,7 +11,6 @@ foreach file : sdb_files
     input: '@0@.sdb.txt'.format(file),
     output: outfile,
     command: sdb_gen_cmd,
-    depends: sdb_exe,
     build_by_default: true,
     install: true,
     install_dir: join_paths(rizin_sdb, 'asm/platforms')
--- origsrc/rizin-0.4.0/librz/bin/d/meson.build	2022-06-24 05:47:04.000000000 +0900
+++ src/rizin-0.4.0/librz/bin/d/meson.build	2022-09-06 08:27:03.313867500 +0900
@@ -155,7 +155,6 @@ foreach file : sdb_files
     input: 'dll/@0@.sdb.txt'.format(file),
     output: outfile,
     command: sdb_gen_cmd,
-    depends: sdb_exe,
     build_by_default: true,
     install: true,
     install_dir: join_paths(rizin_sdb, 'format/dll')
--- origsrc/rizin-0.4.0/librz/debug/meson.build	2022-06-24 05:47:04.000000000 +0900
+++ src/rizin-0.4.0/librz/debug/meson.build	2022-09-06 19:08:39.103556600 +0900
@@ -10,9 +10,9 @@ debug_plugins = [
   'winkd'
 ]
 
-if get_option('use_gpl')
-  debug_plugins += 'qnx'
-endif
+# if get_option('use_gpl')
+#   debug_plugins += 'qnx'
+# endif
 
 rz_debug_sources = [
   'ddesc.c',
@@ -66,10 +66,10 @@ rz_debug_deps = [
   rz_type_dep
 ]
 
-if get_option('use_gpl')
-  rz_debug_deps += dependency('rzqnx')
-  rz_debug_sources += 'p/debug_qnx.c'
-endif
+# if get_option('use_gpl')
+#   rz_debug_deps += dependency('rzqnx')
+#   rz_debug_sources += 'p/debug_qnx.c'
+# endif
 
 if has_debugger
   debug_plugins += ['native']
--- origsrc/rizin-0.4.0/librz/debug/p/debug_native.c	2022-06-24 05:47:04.000000000 +0900
+++ src/rizin-0.4.0/librz/debug/p/debug_native.c	2022-09-06 19:01:43.922013200 +0900
@@ -22,7 +22,7 @@ static int rz_debug_native_reg_write(RzD
 
 #if __UNIX__
 #include <errno.h>
-#if !defined(__HAIKU__) && !defined(__sun)
+#if !defined(__HAIKU__) && !defined(__sun) && !defined(__CYGWIN__)
 #include <sys/ptrace.h>
 #endif
 #include <sys/wait.h>
--- origsrc/rizin-0.4.0/librz/include/rz_socket.h	2022-06-24 05:47:04.000000000 +0900
+++ src/rizin-0.4.0/librz/include/rz_socket.h	2022-09-06 09:21:56.885674200 +0900
@@ -11,6 +11,10 @@ extern "C" {
 
 RZ_LIB_VERSION_HEADER(rz_socket);
 
+#if defined(__CYGWIN__) && !defined(__UNIX__)
+#define __UNIX__ 1
+#endif
+
 #if __UNIX__
 #include <netinet/in.h>
 #include <sys/un.h>
--- origsrc/rizin-0.4.0/librz/include/rz_util/rz_sys.h	2022-06-24 05:47:04.000000000 +0900
+++ src/rizin-0.4.0/librz/include/rz_util/rz_sys.h	2022-09-06 09:17:25.036794700 +0900
@@ -4,6 +4,10 @@
 #include <rz_types.h>
 #include <rz_list.h>
 
+#if defined(__CYGWIN__) && !defined(__UNIX__)
+#define __UNIX__ 1
+#endif
+
 #if __WINDOWS__
 #define RZ_SYS_DEVNULL "nul"
 #else
--- origsrc/rizin-0.4.0/librz/io/p/io_gprobe.c	2022-06-24 05:47:04.000000000 +0900
+++ src/rizin-0.4.0/librz/io/p/io_gprobe.c	2022-09-06 09:52:11.806395500 +0900
@@ -27,7 +27,7 @@
 #include <tchar.h>
 #else
 
-#if __linux__ || __APPLE__ || __OpenBSD__ || __FreeBSD__ || __NetBSD__ || __DragonFly__ || __HAIKU__
+#if __linux__ || __APPLE__ || __OpenBSD__ || __FreeBSD__ || __NetBSD__ || __DragonFly__ || __HAIKU__ || defined(__CYGWIN__)
 #include <sys/ioctl.h>
 #include <termios.h>
 #else
--- origsrc/rizin-0.4.0/librz/io/p/io_self.c	2022-06-24 05:47:04.000000000 +0900
+++ src/rizin-0.4.0/librz/io/p/io_self.c	2022-09-06 17:01:43.252976000 +0900
@@ -88,7 +88,7 @@ static int update_self_regions(RzIO *io,
 	}
 	macosx_debug_regions(io, task, (size_t)1, 1000);
 	return true;
-#elif __linux__
+#elif __linux__ || defined(__CYGWIN__)
 	char *pos_c;
 	int i, l, perm;
 	char path[1024], line[1024];
--- origsrc/rizin-0.4.0/librz/reg/d/meson.build	2022-06-24 05:47:04.000000000 +0900
+++ src/rizin-0.4.0/librz/reg/d/meson.build	2022-09-06 08:18:43.558388700 +0900
@@ -8,7 +8,6 @@ foreach file : sdb_files
     input: '@0@.sdb.txt'.format(file),
     output: outfile,
     command: sdb_gen_cmd,
-    depends: sdb_exe,
     build_by_default: true,
     install: true,
     install_dir: join_paths(rizin_sdb, 'reg')
--- origsrc/rizin-0.4.0/librz/syscall/d/meson.build	2022-06-24 05:47:04.000000000 +0900
+++ src/rizin-0.4.0/librz/syscall/d/meson.build	2022-09-06 08:14:56.954385800 +0900
@@ -37,7 +37,6 @@ foreach file : sdb_files
     input: pre_sdb_txt,
     output: outfile,
     command: sdb_gen_cmd,
-    depends: sdb_exe,
     build_by_default: true,
     install: true,
     install_dir: join_paths(rizin_sdb, 'syscall')
--- origsrc/rizin-0.4.0/librz/util/file.c	2022-06-24 05:47:04.000000000 +0900
+++ src/rizin-0.4.0/librz/util/file.c	2022-09-06 09:07:27.379082800 +0900
@@ -9,6 +9,9 @@
 #include <sys/stat.h>
 #include <fcntl.h>
 #include <rz_lib.h>
+#if defined(__CYGWIN__) && !defined(__UNIX__)
+#define __UNIX__ 1
+#endif
 #if __UNIX__
 #include <sys/time.h>
 #include <sys/mman.h>
--- origsrc/rizin-0.4.0/librz/util/lib.c	2022-06-24 05:47:04.000000000 +0900
+++ src/rizin-0.4.0/librz/util/lib.c	2022-09-06 09:13:15.201251900 +0900
@@ -5,6 +5,11 @@
 #include <rz_lib.h>
 #include <rz_windows.h>
 
+#if defined(__CYGWIN__) && !defined(__UNIX__)
+#define __UNIX__ 1
+#include <dlfcn.h>
+#endif
+
 RZ_LIB_VERSION(rz_lib);
 
 typedef struct rz_lib_type_name_t {
--- origsrc/rizin-0.4.0/librz/util/thread.c	2022-06-24 05:47:04.000000000 +0900
+++ src/rizin-0.4.0/librz/util/thread.c	2022-09-06 10:12:15.425940300 +0900
@@ -24,6 +24,10 @@
 #include <OS.h>
 #endif
 
+#if defined(__CYGWIN__)
+#include <sys/cpuset.h>
+#endif
+
 #if __WINDOWS__
 static DWORD WINAPI _rz_th_launcher(void *_th) {
 #else
@@ -76,7 +80,7 @@ RZ_IPI RZ_TH_TID rz_th_self(void) {
 
 RZ_API bool rz_th_setname(RzThread *th, const char *name) {
 #if defined(HAVE_PTHREAD_NP) && HAVE_PTHREAD_NP
-#if __linux__ || __sun
+#if __linux__ || __sun || defined(__CYGWIN__)
 	if (pthread_setname_np(th->tid, name) != 0) {
 		eprintf("Failed to set thread name\n");
 		return false;
@@ -107,7 +111,7 @@ RZ_API bool rz_th_setname(RzThread *th,
 
 RZ_API bool rz_th_getname(RzThread *th, char *name, size_t len) {
 #if defined(HAVE_PTHREAD_NP) && HAVE_PTHREAD_NP
-#if __linux__ || __NetBSD__ || (__APPLE__ && defined(MAC_OS_X_VERSION_10_6)) || __sun
+#if __linux__ || __NetBSD__ || (__APPLE__ && defined(MAC_OS_X_VERSION_10_6)) || __sun || defined(__CYGWIN__)
 	if (pthread_getname_np(th->tid, name, len) != 0) {
 		eprintf("Failed to get thread name\n");
 		return false;
@@ -146,8 +150,12 @@ RZ_API bool rz_th_setaffinity(RzThread *
 		return false;
 	}
 #endif
-#elif __FreeBSD__ || __DragonFly__
+#elif __FreeBSD__ || __DragonFly__ || defined(__CYGWIN__)
+#if defined(__CYGWIN__)
+	cpu_set_t c;
+#else
 	cpuset_t c;
+#endif
 	CPU_ZERO(&c);
 	CPU_SET(cpuid, &c);
 
--- origsrc/rizin-0.4.0/meson.build	2022-06-24 05:47:04.000000000 +0900
+++ src/rizin-0.4.0/meson.build	2022-09-06 09:59:41.264046800 +0900
@@ -316,20 +316,29 @@ if r.returncode() == 1 and get_option('s
   error('Subprojects are not updated. Please run `git clean -dxff subprojects/` to delete all local subprojects directories. If you want to compile against current subprojects then set option `subprojects_check=false`.')
 endif
 
-libdemangle_options = ['default_library=static']
-if get_option('use_gpl')
-  libdemangle_options += 'use_gpl=true'
-else
-  libdemangle_options += 'use_gpl=false'
-endif
-if get_option('use_swift_demangler')
-  libdemangle_options += 'use_swift_demangler=true'
-else
-  libdemangle_options += 'use_swift_demangler=false'
+sys_libdemangle_opt = get_option('use_sys_libdemangle')
+if sys_libdemangle_opt.enabled() or sys_libdemangle_opt.auto()
+  libdemangle_dep = dependency('libdemangle', required: false, static: is_static_build)
+  if not libdemangle_dep.found()
+    libdemangle_dep = cc.find_library('demangle', required: sys_libdemangle_opt, static: is_static_build)
+  endif
 endif
+if (sys_libdemangle_opt.auto() and not libdemangle_dep.found()) or sys_libdemangle_opt.disabled()
+  libdemangle_options = ['default_library=static']
+  if get_option('use_gpl')
+    libdemangle_options += 'use_gpl=true'
+  else
+    libdemangle_options += 'use_gpl=false'
+  endif
+  if get_option('use_swift_demangler')
+    libdemangle_options += 'use_swift_demangler=true'
+  else
+    libdemangle_options += 'use_swift_demangler=false'
+  endif
 
-libdemangle_proj = subproject('libdemangle', default_options: libdemangle_options)
-libdemangle_dep = libdemangle_proj.get_variable('libdemangle_dep')
+  libdemangle_proj = subproject('libdemangle', default_options: libdemangle_options)
+  libdemangle_dep = libdemangle_proj.get_variable('libdemangle_dep')
+endif
 
 # handle openssl library
 sys_openssl = dependency('openssl', required: get_option('use_sys_openssl'), static: is_static_build)
@@ -361,6 +370,7 @@ if not tree_sitter_dep.found()
   tree_sitter_dep = tree_sitter_proj.get_variable('tree_sitter_dep')
   meson.override_dependency('tree-sitter', tree_sitter_dep)
 endif
+add_global_link_arguments('-ltree-sitter', language: ['c', 'cpp'])
 
 has_debugger = get_option('debugger')
 have_ptrace = not ['windows', 'cygwin', 'sunos', 'haiku'].contains(host_machine.system())
@@ -588,8 +598,17 @@ if r.returncode() == 1 and get_option('s
   error('Subprojects are not updated. Please run `git clean -dxff subprojects/` to delete all local subprojects directories. If you want to compile against current subprojects then set option `subprojects_check=false`.')
 endif
 
-mpc_proj = subproject('mpc', default_options: ['default_library=static'])
-mpc_dep = mpc_proj.get_variable('mpc_dep')
+sys_mpc_opt = get_option('use_sys_mpc')
+if sys_mpc_opt.enabled() or sys_mpc_opt.auto()
+  mpc_dep = dependency('libmpc', required: false, static: is_static_build)
+  if not mpc_dep.found()
+    mpc_dep = cc.find_library('mpc', required: sys_mpc_opt, static: is_static_build)
+  endif
+endif
+if (sys_mpc_opt.auto() and not mpc_dep.found()) or sys_mpc_opt.disabled()
+  mpc_proj = subproject('mpc', default_options: ['default_library=static'])
+  mpc_dep = mpc_proj.get_variable('mpc_dep')
+endif
 
 # handle yxml dependency
 r = run_command(py3_exe, check_meson_subproject_py, 'yxml', check: false)
@@ -597,8 +616,17 @@ if r.returncode() == 1 and get_option('s
   error('Subprojects are not updated. Please run `git clean -dxff subprojects/` to delete all local subprojects directories. If you want to compile against current subprojects then set option `subprojects_check=false`.')
 endif
 
-yxml_proj = subproject('yxml', default_options: ['default_library=static'])
-yxml_dep = yxml_proj.get_variable('yxml_dep')
+sys_yxml_opt = get_option('use_sys_yxml')
+if sys_yxml_opt.enabled() or sys_yxml_opt.auto()
+  yxml_dep = dependency('libyxml', required: false, static: is_static_build)
+  if not yxml_dep.found()
+    yxml_dep = cc.find_library('yxml', required: sys_yxml_opt, static: is_static_build)
+  endif
+endif
+if (sys_yxml_opt.auto() and not yxml_dep.found()) or sys_yxml_opt.disabled()
+  yxml_proj = subproject('yxml', default_options: ['default_library=static'])
+  yxml_dep = yxml_proj.get_variable('yxml_dep')
+endif
 
 # handle sdb dependency
 r = run_command(py3_exe, check_meson_subproject_py, 'sdb', check: false)
@@ -606,9 +634,21 @@ if r.returncode() == 1 and get_option('s
   error('Subprojects are not updated. Please run `git clean -dxff subprojects/` to delete all local subprojects directories. If you want to compile against current subprojects then set option `subprojects_check=false`.')
 endif
 
-sdb_proj = subproject('sdb', default_options: ['default_library=static', 'sdb_includedir=' + rizin_incdir])
-sdb_dep = sdb_proj.get_variable('sdb_whole_dep')
-sdb_exe  = sdb_proj.get_variable('sdb_native_exe')
+sys_sdb_opt = get_option('use_sys_sdb')
+if sys_sdb_opt.enabled() or sys_sdb_opt.auto()
+  sdb_dep = dependency('libsdb', required: false, static: is_static_build)
+  if not sdb_dep.found()
+    sdb_dep = cc.find_library('sdb', required: sys_sdb_opt, static: is_static_build)
+  endif
+  sdb_exe = 'sdb'
+  add_global_arguments('-I/usr/include/sdb', language: ['c', 'cpp'])
+  add_global_link_arguments('-lsdb', language: ['c', 'cpp'])
+endif
+if (sys_sdb_opt.auto() and not sdb_dep.found()) or sys_sdb_opt.disabled()
+  sdb_proj = subproject('sdb', default_options: ['default_library=static', 'sdb_includedir=' + rizin_incdir])
+  sdb_dep = sdb_proj.get_variable('sdb_whole_dep')
+  sdb_exe = sdb_proj.get_variable('sdb_native_exe')
+endif
 
 sdb_gen_cmd = [
   sdb_exe,
--- origsrc/rizin-0.4.0/meson_options.txt	2022-06-24 05:47:04.000000000 +0900
+++ src/rizin-0.4.0/meson_options.txt	2022-09-05 19:35:23.579872900 +0900
@@ -33,8 +33,12 @@ option('use_sys_openssl', type: 'feature
 option('use_sys_tree_sitter', type: 'feature', value: 'disabled')
 option('use_sys_libuv', type: 'feature', value: 'auto', description: 'Whether to force, suggest or not use at all the system version of libuv. If system version is not found, one is built statically, unless use_libuv is false.')
 option('use_libuv', type: 'boolean', value: true, description: 'If true, libuv is used to handle remote features')
+option('use_sys_libdemangle', type: 'feature', value: 'disabled')
 option('use_swift_demangler', type: 'boolean', value: true, description: 'If false, disables the swift demangler')
 option('use_gpl', type: 'boolean', value: true, description: 'Set to false when you want to disable gpl code')
+option('use_sys_mpc', type: 'feature', value: 'disabled')
+option('use_sys_yxml', type: 'feature', value: 'disabled')
+option('use_sys_sdb', type: 'feature', value: 'disabled')
 option('install_sigdb', type: 'boolean', value: false, description: 'Downloads and installs rizin sigdb')
 option('debugger', type: 'boolean', value: true)
 
--- origsrc/rizin-0.4.0/subprojects/rzheap/rz_jemalloc/internal/jemalloc_internal_decls.h	2022-06-24 05:47:04.000000000 +0900
+++ src/rizin-0.4.0/subprojects/rzheap/rz_jemalloc/internal/jemalloc_internal_decls.h	2022-09-07 00:09:04.953875200 +0900
@@ -9,7 +9,7 @@
 #else
 #  include <sys/param.h>
 #  include <sys/mman.h>
-#  if !defined(__pnacl__) && !defined(__native_client__) && !defined(__HAIKU__)
+#  if !defined(__pnacl__) && !defined(__native_client__) && !defined(__HAIKU__) && !defined(__CYGWIN__)
 #    include <sys/syscall.h>
 #    if !defined(SYS_write) && defined(__NR_write)
 #      define SYS_write __NR_write
--- origsrc/rizin-0.4.0/subprojects/rzspp/spp.h	2022-06-24 05:47:04.000000000 +0900
+++ src/rizin-0.4.0/subprojects/rzspp/spp.h	2022-09-06 17:14:13.732739000 +0900
@@ -37,7 +37,7 @@
   #define __BSD__ 1
   #define __UNIX__ 1
 #endif
-#if __WIN32__ || __CYGWIN__ || MINGW32
+#if __WIN32__ || MINGW32
   #define __addr_t_defined
   #include <windows.h>
 #endif
