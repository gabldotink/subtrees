--- origsrc/xmr-stak-2.10.8/CMakeLists.txt	2019-12-03 04:22:44.000000000 +0900
+++ src/xmr-stak-2.10.8/CMakeLists.txt	2020-08-07 23:49:15.457259700 +0900
@@ -491,7 +491,7 @@ if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
     endif()
 endif()
 
-if(${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU")
+if(${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU" AND NOT CYGWIN)
     set(CMAKE_CXX_FLAGS "-Wl,-z,noexecstack ${CMAKE_CXX_FLAGS}")
     set(CMAKE_C_FLAGS "-Wl,-z,noexecstack ${CMAKE_C_FLAGS}")
 endif()
@@ -650,7 +650,7 @@ if( NOT CMAKE_INSTALL_PREFIX STREQUAL PR
         endif()
     endif()
     if(OpenCL_FOUND)
-        if(WIN32)
+        if(WIN32 OR CYGWIN)
             install(TARGETS xmrstak_opencl_backend
                 RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/${LIBRARY_OUTPUT_PATH}")
         else()
--- origsrc/xmr-stak-2.10.8/xmrstak/backend/cpu/crypto/cryptonight_common.cpp	2019-12-03 04:22:44.000000000 +0900
+++ src/xmr-stak-2.10.8/xmrstak/backend/cpu/crypto/cryptonight_common.cpp	2020-08-07 23:15:23.511772900 +0900
@@ -260,7 +260,7 @@ cryptonight_ctx* cryptonight_alloc_ctx(s
 #elif defined(__FreeBSD__)
 	ptr->long_state = (uint8_t*)mmap(NULL, hashMemSize, PROT_READ | PROT_WRITE,
 		MAP_PRIVATE | MAP_ANONYMOUS | MAP_ALIGNED_SUPER | MAP_PREFAULT_READ, -1, 0);
-#elif defined(__OpenBSD__)
+#elif defined(__OpenBSD__) || defined(__CYGWIN__)
 	ptr->long_state = (uint8_t*)mmap(NULL, hashMemSize, PROT_READ | PROT_WRITE,
 		MAP_PRIVATE | MAP_ANON, -1, 0);
 #else
--- origsrc/xmr-stak-2.10.8/xmrstak/backend/plugin.hpp	2019-12-03 04:22:44.000000000 +0900
+++ src/xmr-stak-2.10.8/xmrstak/backend/plugin.hpp	2020-08-07 23:50:44.802713400 +0900
@@ -46,8 +46,14 @@ struct plugin
 		// `.dylib` Mac OS X file extention for dynamic libraries
 		fileExtension = ".dylib";
 #endif
+#if defined(__CYGWIN__)
+		fileExtension = ".dll";
+		// search library in working directory
+		libBackend = dlopen(("./cyg" + libName + fileExtension).c_str(), RTLD_NOW | RTLD_LAZY | RTLD_GLOBAL);
+#else
 		// search library in working directory
 		libBackend = dlopen(("./lib" + libName + fileExtension).c_str(), RTLD_NOW | RTLD_LAZY | RTLD_GLOBAL);
+#endif
 		// fallback to binary directory
 		if(!libBackend)
 			libBackend = dlopen((params::inst().executablePrefix + "lib" + libName + fileExtension).c_str(), RTLD_NOW | RTLD_LAZY | RTLD_GLOBAL);
