--- origsrc/g3log-2.3/Build.cmake	2023-02-20 22:16:34.000000000 +0900
+++ src/g3log-2.3/Build.cmake	2023-04-29 18:45:06.539657700 +0900
@@ -102,7 +102,7 @@ FIND_PACKAGE(Threads REQUIRED)
 TARGET_LINK_LIBRARIES(${G3LOG_LIBRARY} Threads::Threads )
 
 # check for backtrace and cxa_demangle only in non-Windows dev environments
-IF(NOT(MSVC OR MINGW))
+IF(NOT(MSVC OR MINGW OR CYGWIN))
 	# the backtrace module does not provide a modern cmake target
 	FIND_PACKAGE(Backtrace REQUIRED)
 	if(Backtrace_FOUND)
--- origsrc/g3log-2.3/CMakeLists.txt	2023-02-20 22:16:34.000000000 +0900
+++ src/g3log-2.3/CMakeLists.txt	2023-04-29 19:06:04.560399900 +0900
@@ -171,3 +171,10 @@ if(NOT MSVC)
   add_custom_target(clean-cmake COMMAND ${CMAKE_COMMAND} -P
                                         ${g3log_SOURCE_DIR}/CleanAll.cmake)
 endif()
+
+set(prefix ${CMAKE_INSTALL_PREFIX})
+set(exec_prefix ${CMAKE_INSTALL_PREFIX})
+set(libdir ${CMAKE_INSTALL_PREFIX}/lib)
+set(includedir ${CMAKE_INSTALL_PREFIX}/include)
+configure_file(${CMAKE_SOURCE_DIR}/g3log.pc.in ${CMAKE_BINARY_DIR}/g3log.pc @ONLY)
+install(FILES ${CMAKE_BINARY_DIR}/g3log.pc DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig)
--- origsrc/g3log-2.3/g3log.pc.in	1970-01-01 09:00:00.000000000 +0900
+++ src/g3log-2.3/g3log.pc.in	2023-04-29 19:05:19.672258100 +0900
@@ -0,0 +1,10 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: g3log
+Description: Asynchronous, 'crash safe', logger that is easy to use
+Version: @VERSION@
+Libs: -L${libdir} -lg3log
+Cflags: -I${includedir}
--- origsrc/g3log-2.3/src/crashhandler_unix.cpp	2023-02-20 22:16:34.000000000 +0900
+++ src/g3log-2.3/src/crashhandler_unix.cpp	2023-04-29 18:48:06.667238300 +0900
@@ -19,7 +19,9 @@
 #include <csignal>
 #include <cstring>
 #include <unistd.h>
+#if !defined(__CYGWIN__)
 #include <execinfo.h>
+#endif
 #include <cxxabi.h>
 #include <cstdlib>
 #include <sstream>
@@ -147,8 +149,13 @@ namespace g3 {
          }
          const size_t max_dump_size = 50;
          void* dump[max_dump_size];
+#if defined(__CYGWIN__)
+         const size_t size = 0;
+         char** messages = NULL;
+#else
          const size_t size = backtrace(dump, max_dump_size);
          char** messages = backtrace_symbols(dump, static_cast<int>(size)); // overwrite sigaction with caller's address
+#endif
 
          // dump stack: skip first frame, since that is here
          std::ostringstream oss;
--- origsrc/g3log-2.3/test_unit/Test.cmake	2023-02-20 22:16:34.000000000 +0900
+++ src/g3log-2.3/test_unit/Test.cmake	2023-04-29 18:54:48.615882500 +0900
@@ -27,30 +27,33 @@
    # 4. create the unit tests for g3log --- ONLY TESTED THE UNIT TEST ON LINUX
    # =========================
    IF (ADD_G3LOG_UNIT_TEST)
-      # Download and unpack googletest at configure time
-      configure_file(CMakeLists.txt.in
-            googletest-download/CMakeLists.txt)
-      execute_process(COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}" .
-            WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/googletest-download )
-      execute_process(COMMAND ${CMAKE_COMMAND} --build .
-            WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/googletest-download )
-
-      # Prevent GoogleTest from overriding our compiler/linker options
-      # when building with Visual Studio
-      set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
-
-      # Add googletest directly to our build. This adds
-      # the following targets: gtest, gtest_main, gmock
-      # and gmock_main
-      add_subdirectory(${CMAKE_BINARY_DIR}/googletest-src
-            ${CMAKE_BINARY_DIR}/googletest-build)
-
-      # The gtest/gmock targets carry header search path
-      # dependencies automatically when using CMake 2.8.11 or
-      # later. Otherwise we have to add them here ourselves.
-      if (CMAKE_VERSION VERSION_LESS 2.8.11)
-         include_directories("${gtest_SOURCE_DIR}/include"
-                  "${gmock_SOURCE_DIR}/include")
+      option(USE_SYSTEM_GTEST "Use system gtest" ON)
+      if (NOT USE_SYSTEM_GTEST)
+         # Download and unpack googletest at configure time
+         configure_file(CMakeLists.txt.in
+               googletest-download/CMakeLists.txt)
+         execute_process(COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}" .
+               WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/googletest-download )
+         execute_process(COMMAND ${CMAKE_COMMAND} --build .
+               WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/googletest-download )
+
+         # Prevent GoogleTest from overriding our compiler/linker options
+         # when building with Visual Studio
+         set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
+
+         # Add googletest directly to our build. This adds
+         # the following targets: gtest, gtest_main, gmock
+         # and gmock_main
+         add_subdirectory(${CMAKE_BINARY_DIR}/googletest-src
+               ${CMAKE_BINARY_DIR}/googletest-build)
+
+         # The gtest/gmock targets carry header search path
+         # dependencies automatically when using CMake 2.8.11 or
+         # later. Otherwise we have to add them here ourselves.
+         if (CMAKE_VERSION VERSION_LESS 2.8.11)
+            include_directories("${gtest_SOURCE_DIR}/include"
+                     "${gmock_SOURCE_DIR}/include")
+         endif()
       endif()
 
       enable_testing()
@@ -84,6 +87,9 @@
            set_target_properties(${test} PROPERTIES COMPILE_FLAGS "-isystem -pthread ")
         ENDIF( NOT(MSVC)) 
         target_link_libraries(${test} g3log gtest_main)
+        if (USE_SYSTEM_GTEST)
+           target_link_libraries(${test} gtest)
+        endif()
 		add_test( ${test} ${test} )
       ENDFOREACH(test)
    
@@ -98,6 +104,9 @@
        set_target_properties(test_dynamic_loaded_shared_lib PROPERTIES COMPILE_DEFINITIONS "GTEST_HAS_TR1_TUPLE=0")
        set_target_properties(test_dynamic_loaded_shared_lib PROPERTIES COMPILE_DEFINITIONS "GTEST_HAS_RTTI=0")
        target_link_libraries(test_dynamic_loaded_shared_lib  ${G3LOG_LIBRARY} -ldl gtest_main)
+       if (USE_SYSTEM_GTEST)
+          target_link_libraries(test_dynamic_loaded_shared_lib gtest)
+       endif()
     ENDIF()
 ELSE() 
   message( STATUS "-DADD_G3LOG_UNIT_TEST=OFF" ) 
