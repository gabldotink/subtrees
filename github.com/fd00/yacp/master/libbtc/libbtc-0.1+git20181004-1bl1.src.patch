--- origsrc/libbtc/Makefile.am	2019-02-09 09:34:12.000000000 +0900
+++ src/libbtc/Makefile.am	2019-02-09 10:29:42.763908100 +0900
@@ -4,11 +4,6 @@ ACLOCAL_AMFLAGS = -I build-aux/m4
 
 DIST_SUBDIRS = src/secp256k1
 
-LIBSECP256K1=src/secp256k1/libsecp256k1.la
-
-$(LIBSECP256K1): $(wildcard src/secp256k1/src/*) $(wildcard src/secp256k1/include/*)
-	$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C $(@D) $(@F)
-
 lib_LTLIBRARIES = libbtc.la
 include_HEADERS = \
     include/btc/aes256_cbc.h \
@@ -18,7 +13,6 @@ include_HEADERS = \
     include/btc/btc.h \
     include/btc/buffer.h \
     include/btc/chainparams.h \
-    include/btc/cstr.h \
     include/btc/ctaes.h \
     include/btc/ecc_key.h \
     include/btc/ecc.h \
@@ -29,7 +23,6 @@ include_HEADERS = \
     include/btc/script.h \
     include/btc/segwit_addr.h \
     include/btc/serialize.h \
-    include/btc/sha2.h \
     include/btc/tool.h \
     include/btc/tx.h \
     include/btc/utils.h \
@@ -57,13 +50,13 @@ libbtc_la_SOURCES = \
     src/script.c \
     src/segwit_addr.c \
     src/serialize.c \
-    src/sha2.c \
     src/tx.c \
     src/utils.c \
     src/vector.c
 
-libbtc_la_CFLAGS = -I$(top_srcdir)/include -I$(top_srcdir)/src/logdb/include
-libbtc_la_LIBADD = $(LIBSECP256K1)
+libbtc_la_CFLAGS = -I$(top_srcdir)/include
+libbtc_la_LIBADD = $(LIBSECP256K1_LIBS)
+libbtc_la_LDFLAGS = -no-undefined
 
 if USE_TESTS
 noinst_PROGRAMS = tests
@@ -90,39 +83,23 @@ tests_SOURCES = \
 
 tests_CFLAGS = $(libbtc_la_CFLAGS)
 tests_CPPFLAGS = -I$(top_srcdir)/src
-tests_LDFLAGS = -static
+tests_LDFLAGS =
 TESTS = tests
 endif
 
 if WITH_WALLET
 
-libbtc_la_SOURCES += \
-    src/logdb/logdb_core.c \
-    src/logdb/logdb_memdb_llist.c \
-    src/logdb/logdb_memdb_rbtree.c \
-    src/logdb/logdb_rec.c \
-    src/logdb/red_black_tree.c
-
-include_HEADERS += \
-    src/logdb/include/logdb/logdb_base.h \
-    src/logdb/include/logdb/logdb_core.h \
-    src/logdb/include/logdb/logdb_memdb_llist.h \
-    src/logdb/include/logdb/logdb_memdb_rbtree.h \
-    src/logdb/include/logdb/logdb_rec.h \
-    src/logdb/include/logdb/logdb.h \
-    src/logdb/include/logdb/red_black_tree.h
-
 include_HEADERS += \
     include/btc/wallet.h
 
 libbtc_la_SOURCES += \
     src/wallet.c
 
+libbtc_la_LIBADD += $(LIBLOGDB_LIBS)
+
 if USE_TESTS
 tests_SOURCES += \
-    test/wallet_tests.c \
-    src/logdb/test/logdb_tests.c \
-    src/logdb/test/tests_red_black_tree.c
+    test/wallet_tests.c
 endif
 endif
 
@@ -165,7 +142,6 @@ bitcointool_SOURCES = \
     src/tools/bitcointool.c
 bitcointool_CFLAGS = $(libbtc_la_CFLAGS)
 bitcointool_CPPFLAGS = -I$(top_srcdir)/src
-bitcointool_LDFLAGS = -static
 
 if WITH_NET
 inst_PROGRAMS += bitcoin-send-tx
@@ -174,7 +150,6 @@ bitcoin_send_tx_SOURCES = \
     src/tools/bitcoin-send-tx.c
 bitcoin_send_tx_CFLAGS = $(libbtc_la_CFLAGS) $(EVENT_CFLAGS) $(EVENT_PTHREADS_CFLAGS)
 bitcoin_send_tx_CPPFLAGS = -I$(top_srcdir)/src
-bitcoin_send_tx_LDFLAGS = -static
 
 inst_PROGRAMS += bitcoin-spv
 bitcoin_spv_LDADD = libbtc.la
@@ -182,10 +157,6 @@ bitcoin_spv_SOURCES = \
     src/tools/bitcoin-spv.c
 bitcoin_spv_CFLAGS = $(libbtc_la_CFLAGS)
 bitcoin_spv_CPPFLAGS = -I$(top_srcdir)/src
-bitcoin_spv_LDFLAGS = -static
 endif
 
 endif
-
-clean-local:
-	-$(MAKE) -C src/secp256k1 clean
--- origsrc/libbtc/configure.ac	2019-02-09 09:34:12.000000000 +0900
+++ src/libbtc/configure.ac	2019-02-09 09:36:46.453430900 +0900
@@ -133,8 +133,8 @@ AM_CONDITIONAL([WITH_TOOLS], [test "x$wi
 AM_CONDITIONAL([WITH_WALLET], [test "x$with_wallet" = "xyes"])
 AM_CONDITIONAL([WITH_NET], [test "x$with_net" = "xyes"])
 
-ac_configure_args="${ac_configure_args} --enable-module-recovery"
-AC_CONFIG_SUBDIRS([src/secp256k1])
+PKG_CHECK_MODULES([LIBSECP256K1], [libsecp256k1])
+PKG_CHECK_MODULES([LIBLOGDB], [liblogdb])
 
 dnl make sure nothing new is exported so that we don't break the cache
 PKGCONFIG_PATH_TEMP="$PKG_CONFIG_PATH"
--- origsrc/libbtc/include/btc/block.h	2019-02-09 09:34:12.000000000 +0900
+++ src/libbtc/include/btc/block.h	2019-02-09 10:06:44.468704500 +0900
@@ -28,9 +28,10 @@
 #ifndef __LIBBTC_BLOCK_H__
 #define __LIBBTC_BLOCK_H__
 
+#include <logdb/cstr.h>
+
 #include "btc.h"
 #include "buffer.h"
-#include "cstr.h"
 #include "hash.h"
 
 LIBBTC_BEGIN_DECL
--- origsrc/libbtc/include/btc/hash.h	2019-02-09 09:34:12.000000000 +0900
+++ src/libbtc/include/btc/hash.h	2019-02-09 10:07:38.175240200 +0900
@@ -27,10 +27,11 @@
 #ifndef __LIBBTC_HASH_H__
 #define __LIBBTC_HASH_H__
 
+#include <logdb/cstr.h>
+#include <logdb/sha2.h>
+
 #include "btc.h"
-#include "cstr.h"
 #include "memory.h"
-#include "sha2.h"
 #include "vector.h"
 
 LIBBTC_BEGIN_DECL
--- origsrc/libbtc/include/btc/net.h	2019-02-09 09:34:12.000000000 +0900
+++ src/libbtc/include/btc/net.h	2019-02-09 10:13:03.866844100 +0900
@@ -27,10 +27,11 @@
 #ifndef __LIBBTC_NET_H__
 #define __LIBBTC_NET_H__
 
+#include <logdb/cstr.h>
+
 #include "btc.h"
 #include "buffer.h"
 #include "chainparams.h"
-#include "cstr.h"
 #include "protocol.h"
 #include "vector.h"
 
--- origsrc/libbtc/include/btc/protocol.h	2019-02-09 09:34:12.000000000 +0900
+++ src/libbtc/include/btc/protocol.h	2019-02-09 10:14:37.644307100 +0900
@@ -27,9 +27,10 @@
 #ifndef __LIBBTC_PROTOCOL_H__
 #define __LIBBTC_PROTOCOL_H__
 
+#include <logdb/cstr.h>
+
 #include "btc.h"
 #include "buffer.h"
-#include "cstr.h"
 #include "vector.h"
 
 LIBBTC_BEGIN_DECL
--- origsrc/libbtc/include/btc/script.h	2019-02-09 09:34:12.000000000 +0900
+++ src/libbtc/include/btc/script.h	2019-02-09 10:09:21.146491300 +0900
@@ -27,8 +27,9 @@
 #ifndef __LIBBTC_SCRIPT_H__
 #define __LIBBTC_SCRIPT_H__
 
+#include <logdb/cstr.h>
+
 #include "btc.h"
-#include "cstr.h"
 #include "ecc_key.h"
 #include "vector.h"
 
--- origsrc/libbtc/include/btc/serialize.h	2019-02-09 09:34:12.000000000 +0900
+++ src/libbtc/include/btc/serialize.h	2019-02-09 10:08:26.466540400 +0900
@@ -28,9 +28,10 @@
 #ifndef __LIBBTC_SERIALIZE_H__
 #define __LIBBTC_SERIALIZE_H__
 
+#include <logdb/cstr.h>
+
 #include "btc.h"
 #include "buffer.h"
-#include "cstr.h"
 #include "portable_endian.h"
 
 LIBBTC_BEGIN_DECL
--- origsrc/libbtc/include/btc/tx.h	2019-02-09 09:34:12.000000000 +0900
+++ src/libbtc/include/btc/tx.h	2019-02-09 10:08:59.000676900 +0900
@@ -27,9 +27,10 @@
 #ifndef __LIBBTC_TX_H__
 #define __LIBBTC_TX_H__
 
+#include <logdb/cstr.h>
+
 #include "btc.h"
 #include "chainparams.h"
-#include "cstr.h"
 #include "hash.h"
 #include "script.h"
 #include "vector.h"
--- origsrc/libbtc/include/btc/utils.h	2019-02-09 09:34:12.000000000 +0900
+++ src/libbtc/include/btc/utils.h	2019-02-09 10:08:01.973539200 +0900
@@ -28,8 +28,9 @@
 #ifndef __LIBBTC_UTILS_H__
 #define __LIBBTC_UTILS_H__
 
+#include <logdb/cstr.h>
+
 #include "btc.h"
-#include "cstr.h"
 #include "memory.h"
 
 #define TO_UINT8_HEX_BUF_LEN 2048
--- origsrc/libbtc/libbtc.pc.in	2019-02-09 09:34:12.000000000 +0900
+++ src/libbtc/libbtc.pc.in	2019-02-09 10:22:38.706175600 +0900
@@ -5,7 +5,7 @@ includedir=@includedir@
 
 Name: libbtc
 Description: C library for manipulating bitcoin data structures
-URL: https://github.com/jonasschnelli/libbtc
+URL: https://github.com/libbtc/libbtc
 Version: @PACKAGE_VERSION@
 Cflags: -I${includedir}
 Libs: -L${libdir} -lbtc
--- origsrc/libbtc/src/bip32.c	2019-02-09 09:34:12.000000000 +0900
+++ src/libbtc/src/bip32.c	2019-02-09 10:04:15.235671200 +0900
@@ -22,6 +22,7 @@
  * OTHER DEALINGS IN THE SOFTWARE.
  */
 
+#include <logdb/sha2.h>
 
 #include <btc/bip32.h>
 
@@ -36,7 +37,6 @@
 #include <btc/ecc_key.h>
 #include <btc/hash.h>
 #include <btc/ripemd160.h>
-#include <btc/sha2.h>
 #include <btc/utils.h>
 
 #include "memory.h"
--- origsrc/libbtc/src/block.c	2019-02-09 09:34:12.000000000 +0900
+++ src/libbtc/src/block.c	2019-02-09 10:06:13.356558600 +0900
@@ -25,15 +25,14 @@
 
 */
 
+#include <logdb/sha2.h>
+
 #include <stddef.h>
 #include <stdint.h>
 #include <string.h>
 
-
 #include <btc/block.h>
-
 #include <btc/serialize.h>
-#include <btc/sha2.h>
 #include <btc/utils.h>
 
 btc_block_header* btc_block_header_new()
--- origsrc/libbtc/src/cstr.c	2019-02-09 09:34:12.000000000 +0900
+++ src/libbtc/src/cstr.c	2019-02-09 10:30:42.102837700 +0900
@@ -3,7 +3,7 @@
  * file COPYING or http://www.opensource.org/licenses/mit-license.php.
  */
 
-#include <btc/cstr.h>
+#include <logdb/cstr.h>
 #include <btc/memory.h>
 
 static int cstr_alloc_min_sz(cstring* s, size_t sz)
@@ -52,160 +52,4 @@ int cstr_alloc_minsize(cstring* s, size_
     s->str[s->len] = 0;
 
     return 1;
-}
-
-cstring* cstr_new_sz(size_t sz)
-{
-    cstring* s = btc_calloc(1, sizeof(cstring));
-    if (!s)
-        return NULL;
-
-    if (!cstr_alloc_min_sz(s, sz)) {
-        btc_free(s);
-        return NULL;
-    }
-
-    return s;
-}
-
-cstring* cstr_new_buf(const void* buf, size_t sz)
-{
-    cstring* s = cstr_new_sz(sz);
-    if (!s)
-        return NULL;
-
-    memcpy(s->str, buf, sz);
-    s->len = sz;
-    s->str[s->len] = 0;
-
-    return s;
-}
-
-cstring* cstr_new_cstr(const cstring* copy_str)
-{
-    return cstr_new_buf(copy_str->str, copy_str->len);
-}
-
-cstring* cstr_new(const char* init_str)
-{
-    size_t slen;
-
-    if (!init_str || !*init_str)
-        return cstr_new_sz(0);
-
-    slen = strlen(init_str);
-    return cstr_new_buf(init_str, slen);
-}
-
-void cstr_free(cstring* s, int free_buf)
-{
-    if (!s)
-        return;
-
-    if (free_buf)
-        btc_free(s->str);
-
-    memset(s, 0, sizeof(*s));
-    btc_free(s);
-}
-
-int cstr_resize(cstring* s, size_t new_sz)
-{
-    /* no change */
-    if (new_sz == s->len)
-        return 1;
-
-    /* truncate string */
-    if (new_sz <= s->len) {
-        s->len = new_sz;
-        s->str[s->len] = 0;
-        return 1;
-    }
-
-    /* increase string size */
-    if (!cstr_alloc_min_sz(s, new_sz))
-        return 0;
-
-    /* contents of string tail undefined */
-
-    s->len = new_sz;
-    s->str[s->len] = 0;
-
-    return 1;
-}
-
-int cstr_append_buf(cstring* s, const void* buf, size_t sz)
-{
-    if (!cstr_alloc_min_sz(s, s->len + sz))
-        return 0;
-
-    memcpy(s->str + s->len, buf, sz);
-    s->len += sz;
-    s->str[s->len] = 0;
-
-    return 1;
-}
-
-int cstr_append_cstr(cstring* s, cstring* append)
-{
-    return cstr_append_buf(s, append->str, append->len);
-}
-
-
-int cstr_append_c(cstring* s, char ch)
-{
-    return cstr_append_buf(s, &ch, 1);
-}
-
-
-int cstr_equal(const cstring* a, const cstring* b)
-{
-    if (a == b)
-        return 1;
-    if (!a || !b)
-        return 0;
-    if (a->len != b->len)
-        return 0;
-    return (memcmp(a->str, b->str, a->len) == 0);
-}
-
-int cstr_compare(const cstring* a, const cstring* b)
-{
-    unsigned int i;
-    if (a->len > b->len)
-        return (1);
-    if (a->len < b->len)
-        return (-1);
-
-    /* length equal, byte per byte compare */
-    for (i = 0; i < a->len; i++) {
-        char a1 = a->str[i];
-        char b1 = b->str[i];
-
-        if (a1 > b1)
-            return (1);
-        if (a1 < b1)
-            return (-1);
-    }
-    return (0);
-}
-
-int cstr_erase(cstring* s, size_t pos, ssize_t len)
-{
-    ssize_t old_tail;
-
-    if (pos == s->len && len == 0)
-        return 1;
-    if (pos >= s->len)
-        return 0;
-
-    old_tail = s->len - pos;
-    if ((len >= 0) && (len > old_tail))
-        return 0;
-
-    memmove(&s->str[pos], &s->str[pos + len], old_tail - len);
-    s->len -= len;
-    s->str[s->len] = 0;
-
-    return 1;
 }
--- origsrc/libbtc/src/net.c	2019-02-09 09:34:12.000000000 +0900
+++ src/libbtc/src/net.c	2019-02-09 10:13:42.383576300 +0900
@@ -4,9 +4,10 @@
 #include <event2/bufferevent.h>
 #include <event2/event.h>
 
+#include <logdb/cstr.h>
+
 #include <btc/buffer.h>
 #include <btc/chainparams.h>
-#include <btc/cstr.h>
 #include <btc/hash.h>
 #include <btc/protocol.h>
 #include <btc/serialize.h>
--- origsrc/libbtc/src/serialize.c	2019-02-09 09:34:12.000000000 +0900
+++ src/libbtc/src/serialize.c	2019-02-09 10:10:08.696195200 +0900
@@ -3,7 +3,7 @@
  * file COPYING or http://www.opensource.org/licenses/mit-license.php.
  */
 
-#include <btc/cstr.h>
+#include <logdb/cstr.h>
 #include <btc/serialize.h>
 
 #include <string.h>
--- origsrc/libbtc/src/tx.c	2019-02-09 09:34:12.000000000 +0900
+++ src/libbtc/src/tx.c	2019-02-09 10:05:29.650439500 +0900
@@ -24,6 +24,8 @@
 
 */
 
+#include <logdb/sha2.h>
+
 #include <assert.h>
 #include <inttypes.h>
 #include <stddef.h>
@@ -34,7 +36,6 @@
 #include <btc/ecc.h>
 #include <btc/segwit_addr.h>
 #include <btc/serialize.h>
-#include <btc/sha2.h>
 #include <btc/tx.h>
 #include <btc/utils.h>
 
--- origsrc/libbtc/test/block_tests.c	2019-02-09 09:34:12.000000000 +0900
+++ src/libbtc/test/block_tests.c	2019-02-09 10:15:43.575132800 +0900
@@ -9,9 +9,10 @@
 #include <string.h>
 #include <assert.h>
 
+#include <logdb/cstr.h>
+
 #include <btc/block.h>
 
-#include <btc/cstr.h>
 #include <btc/ecc_key.h>
 #include <btc/utils.h>
 
--- origsrc/libbtc/test/hash_tests.c	2019-02-09 09:34:12.000000000 +0900
+++ src/libbtc/test/hash_tests.c	2019-02-09 10:16:09.893621900 +0900
@@ -9,9 +9,10 @@
 #include <string.h>
 #include <assert.h>
 
+#include <logdb/sha2.h>
+
 #include <btc/hash.h>
 
-#include <btc/sha2.h>
 #include <btc/utils.h>
 
 void test_bitcoin_hash()
--- origsrc/libbtc/test/serialize_tests.c	2019-02-09 09:34:12.000000000 +0900
+++ src/libbtc/test/serialize_tests.c	2019-02-09 10:16:29.141621800 +0900
@@ -9,7 +9,8 @@
 #include <string.h>
 #include <assert.h>
 
-#include <btc/cstr.h>
+#include <logdb/cstr.h>
+
 #include <btc/serialize.h>
 #include <btc/utils.h>
 
--- origsrc/libbtc/test/tx_tests.c	2019-02-09 09:34:12.000000000 +0900
+++ src/libbtc/test/tx_tests.c	2019-02-09 10:17:22.815235800 +0900
@@ -9,9 +9,10 @@
 #include <string.h>
 #include <assert.h>
 
+#include <logdb/cstr.h>
+
 #include <btc/tx.h>
 
-#include <btc/cstr.h>
 #include <btc/ecc_key.h>
 #include <btc/script.h>
 #include "utest.h"
