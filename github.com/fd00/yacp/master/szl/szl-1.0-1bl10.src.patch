--- origsrc/szl-1.0/configure.ac	2010-08-16 07:04:18.000000000 +0900
+++ src/szl-1.0/configure.ac	2022-11-03 10:04:50.672284900 +0900
@@ -39,6 +39,8 @@ AS_IF([test "x${ac_cv_env_CXXFLAGS_set}"
   AC_MSG_RESULT([use user-supplied: $CXXFLAGS])
 ])
 
+AS_IF([test "$host_os" = "cygwin"], [CXXFLAGS="${CXXFLAGS} -Wno-narrowing"])
+
 AC_SUBST(SZL_OPT_FLAG)
 
 AC_PROG_LN_S
--- origsrc/szl-1.0/src/Makefile.am	2010-08-16 07:04:17.000000000 +0900
+++ src/szl-1.0/src/Makefile.am	2022-11-03 10:04:50.679160800 +0900
@@ -250,12 +250,13 @@ libengine_la_SOURCES = \
 
 ##### Libraries to install
 
-libszl_la_LIBADD = \
+libszl_la_LIBADD = -lstdc++ \
   libengine.la \
   libfmt.la \
   libutilities.la \
   libvalues.la
 libszl_la_SOURCES =
+libszl_la_LDFLAGS = -no-undefined
 
 libszlintrinsics_la_SOURCES = \
   intrinsics/additionalinputintrinsic.cc \
@@ -265,6 +266,12 @@ libszlintrinsics_la_SOURCES = \
   intrinsics/miscintrinsic.cc \
   intrinsics/sortintrinsic.cc \
   intrinsics/ziplib.cc
+libszlintrinsics_la_LDFLAGS = -no-undefined
+libszlintrinsics_la_LIBADD = \
+  libengine.la \
+  libfmt.la \
+  libutilities.la \
+  libvalues.la
 
 libszlemitters_la_SOURCES = \
   emitters/szlbootstrapsum.cc \
@@ -307,8 +314,12 @@ libszlemitters_la_SOURCES = \
   emitters/weighted-reservoir-sampler-impl.cc \
   emitters/weighted-reservoir-sampler-impl.h \
   emitters/weighted-reservoir-sampler.h
-
-
+libszlemitters_la_LDFLAGS = -no-undefined
+libszlemitters_la_LIBADD = \
+  libengine.la \
+  libfmt.la \
+  libutilities.la \
+  libvalues.la
 
 ##### The szl program
 
--- origsrc/szl-1.0/src/emitters/szlunique.cc	2010-08-16 07:04:17.000000000 +0900
+++ src/szl-1.0/src/emitters/szlunique.cc	2022-11-03 10:31:38.481200400 +0900
@@ -189,6 +189,7 @@ int SzlUnique::SzlUniqueEntry::AddHash(H
     exists_.insert(hash);
     return 0;
   }
+  return 0;
 }
 
 // Move an element up the heap to its proper position.
--- origsrc/szl-1.0/src/emitters/tests/szlquantile_unittest.cc	2010-08-16 07:04:16.000000000 +0900
+++ src/szl-1.0/src/emitters/tests/szlquantile_unittest.cc	2022-11-03 10:04:50.685126400 +0900
@@ -233,7 +233,7 @@ bool SzlQuantileTest::CheckCorrectness(i
   // within the tolerable range. The ideal index
   // we are expecting is calculated as next_rank.
   for (int i = 1; i < size - 1; ++i) {
-    int64 next_rank = num_inserts * i / (size - 1);
+    int next_rank = num_inserts * i / (size - 1);
     dec.Init(rvec[i].data(), rvec[i].size());
     dec.GetString(&vstr);
     CHECK_EQ(sscanf(vstr.c_str(), "xx-%d", &index), 1);
--- origsrc/szl-1.0/src/engine/code.cc	2010-08-16 07:04:14.000000000 +0900
+++ src/szl-1.0/src/engine/code.cc	2022-11-03 10:04:50.689131300 +0900
@@ -18,6 +18,7 @@
 #include <string>
 #include <errno.h>
 #include <sys/mman.h>
+#include <unistd.h>
 
 #include "engine/globals.h"
 #include "public/logging.h"
--- origsrc/szl-1.0/src/engine/form.cc	2010-08-16 07:04:13.000000000 +0900
+++ src/szl-1.0/src/engine/form.cc	2022-11-03 10:04:50.698171500 +0900
@@ -801,8 +801,7 @@ bool ArrayForm::IsEqual(Val* v1, Val* v2
 
 Val* ArrayForm::Cmp(Val* v1, Val* v2) const {
   assert(v1->is_array());
-  if (!v2->is_array())
-    return false;
+  assert(v2->is_array());
   ArrayVal* a1 = v1->as_array();
   ArrayVal* a2 = v2->as_array();
   assert(a1->type()->IsEqual(a2->type(), false));  // ignore proto info
@@ -1075,8 +1074,7 @@ bool TupleForm::IsEqual(Val* v1, Val* v2
 
 Val* TupleForm::Cmp(Val* v1, Val* v2) const {
   assert(v1->is_tuple());
-  if (!v2->is_tuple())
-    return false;
+  assert(v2->is_tuple());
   TupleVal* t1 = v1->as_tuple();
   TupleVal* t2 = v2->as_tuple();
   assert(t1->type()->IsEqual(t2->type(), false));  // ignore proto info
--- origsrc/szl-1.0/src/engine/protocolbuffers.cc	2010-08-16 07:04:13.000000000 +0900
+++ src/szl-1.0/src/engine/protocolbuffers.cc	2022-11-03 10:04:50.702166200 +0900
@@ -20,7 +20,9 @@
 #include "google/protobuf/io/coded_stream.h"
 #include "google/protobuf/io/zero_copy_stream_impl.h"
 #include "google/protobuf/wire_format_lite.h"
+#if !defined(__CYGWIN__)
 #include "google/protobuf/wire_format_lite_inl.h"
+#endif
 
 #include "engine/globals.h"
 #include "public/commandlineflags.h"
--- origsrc/szl-1.0/src/engine/scanner.h	2010-08-16 07:04:13.000000000 +0900
+++ src/szl-1.0/src/engine/scanner.h	2022-11-03 10:04:50.737556200 +0900
@@ -14,6 +14,7 @@
 // ------------------------------------------------------------------------
 
 #include <string>
+#include <cstdio>
 
 namespace sawzall {
 
--- origsrc/szl-1.0/src/engine/symboltable.cc	2010-08-16 07:04:14.000000000 +0900
+++ src/szl-1.0/src/engine/symboltable.cc	2022-11-03 10:04:50.809222000 +0900
@@ -44,7 +44,7 @@ namespace sawzall {
 // ------------------------------------------------------------------------------
 // Implementation of SymbolTable
 
-Proc::Proc* SymbolTable::init_proc_ = NULL;
+Proc* SymbolTable::init_proc_ = NULL;
 
 List<TableType*>* SymbolTable::table_types_ = NULL;
 TableType* SymbolTable::collection_type_ = NULL;
--- origsrc/szl-1.0/src/protoc_plugin/linked_ptr.h	2010-08-16 07:03:37.000000000 +0900
+++ src/szl-1.0/src/protoc_plugin/linked_ptr.h	2022-11-03 10:04:50.897154600 +0900
@@ -48,6 +48,9 @@
 #ifndef _LINKED_PTR_H__
 #define _LINKED_PTR_H__
 
+#if defined(__CYGWIN__)
+#include <google/protobuf/stubs/logging.h>
+#endif
 
 // This is used internally by all instances of linked_ptr<>.  It needs to be
 // a non-template class because different types of linked_ptr<> can refer to
--- origsrc/szl-1.0/src/protoc_plugin/szl_generator.h	2010-08-16 07:29:52.000000000 +0900
+++ src/szl-1.0/src/protoc_plugin/szl_generator.h	2022-11-03 10:04:50.908221100 +0900
@@ -20,8 +20,14 @@
 #include <set>
 #include <string>
 
+#if defined(__CYGWIN__)
+#include <google/protobuf/stubs/mutex.h>
+#endif
+
 #include "google/protobuf/compiler/code_generator.h"
 
+using namespace std;
+
 namespace google {
 namespace protobuf {
 
--- origsrc/szl-1.0/src/protoc_plugin/topologicalsorter-inl.h	2010-08-16 07:03:37.000000000 +0900
+++ src/szl-1.0/src/protoc_plugin/topologicalsorter-inl.h	2022-11-03 10:04:50.917167600 +0900
@@ -24,6 +24,10 @@
 #include <queue>
 #include <vector>
 
+#if defined(__CYGWIN__)
+#include <google/protobuf/stubs/logging.h>
+#endif
+
 #include "protoc_plugin/topologicalsorter.h"
 
 
--- origsrc/szl-1.0/src/public/porting.h	2010-08-16 07:04:17.000000000 +0900
+++ src/szl-1.0/src/public/porting.h	2022-11-03 10:04:50.924131700 +0900
@@ -48,7 +48,9 @@ typedef uint64_t uint64;
 
 typedef signed char schar;
 
+#if !defined(__CYGWIN__)
 typedef unsigned long uintptr_t;
+#endif
 typedef long sword_t;
 typedef unsigned long uword_t;
 
--- origsrc/szl-1.0/src/utilities/port_ieee.h	2010-08-16 07:04:16.000000000 +0900
+++ src/szl-1.0/src/utilities/port_ieee.h	2022-11-03 10:04:50.929221800 +0900
@@ -14,7 +14,7 @@
 // ------------------------------------------------------------------------
 
 #include <config.h>
-#if defined(OS_CYGWIN)
+#if defined(__CYGWIN__)
 #include <ieeefp.h>
 #elif defined(OS_MACOSX)
 #include <machine/endian.h>
--- origsrc/szl-1.0/src/utilities/random_base.cc	2010-08-16 07:04:15.000000000 +0900
+++ src/szl-1.0/src/utilities/random_base.cc	2022-11-03 10:04:50.960232100 +0900
@@ -18,6 +18,7 @@
 #include <string>
 #include <memory.h>
 #include <assert.h>
+#include <unistd.h>
 
 #include "public/porting.h"
 #include "public/logging.h"
@@ -194,7 +195,7 @@ uint64 RandomBase::UnbiasedUniform64(uin
 }
 
 float RandomBase::RandFloat() {
-#ifdef OS_CYGWIN
+#ifdef __CYGWIN__
   __ieee_float_shape_type v;
   v.number.sign = 0;
   v.number.fraction0 = Rand8();   // Lower 7 bits
@@ -215,7 +216,7 @@ float RandomBase::RandFloat() {
 }
 
 double RandomBase::RandDouble() {
-#ifdef OS_CYGWIN
+#ifdef __CYGWIN__
   __ieee_double_shape_type v;
   v.number.sign = 0;
   v.number.fraction0 = Rand32();  // Lower 20 bits
