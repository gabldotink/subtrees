--- origsrc/libdasm-1.6/Makefile.am	1970-01-01 09:00:00.000000000 +0900
+++ src/libdasm-1.6/Makefile.am	2018-08-25 08:53:13.933038900 +0900
@@ -0,0 +1,19 @@
+
+include_HEADERS = libdasm.h
+
+bin_PROGRAMS = das
+das_LDADD = libdasm.la
+das_SOURCES = examples/das.c
+
+lib_LTLIBRARIES = libdasm.la
+libdasm_la_LDFLAGS = -no-undefined
+libdasm_la_SOURCES = libdasm.c
+
+check_PROGRAMS = simple
+simple_LDADD = libdasm.la
+simple_SOURCES = examples/simple.c
+
+TESTS = simple
+
+pkgconfigdir = $(libdir)/pkgconfig
+pkgconfig_DATA = $(PACKAGE).pc
--- origsrc/libdasm-1.6/configure.ac	1970-01-01 09:00:00.000000000 +0900
+++ src/libdasm-1.6/configure.ac	2018-08-25 08:59:38.580879400 +0900
@@ -0,0 +1,33 @@
+#                                               -*- Autoconf -*-
+# Process this file with autoconf to produce a configure script.
+
+AC_PREREQ([2.69])
+AC_INIT([libdasm], [1.6])
+AC_CONFIG_SRCDIR([libdasm.c])
+AC_CONFIG_HEADERS([config.h])
+AM_INIT_AUTOMAKE
+
+# Checks for programs.
+AC_PROG_CC
+AC_PROG_INSTALL
+AC_PROG_MAKE_SET
+LT_INIT
+
+# Checks for libraries.
+
+# Checks for header files.
+AC_CHECK_HEADERS([stdlib.h string.h])
+
+# Checks for typedefs, structures, and compiler characteristics.
+AC_TYPE_INT16_T
+AC_TYPE_INT32_T
+AC_TYPE_INT64_T
+AC_TYPE_INT8_T
+AC_TYPE_SSIZE_T
+
+# Checks for library functions.
+AC_FUNC_MALLOC
+AC_CHECK_FUNCS([memset strncasecmp])
+
+AC_CONFIG_FILES([libdasm.pc Makefile])
+AC_OUTPUT
--- origsrc/libdasm-1.6/libdasm.pc.in	1970-01-01 09:00:00.000000000 +0900
+++ src/libdasm-1.6/libdasm.pc.in	2018-08-25 08:53:13.948625100 +0900
@@ -0,0 +1,10 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: libdasm
+Description: Disassembly library
+Version: @VERSION@
+Libs: -L${libdir} -ldasm
+Cflags: -I${includedir}
--- origsrc/libdasm-1.6/pydasm/setup.py	2018-03-30 11:44:45.000000000 +0900
+++ src/libdasm-1.6/pydasm/setup.py	2018-08-25 08:53:13.948625100 +0900
@@ -32,10 +32,10 @@ from distutils.sysconfig import get_pyth
 incdir = os.path.join(get_python_inc(plat_specific=1))
 
 module = Extension('pydasm',
-	include_dirs = [incdir],
-	libraries = [],
-	library_dirs = [],
-	sources = ['../libdasm.c', 'pydasm.c'])
+	include_dirs = [incdir, '..'],
+	libraries = ['dasm'],
+	library_dirs = ['../.libs'],
+	sources = ['pydasm.c'])
 
 setup(name = 'pydasm',
     version = '1.5',
--- origsrc/libdasm-1.6/rbdasm/dasm.c	2018-03-30 11:44:45.000000000 +0900
+++ src/libdasm-1.6/rbdasm/dasm.c	2018-08-25 08:53:13.964250700 +0900
@@ -635,14 +635,14 @@ static VALUE dasm_disassemble(VALUE self
 	int          use_block = rb_block_given_p();
 
 	buf = StringValue(buf);
-	len = RSTRING(buf)->len;
+	len = RSTRING_LEN(buf);
 	
 	rb_dasm_cast(self, obj);
 
 	while (offset < len)
 	{
 		VALUE	rb_inst;
-		BYTE  *current = (BYTE *)(RSTRING(buf)->ptr + offset);
+		BYTE  *current = (BYTE *)(RSTRING_PTR(buf) + offset);
 
 		if (!get_instruction(&inst, current, obj->mode))
 			break;
@@ -676,7 +676,7 @@ static VALUE dasm_disassemble_one(VALUE
 	BYTE         *current;
 
 	buf     = StringValue(buf);
-	current = (BYTE *)RSTRING(buf)->ptr;
+	current = (BYTE *)RSTRING_PTR(buf);
 
 	rb_dasm_cast(self, obj);
 	
@@ -740,9 +740,9 @@ static VALUE dasm_set_format(VALUE self,
 
 	rb_dasm_cast(self, obj);
 
-	if (!strncasecmp(RSTRING(format)->ptr, "intel", 5))
+	if (!strncasecmp(RSTRING_PTR(format), "intel", 5))
 		obj->format = FORMAT_INTEL;
-	else if (!strncasecmp(RSTRING(format)->ptr, "att", 3))
+	else if (!strncasecmp(RSTRING_PTR(format), "att", 3))
 		obj->format = FORMAT_ATT;
 	else
 		rb_raise(rb_eArgError, "Invalid output format (must be intel or att)");
--- origsrc/libdasm-1.6/rbdasm/extconf.rb	2018-03-30 11:44:45.000000000 +0900
+++ src/libdasm-1.6/rbdasm/extconf.rb	2018-08-25 08:53:13.979874900 +0900
@@ -23,4 +23,6 @@
 # SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 require 'mkmf'
+dir_config('dasm')
+have_library('dasm')
 create_makefile('dasm')
