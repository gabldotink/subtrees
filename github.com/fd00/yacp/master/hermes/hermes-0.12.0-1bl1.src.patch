--- origsrc/hermes-0.12.0/API/hermes/CMakeLists.txt	2022-08-17 03:18:07.000000000 +0900
+++ src/hermes-0.12.0/API/hermes/CMakeLists.txt	2022-09-14 11:19:00.300409300 +0900
@@ -105,6 +105,8 @@ if(APPLE AND HERMES_BUILD_APPLE_FRAMEWOR
       COMMAND /usr/libexec/PlistBuddy -c "Add :LSMinimumSystemVersion string ${CMAKE_OSX_DEPLOYMENT_TARGET}" $<TARGET_FILE_DIR:libhermes>/Resources/Info.plist
     )
   endif()
+elseif(DEFINED SOVERSION)
+  set_target_properties(libhermes PROPERTIES SOVERSION "${SOVERSION}")
 endif()
 
 install(TARGETS libhermes
--- origsrc/hermes-0.12.0/lib/Support/OSCompatPosix.cpp	2022-08-17 03:18:07.000000000 +0900
+++ src/hermes-0.12.0/lib/Support/OSCompatPosix.cpp	2022-09-14 00:26:27.763336100 +0900
@@ -269,7 +269,7 @@ void vm_unused(void *p, size_t sz) {
 /// the process's physical footprint.
 #define MADV_UNUSED MADV_FREE
 
-#elif defined(__linux__)
+#elif defined(__linux__) || defined(__CYGWIN__)
 
 /// On linux, telling the OS that we \p MADV_DONTNEED some pages will cause it
 /// to immediately deduct their size from the process's resident set.
@@ -434,9 +434,11 @@ int pages_in_ram(const void *p, size_t s
   using MapElm = char;
 #endif
   std::vector<MapElm> bitMap(mapSize);
+#if defined(__GLIBC__)
   if (mincore(const_cast<void *>(p), sz, bitMap.data())) {
     return -1;
   }
+#endif
   // Total pages in RAM.
   int totalIn = 0;
   bool currentRunStatus = true;
@@ -599,6 +601,12 @@ uint64_t thread_id() {
   return syscall(__NR_gettid);
 }
 
+#elif defined(__CYGWIN__)
+
+uint64_t thread_id() {
+  return getpid();
+}
+
 #else
 #error "Thread ID not supported on this platform"
 #endif
@@ -640,7 +648,7 @@ std::chrono::microseconds thread_cpu_tim
   return microseconds(total);
 }
 
-#elif defined(__linux__) // !(__APPLE__ && __MACH__)
+#elif defined(__linux__) || defined(__CYGWIN__) // !(__APPLE__ && __MACH__)
 
 std::chrono::microseconds thread_cpu_time() {
   using namespace std::chrono;
@@ -677,7 +685,11 @@ bool thread_page_fault_count(int64_t *ou
   return kr == KERN_SUCCESS;
 }
 
-#elif defined(__linux__) // !(__APPLE__ && __MACH__)
+#elif defined(__linux__) || defined(__CYGWIN__) // !(__APPLE__ && __MACH__)
+
+#if !defined(RUSAGE_THREAD) && defined(RUSAGE_SELF)
+#define RUSAGE_THREAD RUSAGE_SELF
+#endif
 
 bool thread_page_fault_count(int64_t *outMinorFaults, int64_t *outMajorFaults) {
   struct rusage stats = {};
--- origsrc/hermes-0.12.0/lib/VM/Instrumentation/ProcessStats.cpp	2022-08-17 03:18:07.000000000 +0900
+++ src/hermes-0.12.0/lib/VM/Instrumentation/ProcessStats.cpp	2022-09-13 21:28:11.645918600 +0900
@@ -17,7 +17,7 @@
 #include <psapi.h>
 #elif defined(__MACH__)
 #include <mach/mach.h>
-#elif defined(__linux__)
+#elif defined(__linux__) || defined(__CYGWIN__)
 #include <unistd.h>
 #include <fstream>
 #endif // __MACH__, __linux__
@@ -59,7 +59,7 @@ ProcessStats::Info getProcessStatSnapsho
 
   rss = info.resident_size / 1024;
   va = info.virtual_size / 1024;
-#elif defined(__linux__)
+#elif defined(__linux__) || defined(__CYGWIN__)
   std::ifstream statm("/proc/self/statm");
   statm >> va >> rss;
 
--- origsrc/hermes-0.12.0/lib/VM/Runtime.cpp	2022-08-17 03:18:07.000000000 +0900
+++ src/hermes-0.12.0/lib/VM/Runtime.cpp	2022-09-14 08:50:46.686321000 +0900
@@ -57,6 +57,8 @@
 
 #include <future>
 
+#include <alloca.h>
+
 namespace hermes {
 namespace vm {
 
