--- origsrc/duo_unix-duo_unix-1.11.1/lib/Makefile.am	2018-11-29 05:38:13.000000000 +0900
+++ src/duo_unix-duo_unix-1.11.1/lib/Makefile.am	2019-05-08 18:45:19.494689200 +0900
@@ -1,11 +1,11 @@
 AM_CPPFLAGS = -I$(top_srcdir)/compat @OPENSSL_INCLUDES@
 
-noinst_LTLIBRARIES = libduo.la
+lib_LTLIBRARIES = libduo.la
 
 libduo_la_SOURCES = bson.h bson.c cacert.h duo.c \
 		    http_parser.h http_parser.c https.h https.c ini.h ini.c \
 		    urlenc.h urlenc.c util.c
-libduo_la_LIBADD = @OPENSSL_LDFLAGS@ @OPENSSL_LIBS@
+libduo_la_LIBADD = @OPENSSL_LDFLAGS@ @OPENSSL_LIBS@ $(top_builddir)/compat/libcompat.la
 # http://sourceware.org/autobook/autobook/autobook_91.html
 libduo_la_LDFLAGS = -no-undefined -version-info 3:0:0 -export-symbols-regex '^duo_'
 
--- origsrc/duo_unix-duo_unix-1.11.1/lib/util.c	2018-11-29 05:38:13.000000000 +0900
+++ src/duo_unix-duo_unix-1.11.1/lib/util.c	2019-05-08 18:45:19.510308300 +0900
@@ -151,7 +151,7 @@ duo_common_ini_handler(struct duo_config
 }
 
 void
-close_config(struct duo_config *cfg)
+duo_close_config(struct duo_config *cfg)
 {
     if (cfg == NULL) {
         return;
--- origsrc/duo_unix-duo_unix-1.11.1/lib/util.h	2018-11-29 05:38:13.000000000 +0900
+++ src/duo_unix-duo_unix-1.11.1/lib/util.h	2019-05-08 18:45:19.525939800 +0900
@@ -58,7 +58,7 @@ int duo_common_ini_handler(
 );
 
 /* Clean up config memory. */
-void close_config(struct duo_config *cfg);
+void duo_close_config(struct duo_config *cfg);
 
 int duo_check_groups(struct passwd *pw, char **groups, int groups_cnt);
 
--- origsrc/duo_unix-duo_unix-1.11.1/login_duo/login_duo.c	2018-11-29 05:38:13.000000000 +0900
+++ src/duo_unix-duo_unix-1.11.1/login_duo/login_duo.c	2019-05-08 18:45:19.525939800 +0900
@@ -198,10 +198,10 @@ do_auth(struct login_ctx *ctx, const cha
     /* Check group membership. */
     matched = duo_check_groups(pw, cfg.groups, cfg.groups_cnt);
     if (matched == -1) {
-        close_config(&cfg);
+        duo_close_config(&cfg);
         return (EXIT_FAILURE);
     } else if (matched == 0) {
-        close_config(&cfg);
+        duo_close_config(&cfg);
         return (EXIT_SUCCESS);
     }
 
@@ -243,7 +243,7 @@ do_auth(struct login_ctx *ctx, const cha
                     cfg.https_timeout, cfg.http_proxy)) == NULL) {
         duo_log(LOG_ERR, "Couldn't open Duo API handle",
             pw->pw_name, host, NULL);
-        close_config(&cfg);
+        duo_close_config(&cfg);
         return (EXIT_FAILURE);
     }
 
@@ -313,7 +313,7 @@ do_auth(struct login_ctx *ctx, const cha
         break;
     }
     duo_close(duo);
-    close_config(&cfg);
+    duo_close_config(&cfg);
 
     return (ret);
 }
--- origsrc/duo_unix-duo_unix-1.11.1/pam_duo/pam_duo.c	2018-11-29 05:38:13.000000000 +0900
+++ src/duo_unix-duo_unix-1.11.1/pam_duo/pam_duo.c	2019-05-08 18:45:19.541559500 +0900
@@ -185,7 +185,7 @@ pam_sm_authenticate(pam_handle_t *pamh,
     /* Check user */
     if (pam_get_user(pamh, &user, NULL) != PAM_SUCCESS ||
         (pw = getpwnam(user)) == NULL) {
-        close_config(&cfg);
+        duo_close_config(&cfg);
         return (PAM_USER_UNKNOWN);
     }
     /* XXX - Service-specific behavior */
@@ -193,7 +193,7 @@ pam_sm_authenticate(pam_handle_t *pamh,
     cmd = NULL;
     if (pam_get_item(pamh, PAM_SERVICE, (duopam_const void **)
         (duopam_const void *)&service) != PAM_SUCCESS) {
-        close_config(&cfg);
+        duo_close_config(&cfg);
         return (PAM_SERVICE_ERR);
     }
     if (strcmp(service, "sshd") == 0) {
@@ -208,7 +208,7 @@ pam_sm_authenticate(pam_handle_t *pamh,
     } else if (strcmp(service, "su") == 0 || strcmp(service, "su-l") == 0) {
         /* Check calling user for Duo auth, just like sudo */
         if ((pw = getpwuid(getuid())) == NULL) {
-            close_config(&cfg);
+            duo_close_config(&cfg);
             return (PAM_USER_UNKNOWN);
         }
         user = pw->pw_name;
@@ -216,10 +216,10 @@ pam_sm_authenticate(pam_handle_t *pamh,
     /* Check group membership */
     matched = duo_check_groups(pw, cfg.groups, cfg.groups_cnt);
     if (matched == -1) {
-        close_config(&cfg);
+        duo_close_config(&cfg);
         return (PAM_SERVICE_ERR);
     } else if (matched == 0) {
-        close_config(&cfg);
+        duo_close_config(&cfg);
         return (PAM_SUCCESS);
     }
 
@@ -261,7 +261,7 @@ pam_sm_authenticate(pam_handle_t *pamh,
                     "pam_duo/" PACKAGE_VERSION,
                     cfg.noverify ? "" : cfg.cafile, cfg.https_timeout, cfg.http_proxy)) == NULL) {
         duo_log(LOG_ERR, "Couldn't open Duo API handle", pw->pw_name, host, NULL);
-        close_config(&cfg);
+        duo_close_config(&cfg);
         return (PAM_SERVICE_ERR);
     }
     duo_set_conv_funcs(duo, __duo_prompt, __duo_status, pamh);
@@ -317,7 +317,7 @@ pam_sm_authenticate(pam_handle_t *pamh,
         pam_err = PAM_MAXTRIES;
     }
     duo_close(duo);
-    close_config(&cfg);
+    duo_close_config(&cfg);
 
     return (pam_err);
 }
--- origsrc/duo_unix-duo_unix-1.11.1/tests/Makefile.am	2018-11-29 05:38:13.000000000 +0900
+++ src/duo_unix-duo_unix-1.11.1/tests/Makefile.am	2019-05-08 18:45:19.557189600 +0900
@@ -10,9 +10,9 @@ check_LTLIBRARIES = libgroups_preload.la
 libgroups_preload_la_SOURCES = groups_preload.c
 libgroups_preload_la_LDFLAGS = -no-undefined -avoid-version -rpath /foo -shared
 
-check_LTLIBRARIES += liblogin_duo_preload.la
-liblogin_duo_preload_la_SOURCES = login_duo_preload.c
-liblogin_duo_preload_la_LDFLAGS = -no-undefined -avoid-version -rpath /baz -shared
+# check_LTLIBRARIES += liblogin_duo_preload.la
+# liblogin_duo_preload_la_SOURCES = login_duo_preload.c
+# liblogin_duo_preload_la_LDFLAGS = -no-undefined -avoid-version -rpath /baz -shared
 
 if PAM
 TESTS += $(PAM_TESTS)
