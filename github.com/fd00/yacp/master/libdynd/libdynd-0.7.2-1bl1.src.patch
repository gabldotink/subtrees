--- origsrc/libdynd-0.7.2/CMakeLists.txt	2016-03-17 04:34:36.000000000 +0900
+++ src/libdynd-0.7.2/CMakeLists.txt	2016-12-09 00:48:37.204297000 +0900
@@ -81,6 +81,8 @@ if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "
 else()
     if(WIN32)
         set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3 -std=c++14 -fomit-frame-pointer -fstrict-aliasing -Wall -Wextra -Werror -Wno-missing-field-initializers")
+    elseif(CYGWIN)
+        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3 -fomit-frame-pointer -fstrict-aliasing -Wall -Wextra -Wno-missing-field-initializers -Werror")
     else()
         set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3 -fomit-frame-pointer -fstrict-aliasing -Wall -Wextra -Wno-missing-field-initializers -fPIC -Werror -Wno-ignored-attributes")
     endif()
@@ -88,7 +90,7 @@ else()
         if ("${CMAKE_CXX_COMPILER_VERSION}" VERSION_LESS 4.9)
             message(FATAL_ERROR "Only GCC 4.9 and later are supported by LibDyND. Found version ${CMAKE_CXX_COMPILER_VERSION}.")
         endif()
-        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14 -fmax-errors=20 -Wno-type-limits")
+        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++14 -fmax-errors=20 -Wno-type-limits")
     elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
         set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++1y -ferror-limit=20 -Wno-missing-braces")
     endif()
@@ -100,10 +102,14 @@ endif()
 #llvm_map_components_to_libnames(LLVM_LINK_LIBS core option target bitreader support profiledata codegen irreader linker instrumentation objcarcopts lto)
 
 # Get the git revision
-include(GetGitRevisionDescriptionDyND)
-get_git_head_revision("${CMAKE_CURRENT_SOURCE_DIR}" GIT_REFSPEC DYND_GIT_SHA1)
-git_describe("${CMAKE_CURRENT_SOURCE_DIR}" DYND_VERSION_STRING
+if(CYGWIN)
+  set(DYND_VERSION_STRING "0.7.2")
+else()
+  include(GetGitRevisionDescriptionDyND)
+  get_git_head_revision("${CMAKE_CURRENT_SOURCE_DIR}" GIT_REFSPEC DYND_GIT_SHA1)
+  git_describe("${CMAKE_CURRENT_SOURCE_DIR}" DYND_VERSION_STRING
              --dirty --always --match "v*")
+endif()
 message(STATUS "DyND version: ${DYND_VERSION_STRING}")
 configure_file(
     "${CMAKE_CURRENT_SOURCE_DIR}/src/dynd/git_version.cpp.in"
@@ -442,15 +448,13 @@ if (DYND_SHARED_LIB)
     set_target_properties(libdyndt
         PROPERTIES
         OUTPUT_NAME "dyndt"
-        PREFIX "lib"
-        IMPORT_PREFIX "lib"
+        SOVERSION 0
         )
     add_library(libdynd SHARED ${libdynd_SRC})
     set_target_properties(libdynd
         PROPERTIES
         OUTPUT_NAME "dynd"
-        PREFIX "lib"
-        IMPORT_PREFIX "lib"
+        SOVERSION 0
         )
     add_dependencies(libdynd libdyndt)
 else()
@@ -469,15 +473,7 @@ else()
         )
 endif()
 
-set_property(
-    TARGET libdyndt
-    PROPERTY COMPILE_DEFINITIONS DYNDT_EXPORT
-)
-
-set_property(
-    TARGET libdynd
-    PROPERTY COMPILE_DEFINITIONS DYND_EXPORT
-)
+add_definitions(-DDYNDT_EXPORT -DDYND_EXPORT)
 
 # Add preprocessor definitions from CMake
 configure_file("include/dynd/cmake_config.hpp.in"
@@ -576,12 +572,12 @@ endif()
 if (DYND_INSTALL_LIB)
     # Install the libdyndt binary
     install(TARGETS libdyndt
-        RUNTIME DESTINATION lib${LIB_SUFFIX}
+        RUNTIME DESTINATION bin
         LIBRARY DESTINATION lib${LIB_SUFFIX}
         ARCHIVE DESTINATION lib${LIB_SUFFIX}${DYND_STATIC_LIB_DIR})
     # Install the libdynd binary
     install(TARGETS libdynd
-        RUNTIME DESTINATION lib${LIB_SUFFIX}
+        RUNTIME DESTINATION bin
         LIBRARY DESTINATION lib${LIB_SUFFIX}
         ARCHIVE DESTINATION lib${LIB_SUFFIX}${DYND_STATIC_LIB_DIR})
     # Install the libdynd headers
--- origsrc/libdynd-0.7.2/benchmarks/benchmark_dispatch_map.cpp	2016-03-17 04:34:36.000000000 +0900
+++ src/libdynd-0.7.2/benchmarks/benchmark_dispatch_map.cpp	2016-12-10 08:01:16.384624400 +0900
@@ -27,7 +27,7 @@ public:
 
   void SetUp(const benchmark::State &state)
   {
-    pairs.resize(state.range_x());
+    pairs.resize(state.range(0));
 
     default_random_engine generator;
     uniform_int_distribution<underlying_type_t<type_id_t>> d(bool_id, callable_id);
@@ -48,7 +48,7 @@ public:
 
   void SetUp(const benchmark::State &state)
   {
-    pairs.resize(state.range_x());
+    pairs.resize(state.range(0));
 
     default_random_engine generator;
     uniform_int_distribution<underlying_type_t<type_id_t>> d(bool_id, callable_id);
@@ -78,7 +78,7 @@ BENCHMARK_DEFINE_F(X, BM_IsBaseIDOf)(ben
       benchmark::DoNotOptimize(is_base_id_of(pair.first, pair.second));
     }
   }
-  state.SetItemsProcessed(10 * state.iterations() * state.range_x());
+  state.SetItemsProcessed(10 * state.iterations() * state.range(0));
 }
 
 BENCHMARK_REGISTER_F(X, BM_IsBaseIDOf)->Arg(100)->Arg(1000)->Arg(10000);
--- origsrc/libdynd-0.7.2/include/dynd/platform_definitions.hpp	2016-03-17 04:34:36.000000000 +0900
+++ src/libdynd-0.7.2/include/dynd/platform_definitions.hpp	2016-12-08 19:04:33.671956100 +0900
@@ -16,7 +16,7 @@
 ////////////////////////////////////////////////////////////////////////////////
 #   define DYND_OS_WINDOWS
 
-#elif defined(__linux__)
+#elif defined(__linux__) || defined(__CYGWIN__)
 // platform is a Linux
 #   define DYND_OS_LINUX
 #elif defined(__APPLE__) && defined(__MACH__)
--- origsrc/libdynd-0.7.2/tests/CMakeLists.txt	2016-03-17 04:34:36.000000000 +0900
+++ src/libdynd-0.7.2/tests/CMakeLists.txt	2016-12-08 23:54:50.841942400 +0900
@@ -108,12 +108,9 @@ set(tests_SRC
     test_parse.cpp
     test_platform.cpp
     test_pointer.cpp
-    ../thirdparty/gtest/gtest-all.cc
-    ../thirdparty/gtest/gtest_main.cc
     )
 
 include_directories(
-    ../thirdparty
     .
     )
 
@@ -123,7 +120,7 @@ source_group("Types Tests" REGULAR_EXPRE
 source_group("Func Tests" REGULAR_EXPRESSION "\\/func\\/test_[^\\/]*\\.cpp$")
 
 add_executable(test_libdynd ${tests_SRC})
-set(LINK_LIBS ${LINK_LIBS} libdynd)
+set(LINK_LIBS ${LINK_LIBS} libdynd gtest gtest_main)
 
 if(WIN32)
     target_link_libraries(test_libdynd
@@ -145,7 +142,7 @@ elseif(APPLE)
   #      BUILD_WITH_INSTALL_RPATH TRUE
    #     )
 else()
-if(LLVM_FOUND)
+if(LLVM_FOUND AND NOT CYGWIN)
     set_target_properties(test_libdynd PROPERTIES
     #-Wno-unnamed-type-template-args
         COMPILE_FLAGS "-pthread -Xclang -load -Xclang ${CMAKE_BINARY_DIR}/plugin/libdynd_plugin.so")
