--- origsrc/bitcoin-api-cpp-0.3.1/CMakeLists.txt	2017-12-15 04:46:06.000000000 +0900
+++ src/bitcoin-api-cpp-0.3.1/CMakeLists.txt	2020-01-30 17:55:15.666805000 +0900
@@ -3,13 +3,10 @@ PROJECT(libbitcoin-api-cpp)
 
 set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/")
 
-# Set compiler settings
-SET(CMAKE_CXX_FLAGS "-std=c++11 -g -Wall")
-
 # Set version number
 SET(MAJOR_VERSION 0)
-SET(MINOR_VERSION 1)
-SET(PATCH_VERSION 0)
+SET(MINOR_VERSION 3)
+SET(PATCH_VERSION 1)
 SET(SO_VERSION    0)
 
 # Add source directory
@@ -57,3 +54,10 @@ ADD_CUSTOM_TARGET(uninstall
 COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)
 
 ENDIF(EXISTS "${CMAKE_ROOT}/Modules/CPack.cmake")
+
+SET(prefix ${CMAKE_INSTALL_PREFIX})
+SET(exec_prefix ${CMAKE_INSTALL_PREFIX})
+SET(libdir ${CMAKE_INSTALL_PREFIX}/lib)
+SET(includedir ${CMAKE_INSTALL_PREFIX}/include)
+CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/bitcoin-api-cpp.pc.in ${CMAKE_BINARY_DIR}/bitcoin-api-cpp.pc @ONLY)
+INSTALL(FILES ${CMAKE_BINARY_DIR}/bitcoin-api-cpp.pc DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig)
--- origsrc/bitcoin-api-cpp-0.3.1/bitcoin-api-cpp.pc.in	1970-01-01 09:00:00.000000000 +0900
+++ src/bitcoin-api-cpp-0.3.1/bitcoin-api-cpp.pc.in	2020-01-30 17:58:56.082221300 +0900
@@ -0,0 +1,10 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: bitcoin-api-cpp
+Description: Wrapper for the bitcoind JSON-RPC interface written in C++
+Version: @MAJOR_VERSION@.@MINOR_VERSION@.@PATCH_VERSION@
+Libs: -L${libdir} -lbitcoinapi
+Cflags: -I${includedir}
--- origsrc/bitcoin-api-cpp-0.3.1/src/bitcoinapi/CMakeLists.txt	2017-12-15 04:46:06.000000000 +0900
+++ src/bitcoin-api-cpp-0.3.1/src/bitcoinapi/CMakeLists.txt	2020-01-30 17:40:50.571188200 +0900
@@ -8,10 +8,14 @@ FILE(GLOB bitcoinapi_source ${CMAKE_CURR
 
 # Set target libraries
 ADD_LIBRARY(bitcoinapi SHARED ${bitcoinapi_source})
-ADD_LIBRARY(bitcoinapi_static STATIC ${bitcoinapi_source})
+if (NOT BUILD_SHARED_LIBS)
+    ADD_LIBRARY(bitcoinapi_static STATIC ${bitcoinapi_source})
+endif()
 
 # Set output name of static library
-SET_TARGET_PROPERTIES(bitcoinapi_static PROPERTIES OUTPUT_NAME bitcoinapi)
+if (NOT BUILD_SHARED_LIBS)
+    SET_TARGET_PROPERTIES(bitcoinapi_static PROPERTIES OUTPUT_NAME bitcoinapi)
+endif()
 
 # Link the library with json-rpc-cpp libs
 TARGET_LINK_LIBRARIES(bitcoinapi
@@ -20,31 +24,45 @@ TARGET_LINK_LIBRARIES(bitcoinapi
                         jsonrpccpp-common
                         jsonrpccpp-client)
 
-TARGET_LINK_LIBRARIES(bitcoinapi_static
+if (NOT BUILD_SHARED_LIBS)
+    TARGET_LINK_LIBRARIES(bitcoinapi_static
                         ${CURL_LIBRARY}
                         ${JSONCPP_LIBRARIES}
                         jsonrpccpp-common
                         jsonrpccpp-client)
+endif()
 
 target_include_directories(bitcoinapi PUBLIC
                         ${CURL_INCLUDE_DIR}
                         ${JSONCPP_INCLUDE_DIRS}
                         ${JSONRPCCPP_INCLUDE_DIRS})
 
-target_include_directories(bitcoinapi_static PUBLIC
+if (NOT BUILD_SHARED_LIBS)
+    target_include_directories(bitcoinapi_static PUBLIC
                         ${CURL_INCLUDE_DIR}
                         ${JSONCPP_INCLUDE_DIRS}
                         ${JSONRPCCPP_INCLUDE_DIRS})
+endif()
 
 # Set version settings
 SET(VERSION_STRING ${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION})
-SET_TARGET_PROPERTIES(bitcoinapi bitcoinapi_static PROPERTIES
+SET_TARGET_PROPERTIES(bitcoinapi PROPERTIES
     VERSION "${VERSION_STRING}"
     SOVERSION "${SO_VERSION}")
+if (NOT BUILD_SHARED_LIBS)
+    SET_TARGET_PROPERTIES(bitcoinapi_static PROPERTIES
+        VERSION "${VERSION_STRING}"
+        SOVERSION "${SO_VERSION}")
+endif()
 
 # Install to appropriate destinations
 INSTALL(FILES ${bitcoinapi_header} DESTINATION include/bitcoinapi)
 
-INSTALL(TARGETS bitcoinapi bitcoinapi_static
+INSTALL(TARGETS bitcoinapi
+            RUNTIME DESTINATION bin
+            ARCHIVE DESTINATION lib)
+if (NOT BUILD_SHARED_LIBS)
+    INSTALL(TARGETS bitcoinapi_static
             LIBRARY DESTINATION lib
             ARCHIVE DESTINATION lib)
+endif()
--- origsrc/bitcoin-api-cpp-0.3.1/src/bitcoinapi/bitcoinapi.cpp	2017-12-15 04:46:06.000000000 +0900
+++ src/bitcoin-api-cpp-0.3.1/src/bitcoinapi/bitcoinapi.cpp	2020-01-30 17:49:25.141990000 +0900
@@ -12,6 +12,7 @@
 
 #include <string>
 #include <stdexcept>
+#include <sys/types.h>
 
 #include <jsonrpccpp/client.h>
 #include <jsonrpccpp/client/connectors/httpclient.h>
--- origsrc/bitcoin-api-cpp-0.3.1/src/bitcoinapi/exception.h	2017-12-15 04:46:06.000000000 +0900
+++ src/bitcoin-api-cpp-0.3.1/src/bitcoinapi/exception.h	2020-01-30 17:45:08.449761300 +0900
@@ -13,7 +13,7 @@
 #include <string>
 #include <sstream>
 
-#ifdef __APPLE__
+#if defined(__APPLE__) || defined(__CYGWIN__)
 #include <json/json.h>
 #include <json/reader.h>
 #include <json/value.h>
--- origsrc/bitcoin-api-cpp-0.3.1/src/bitcoinapi/types.h	2017-12-15 04:46:06.000000000 +0900
+++ src/bitcoin-api-cpp-0.3.1/src/bitcoinapi/types.h	2020-01-30 17:44:37.586627600 +0900
@@ -13,7 +13,7 @@
 #include <string>
 #include <vector>
 
-#ifdef __APPLE__
+#if defined(__APPLE__) || defined(__CYGWIN__)
 #include <json/json.h>
 #else
 #include <jsoncpp/json/json.h>
--- origsrc/bitcoin-api-cpp-0.3.1/src/test/CMakeLists.txt	2017-12-15 04:46:06.000000000 +0900
+++ src/bitcoin-api-cpp-0.3.1/src/test/CMakeLists.txt	2020-01-30 18:03:57.237080200 +0900
@@ -1,6 +1,3 @@
-# Set compiler settings
-SET(CMAKE_CXX_FLAGS "-std=c++11 -g -Wall")
-
 # Find required packages
 FIND_PACKAGE(Boost REQUIRED COMPONENTS system filesystem unit_test_framework)
 
