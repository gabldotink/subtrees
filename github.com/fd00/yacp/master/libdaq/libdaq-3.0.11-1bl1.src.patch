--- origsrc/libdaq-3.0.11/Makefile.am	2023-02-24 00:49:51.000000000 +0900
+++ src/libdaq-3.0.11/Makefile.am	2023-04-03 15:46:09.369277000 +0900
@@ -7,6 +7,8 @@ pkgconfig_DATA = libdaq.pc
 if BUILD_MODULES
     MODULES_DIR = modules
 endif
-SUBDIRS = api $(MODULES_DIR) example test
+
+# example : fatal error: netinet/if_ether.h: No such file or directory
+SUBDIRS = api $(MODULES_DIR) test
 
 ACLOCAL_AMFLAGS = -I m4
--- origsrc/libdaq-3.0.11/api/Makefile.am	2023-02-24 00:49:51.000000000 +0900
+++ src/libdaq-3.0.11/api/Makefile.am	2023-04-03 15:46:09.415257000 +0900
@@ -6,5 +6,5 @@ lib_LTLIBRARIES = libdaq.la
 libdaq_la_SOURCES = daq_base.c daq_base_api.c daq_config.c daq_instance_api_defaults.c daq_mod_ops.c
 libdaq_la_CPPFLAGS = $(AM_CPPFLAGS) $(CODE_COVERAGE_CPPFLAGS)
 libdaq_la_CFLAGS = $(AM_CFLAGS) $(CODE_COVERAGE_CFLAGS)
-libdaq_la_LDFLAGS = $(CODE_COVERAGE_LDFLAGS) -version-info 3:0:0
+libdaq_la_LDFLAGS = -no-undefined $(CODE_COVERAGE_LDFLAGS) -version-info 3:0:0
 libdaq_la_LIBADD = $(LIBDL)
--- origsrc/libdaq-3.0.11/configure.ac	2023-02-24 00:49:51.000000000 +0900
+++ src/libdaq-3.0.11/configure.ac	2023-04-03 15:46:09.420260800 +0900
@@ -16,7 +16,7 @@ AC_INIT([libdaq],[daq_version_str],[snor
 AC_CONFIG_MACRO_DIR([m4])
 AC_CONFIG_SRCDIR([api/daq.h])
 AC_CONFIG_HEADERS([config.h])
-AM_INIT_AUTOMAKE([-Wall -Werror -Wno-portability])
+AM_INIT_AUTOMAKE([-Wall -Wno-portability])
 
 DAQ_MAJOR_VERSION=daq_major_version
 DAQ_MINOR_VERSION=daq_minor_version
--- origsrc/libdaq-3.0.11/test/mock_stdio.c	2023-02-24 00:49:51.000000000 +0900
+++ src/libdaq-3.0.11/test/mock_stdio.c	2023-04-03 15:46:09.424254100 +0900
@@ -47,6 +47,18 @@ int __wrap___fprintf_chk(FILE* const fil
 /* Function declaration to make the compiler happy. */
 int __real_printf(const char *fmt, ...) __attribute__ ((weak)) CMOCKA_PRINTF_ATTRIBUTE(1, 2);
 
+#if defined(__CYGWIN__)
+int __vfprintf_chk(FILE * f, int flag, const char *fmt, va_list ap)
+{
+    return vfprintf(f, fmt, ap);
+}
+
+int __vprintf_chk(int flag, const char *fmt, va_list ap)
+{
+    return vfprintf(stdout, fmt, ap);
+}
+#endif
+
 void mock_stdio_set_debug_capture(bool debug)
 {
     debug_capture = debug;
