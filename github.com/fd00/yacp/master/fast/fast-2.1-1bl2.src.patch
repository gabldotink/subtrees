--- origsrc/fast-C-src-VERSION_2_1/Makefile.am	1970-01-01 09:00:00.000000000 +0900
+++ src/fast-C-src-VERSION_2_1/Makefile.am	2020-10-16 10:17:45.618556900 +0900
@@ -0,0 +1,9 @@
+
+include_HEADERS = fast.h
+
+lib_LTLIBRARIES = libfast.la
+libfast_la_LDFLAGS = -no-undefined
+libfast_la_SOURCES = fast.c fast_10.c fast_11.c fast_12.c fast_9.c nonmax.c
+
+pkgconfigdir = $(libdir)/pkgconfig
+pkgconfig_DATA = $(PACKAGE).pc
--- origsrc/fast-C-src-VERSION_2_1/configure.ac	1970-01-01 09:00:00.000000000 +0900
+++ src/fast-C-src-VERSION_2_1/configure.ac	2020-10-16 10:17:45.704558400 +0900
@@ -0,0 +1,26 @@
+#                                               -*- Autoconf -*-
+# Process this file with autoconf to produce a configure script.
+
+AC_PREREQ([2.69])
+AC_INIT([fast], [2.1])
+AC_CONFIG_SRCDIR([fast.c])
+AC_CONFIG_HEADERS([config.h])
+AM_INIT_AUTOMAKE
+
+# Checks for programs.
+AC_PROG_CC
+LT_INIT
+
+# Checks for libraries.
+
+# Checks for header files.
+AC_CHECK_HEADERS([stdlib.h])
+
+# Checks for typedefs, structures, and compiler characteristics.
+
+# Checks for library functions.
+AC_FUNC_MALLOC
+AC_FUNC_REALLOC
+
+AC_CONFIG_FILES([fast.pc Makefile])
+AC_OUTPUT
--- origsrc/fast-C-src-VERSION_2_1/fast.pc.in	1970-01-01 09:00:00.000000000 +0900
+++ src/fast-C-src-VERSION_2_1/fast.pc.in	2020-10-16 10:17:45.737573000 +0900
@@ -0,0 +1,10 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: fast
+Description: FAST corner detectors
+Version: @VERSION@
+Libs: -L${libdir} -lfast
+Cflags: -I${includedir}
--- origsrc/fast-C-src-VERSION_2_1/fast_10.c	2009-01-12 18:01:32.000000000 +0900
+++ src/fast-C-src-VERSION_2_1/fast_10.c	2020-10-16 10:17:45.779548900 +0900
@@ -2343,9 +2343,9 @@ int* fast10_score(const byte* i, int str
 	int pixel[16];
 	make_offsets(pixel, stride);
 
-    for(n=0; n < num_corners; n++)
+    for(n=0; n < num_corners; n++) {
         scores[n] = fast10_corner_score(i + corners[n].y*stride + corners[n].x, pixel, b);
-
+    }
 	return scores;
 }
 
--- origsrc/fast-C-src-VERSION_2_1/fast_11.c	2009-01-12 18:01:32.000000000 +0900
+++ src/fast-C-src-VERSION_2_1/fast_11.c	2020-10-16 10:17:45.841594200 +0900
@@ -1965,9 +1965,9 @@ int* fast11_score(const byte* i, int str
 	int pixel[16];
 	make_offsets(pixel, stride);
 
-    for(n=0; n < num_corners; n++)
+    for(n=0; n < num_corners; n++) {
         scores[n] = fast11_corner_score(i + corners[n].y*stride + corners[n].x, pixel, b);
-
+    }
 	return scores;
 }
 
--- origsrc/fast-C-src-VERSION_2_1/fast_12.c	2009-01-12 18:01:32.000000000 +0900
+++ src/fast-C-src-VERSION_2_1/fast_12.c	2020-10-16 10:17:45.906549900 +0900
@@ -1577,9 +1577,9 @@ int* fast12_score(const byte* i, int str
 	int pixel[16];
 	make_offsets(pixel, stride);
 
-    for(n=0; n < num_corners; n++)
+    for(n=0; n < num_corners; n++) {
         scores[n] = fast12_corner_score(i + corners[n].y*stride + corners[n].x, pixel, b);
-
+    }
 	return scores;
 }
 
--- origsrc/fast-C-src-VERSION_2_1/fast_9.c	2009-01-12 18:01:32.000000000 +0900
+++ src/fast-C-src-VERSION_2_1/fast_9.c	2020-10-16 10:17:45.933570800 +0900
@@ -2965,9 +2965,9 @@ int* fast9_score(const byte* i, int stri
 	int pixel[16];
 	make_offsets(pixel, stride);
 
-    for(n=0; n < num_corners; n++)
+    for(n=0; n < num_corners; n++) {
         scores[n] = fast9_corner_score(i + corners[n].y*stride + corners[n].x, pixel, b);
-
+    }
 	return scores;
 }
 
