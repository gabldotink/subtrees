--- origsrc/libplctag-2.5.5/CMakeLists.txt	2022-12-01 12:33:59.000000000 +0900
+++ src/libplctag-2.5.5/CMakeLists.txt	2023-01-31 20:20:34.509330300 +0900
@@ -400,35 +400,40 @@ if(BASE_LINK_FLAGS)
     set_target_properties(plctag_dyn PROPERTIES LINK_FLAGS "${BASE_LINK_FLAGS}")
 endif()
 
-if(UNIX)
-	# static library
-	add_library(plctag_static STATIC ${libplctag_SRCS} )
-    set_target_properties(plctag_static PROPERTIES LINK_FLAGS "${BASE_LINK_FLAGS}")
-	set_target_properties(plctag_static PROPERTIES VERSION "${libplctag_VERSION_MAJOR}.${libplctag_VERSION_MINOR}" OUTPUT_NAME "plctag")
+set(tool_lib "plctag_dyn")
+if (BUILD_STATIC_LIBS)
+    if(UNIX)
+        # static library
+        add_library(plctag_static STATIC ${libplctag_SRCS} )
+        set_target_properties(plctag_static PROPERTIES LINK_FLAGS "${BASE_LINK_FLAGS}")
+        set_target_properties(plctag_static PROPERTIES VERSION "${libplctag_VERSION_MAJOR}.${libplctag_VERSION_MINOR}" OUTPUT_NAME "plctag")
 
-	set(tool_lib "plctag_dyn")
-elseif(WIN32)
-    # static library
-	add_library(plctag_static STATIC ${libplctag_SRCS} )
-	set_target_properties(plctag_static PROPERTIES LINK_FLAGS "${BASE_LINK_FLAGS}")
-	set_target_properties(plctag_static PROPERTIES VERSION "${libplctag_VERSION_MAJOR}.${libplctag_VERSION_MINOR}" OUTPUT_NAME "plctag_static")
+    elseif(WIN32)
+        # static library
+        add_library(plctag_static STATIC ${libplctag_SRCS} )
+        set_target_properties(plctag_static PROPERTIES LINK_FLAGS "${BASE_LINK_FLAGS}")
+        set_target_properties(plctag_static PROPERTIES VERSION "${libplctag_VERSION_MAJOR}.${libplctag_VERSION_MINOR}" OUTPUT_NAME "plctag_static")
 
-    target_compile_definitions(plctag_dyn PUBLIC -DLIBPLCTAGDLL_EXPORTS=1)
-	set(tool_lib "plctag_dyn")
+        target_compile_definitions(plctag_dyn PUBLIC -DLIBPLCTAGDLL_EXPORTS=1)
+    endif()
 endif()
 
 # make sure we link with the threading library.
 if (UNIX)
     if(CMAKE_THREAD_LIBS_INIT)
       target_link_libraries(plctag_dyn "${CMAKE_THREAD_LIBS_INIT}")
-      target_link_libraries(plctag_static "${CMAKE_THREAD_LIBS_INIT}")
+      if (BUILD_STATIC_LIBS)
+          target_link_libraries(plctag_static "${CMAKE_THREAD_LIBS_INIT}")
+      endif()
     endif()
 endif()
 
 # Windows needs to link the library to the WINSOCK library
 if (WIN32)
     target_link_libraries(plctag_dyn ws2_32)
-    target_link_libraries(plctag_static ws2_32)
+    if (BUILD_STATIC_LIBS)
+        target_link_libraries(plctag_static ws2_32)
+    endif()
 endif()
 
 # add the examples and tests
@@ -609,11 +614,15 @@ endif(ANDROID_BUILD)
 
 # for installation
 if(UNIX)
-	install(TARGETS plctag_dyn DESTINATION lib${LIB_SUFFIX})
-	install(TARGETS plctag_static DESTINATION lib${LIB_SUFFIX})
+	install(TARGETS plctag_dyn RUNTIME DESTINATION bin ARCHIVE DESTINATION lib${LIB_SUFFIX})
+    if (BUILD_STATIC_LIBS)
+    	install(TARGETS plctag_static DESTINATION lib${LIB_SUFFIX})
+    endif()
 elseif(WIN32)
 	install(TARGETS plctag_dyn DESTINATION lib${LIB_SUFFIX})
-	install(TARGETS plctag_static DESTINATION lib${LIB_SUFFIX})
+    if (BUILD_STATIC_LIBS)
+    	install(TARGETS plctag_static DESTINATION lib${LIB_SUFFIX})
+    endif()
 endif()
 
 if(ANDROID_BUILD)
