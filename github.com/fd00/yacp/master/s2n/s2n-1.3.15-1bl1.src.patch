--- origsrc/s2n-tls/CMakeLists.txt	2022-06-13 12:52:29.000000000 +0900
+++ src/s2n-tls/CMakeLists.txt	2022-06-13 14:36:28.509767800 +0900
@@ -349,12 +349,19 @@ file(GLOB S2N_SRC
 add_library(${PROJECT_NAME} ${S2N_HEADERS} ${S2N_SRC})
 set_target_properties(${PROJECT_NAME} PROPERTIES LINKER_LANGUAGE C)
 
+if (DEFINED SOVERSION)
+    set_target_properties(${PROJECT_NAME} PROPERTIES SOVERSION "${SOVERSION}")
+endif()
+
 set(CMAKE_C_FLAGS_DEBUGOPT "")
 
 target_compile_options(${PROJECT_NAME} PRIVATE -pedantic -std=gnu99 -Wall -Wimplicit -Wunused -Wcomment -Wchar-subscripts
         -Wuninitialized -Wshadow -Wcast-align -Wwrite-strings -Wno-deprecated-declarations -Wno-unknown-pragmas -Wformat-security
-        -Wno-missing-braces -Wa,--noexecstack
+        -Wno-missing-braces
 )
+if (NOT CYGWIN)
+    target_compile_options(${PROJECT_NAME} PRIVATE -Wa,--noexecstack)
+endif()
 
 if (UNSAFE_TREAT_WARNINGS_AS_ERRORS)
     target_compile_options(${PROJECT_NAME} PRIVATE -Werror )
@@ -374,7 +381,7 @@ if(S2N_LTO)
     endif()
 endif()
 
-if(NOT APPLE)
+if(NOT APPLE AND NOT CYGWIN)
     set(CMAKE_SHARED_LINKER_FLAGS -Wl,-z,noexecstack,-z,relro,-z,now)
 endif()
 
@@ -776,14 +783,23 @@ else()
 endif()
 
 install(EXPORT "${PROJECT_NAME}-targets"
-        DESTINATION "${CMAKE_INSTALL_LIBDIR}/${PROJECT_NAME}/cmake/${TARGET_DIR}"
+        DESTINATION "${INSTALL_CMAKE_DIR}/${PROJECT_NAME}"
         NAMESPACE AWS::
         COMPONENT Development)
 
 install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake"
-        DESTINATION "${CMAKE_INSTALL_LIBDIR}/${PROJECT_NAME}/cmake/"
+        DESTINATION "${INSTALL_CMAKE_DIR}/${PROJECT_NAME}"
         COMPONENT Development)
 
 install(FILES "cmake/modules/Findcrypto.cmake"
-        DESTINATION "${CMAKE_INSTALL_LIBDIR}/${PROJECT_NAME}/cmake/modules/"
+        DESTINATION "${INSTALL_CMAKE_DIR}/${PROJECT_NAME}/modules/"
         COMPONENT Development)
+
+if (CYGWIN)
+  set(prefix ${CMAKE_INSTALL_PREFIX})
+  set(exec_prefix ${CMAKE_INSTALL_PREFIX})
+  set(libdir ${CMAKE_INSTALL_PREFIX}/lib)
+  set(includedir ${CMAKE_INSTALL_PREFIX}/include)
+  configure_file(${CMAKE_SOURCE_DIR}/s2n.pc.in ${CMAKE_BINARY_DIR}/s2n.pc @ONLY)
+  install(FILES ${CMAKE_BINARY_DIR}/s2n.pc DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig)
+endif()
--- origsrc/s2n-tls/cmake/modules/Findcrypto.cmake	2022-06-13 12:52:29.000000000 +0900
+++ src/s2n-tls/cmake/modules/Findcrypto.cmake	2022-06-13 13:03:58.727069700 +0900
@@ -40,7 +40,7 @@ else()
     )
 
     find_library(crypto_SHARED_LIBRARY
-        NAMES libcrypto.so libcrypto.dylib
+        NAMES libcrypto.dll.a libcrypto.so libcrypto.dylib
         HINTS
         "${CMAKE_PREFIX_PATH}"
         "${CMAKE_INSTALL_PREFIX}"
--- origsrc/s2n-tls/cmake/s2n-config.cmake	2022-06-13 12:52:29.000000000 +0900
+++ src/s2n-tls/cmake/s2n-config.cmake	2022-06-13 14:29:30.923623200 +0900
@@ -8,9 +8,4 @@ endif()
 list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/modules")
 find_dependency(crypto)
 
-if (BUILD_SHARED_LIBS)
-    include(${CMAKE_CURRENT_LIST_DIR}/shared/@PROJECT_NAME@-targets.cmake)
-else()
-    include(${CMAKE_CURRENT_LIST_DIR}/static/@PROJECT_NAME@-targets.cmake)
-endif()
-
+include(${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@-targets.cmake)
--- origsrc/s2n-tls/s2n.pc.in	1970-01-01 09:00:00.000000000 +0900
+++ src/s2n-tls/s2n.pc.in	2022-06-13 17:49:47.355391300 +0900
@@ -0,0 +1,11 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: s2n
+Description: Implementation of the TLS/SSL protocols
+Version: @VERSION@
+Libs: -L${libdir} -ls2n
+Cflags: -I${includedir}
+Requires: libcrypto
--- origsrc/s2n-tls/utils/s2n_asn1_time.c	2022-06-13 12:52:47.000000000 +0900
+++ src/s2n-tls/utils/s2n_asn1_time.c	2022-06-13 13:16:28.249470000 +0900
@@ -48,7 +48,7 @@ typedef enum parser_state {
 static inline long get_gmt_offset(struct tm *t) {
 
 /* See: https://sourceware.org/git/?p=glibc.git;a=blob;f=include/features.h;h=ba272078cf2263ec88e039fda7524c136a4a7953;hb=HEAD */
-#if defined(__USE_MISC) || defined(__FreeBSD__) || defined(__NetBSD__) || defined(__ANDROID__) || defined(ANDROID) || defined(__APPLE__) && defined(__MACH__)
+#if defined(__CYGWIN__) || defined(__USE_MISC) || defined(__FreeBSD__) || defined(__NetBSD__) || defined(__ANDROID__) || defined(ANDROID) || defined(__APPLE__) && defined(__MACH__)
     return t->tm_gmtoff;
 #else
     return t->__tm_gmtoff;
