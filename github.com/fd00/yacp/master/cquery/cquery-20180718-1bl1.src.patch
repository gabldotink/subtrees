--- origsrc/cquery/CMakeLists.txt	2020-01-05 21:31:36.000000000 +0900
+++ src/cquery/CMakeLists.txt	2020-01-05 21:55:47.945394700 +0900
@@ -143,7 +143,6 @@ target_include_directories(cquery PRIVAT
                            third_party/doctest
                            third_party/loguru
                            third_party/msgpack-c/include
-                           third_party/pugixml/src
                            third_party/rapidjson/include
                            third_party/sparsepp)
 
@@ -256,8 +255,9 @@ endif()
 ### Sources
 
 target_sources(cquery PRIVATE
-               third_party/siphash.cc
-               third_party/pugixml/src/pugixml.cpp)
+               third_party/siphash.cc)
+
+target_link_libraries(cquery PRIVATE pugixml)
 
 target_sources(cquery PRIVATE
                src/c_cpp_properties.cc
--- origsrc/cquery/third_party/loguru/loguru.hpp	2020-01-05 21:32:23.000000000 +0900
+++ src/cquery/third_party/loguru/loguru.hpp	2020-01-05 21:45:46.694973400 +0900
@@ -1358,13 +1358,13 @@ This will define all the Loguru function
 
 // TODO: use defined(_POSIX_VERSION) for some of these things?
 
-#if defined(_WIN32) || defined(__CYGWIN__)
+#if defined(_WIN32)
 	#define LOGURU_PTHREADS    0
 	#define LOGURU_WINTHREADS  1
 	#ifndef LOGURU_STACKTRACES
 		#define LOGURU_STACKTRACES 0
 	#endif
-#elif defined(__rtems__)
+#elif defined(__rtems__) || defined(__CYGWIN__)
 	#define LOGURU_PTHREADS    1
 	#define LOGURU_WINTHREADS  0
 	#ifndef LOGURU_STACKTRACES
--- origsrc/cquery/third_party/sparsepp/sparsepp/spp_memory.h	2020-01-05 21:32:30.000000000 +0900
+++ src/cquery/third_party/sparsepp/sparsepp/spp_memory.h	2020-01-05 22:10:52.092049000 +0900
@@ -5,7 +5,7 @@
 #include <cstring>
 #include <cstdlib>
 
-#if defined(_WIN32) || defined( __CYGWIN__)
+#if defined(_WIN32)
     #define SPP_WIN
 #endif
 
@@ -14,7 +14,7 @@
     #include <Psapi.h>
     #undef min
     #undef max
-#elif defined(__linux__)
+#elif defined(__linux__) || defined(__CYGWIN__)
     #include <sys/types.h>
     #include <sys/sysinfo.h>
 #elif defined(__FreeBSD__)
@@ -35,7 +35,7 @@ namespace spp
         memInfo.dwLength = sizeof(MEMORYSTATUSEX);
         GlobalMemoryStatusEx(&memInfo);
         return static_cast<uint64_t>(memInfo.ullTotalPageFile);
-#elif defined(__linux__)
+#elif defined(__linux__) || defined(__CYGWIN__)
         struct sysinfo memInfo;
         sysinfo (&memInfo);
         auto totalVirtualMem = memInfo.totalram;
@@ -74,7 +74,7 @@ namespace spp
         memInfo.dwLength = sizeof(MEMORYSTATUSEX);
         GlobalMemoryStatusEx(&memInfo);
         return static_cast<uint64_t>(memInfo.ullTotalPageFile - memInfo.ullAvailPageFile);
-#elif defined(__linux__)
+#elif defined(__linux__) || defined(__CYGWIN__)
         struct sysinfo memInfo;
         sysinfo(&memInfo);
         auto virtualMemUsed = memInfo.totalram - memInfo.freeram;
@@ -115,7 +115,7 @@ namespace spp
         PROCESS_MEMORY_COUNTERS_EX pmc;
         GetProcessMemoryInfo(GetCurrentProcess(), reinterpret_cast<PPROCESS_MEMORY_COUNTERS>(&pmc), sizeof(pmc));
         return static_cast<uint64_t>(pmc.PrivateUsage);
-#elif defined(__linux__)
+#elif defined(__linux__) || defined(__CYGWIN__)
         auto parseLine = 
             [](char* line)->int
             {
@@ -165,7 +165,7 @@ namespace spp
         memInfo.dwLength = sizeof(MEMORYSTATUSEX);
         GlobalMemoryStatusEx(&memInfo);
         return static_cast<uint64_t>(memInfo.ullTotalPhys);
-#elif defined(__linux__)
+#elif defined(__linux__) || defined(__CYGWIN__)
         struct sysinfo memInfo;
         sysinfo(&memInfo);
 
