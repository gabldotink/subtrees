--- origsrc/GDCM-3.0.14/CMake/FindCharLS.cmake	2022-06-24 16:37:44.000000000 +0900
+++ src/GDCM-3.0.14/CMake/FindCharLS.cmake	2022-06-28 17:15:07.883817000 +0900
@@ -12,7 +12,7 @@ find_path(CHARLS_INCLUDE_DIR CharLS/char
 )
 
 find_library(CHARLS_LIBRARY
-  NAMES CharLS
+  NAMES CharLS charls
   PATHS /usr/lib /usr/local/lib
   )
 
--- origsrc/GDCM-3.0.14/Examples/Cxx/CMakeLists.txt	2022-06-24 16:37:44.000000000 +0900
+++ src/GDCM-3.0.14/Examples/Cxx/CMakeLists.txt	2022-06-28 17:15:07.893928600 +0900
@@ -129,7 +129,7 @@ endif()
 if(SQLITE3_FOUND)
   include_directories(${SQLITE3_INCLUDE_DIRS})
   add_executable(DumpToSQLITE3 DumpToSQLITE3.cxx)
-  target_link_libraries(DumpToSQLITE3 gdcmMSFF ${SQLITE3_LIBRARIES})
+  target_link_libraries(DumpToSQLITE3 gdcmMSFF ${SQLite3_LIBRARIES})
 endif()
 
 if(GDCM_BUILD_TESTING)
--- origsrc/GDCM-3.0.14/Source/Common/CMakeLists.txt	2022-06-24 16:37:44.000000000 +0900
+++ src/GDCM-3.0.14/Source/Common/CMakeLists.txt	2022-06-28 17:15:07.904049500 +0900
@@ -19,7 +19,9 @@ mark_as_advanced(
 
 
 CHECK_INCLUDE_FILE_CONCAT("sys/time.h"     GDCM_HAVE_SYS_TIME_H)
-CHECK_INCLUDE_FILE_CONCAT("winsock.h"       GDCM_HAVE_WINSOCK_H)
+if (NOT CYGWIN)
+  CHECK_INCLUDE_FILE_CONCAT("winsock.h"       GDCM_HAVE_WINSOCK_H)
+endif()
 CHECK_INCLUDE_FILE_CONCAT("byteswap.h"       GDCM_HAVE_BYTESWAP_FILE_H)
 # see bug #324
 if(GDCM_HAVE_BYTESWAP_FILE_H)
@@ -28,7 +30,9 @@ if(GDCM_HAVE_BYTESWAP_FILE_H)
     "\#include <byteswap.h>\nint main() { return bswap_32( 42 ); }"
     GDCM_HAVE_BYTESWAP_H)
 endif()
-CHECK_INCLUDE_FILE("rpc.h"       GDCM_HAVE_RPC_H)
+if (NOT CYGWIN)
+  CHECK_INCLUDE_FILE("rpc.h"       GDCM_HAVE_RPC_H)
+endif()
 CHECK_INCLUDE_FILE("langinfo.h"       GDCM_HAVE_LANGINFO_H)
 
 include(CheckFunctionExists)
--- origsrc/GDCM-3.0.14/Source/MediaStorageAndFileFormat/CMakeLists.txt	2022-06-24 16:37:44.000000000 +0900
+++ src/GDCM-3.0.14/Source/MediaStorageAndFileFormat/CMakeLists.txt	2022-06-28 17:15:07.908976300 +0900
@@ -224,6 +224,9 @@ endif()
 if(GDCM_USE_SYSTEM_JSON)
   target_link_libraries(gdcmMSFF LINK_PRIVATE ${JSON_LIBRARIES})
 endif()
+if(GDCM_USE_SYSTEM_CHARLS)
+  target_link_libraries(gdcmMSFF LINK_PRIVATE ${CHARLS_LIBRARY})
+endif()
 # handling of static lib within shared is a mess:
 #target_link_libraries(gdcmMSFF gdcmrle)
 set_target_properties(gdcmMSFF PROPERTIES ${GDCM_LIBRARY_PROPERTIES})
--- origsrc/GDCM-3.0.14/Source/MediaStorageAndFileFormat/gdcmFileStreamer.cxx	2022-06-24 16:37:44.000000000 +0900
+++ src/GDCM-3.0.14/Source/MediaStorageAndFileFormat/gdcmFileStreamer.cxx	2022-06-28 17:15:07.926878600 +0900
@@ -32,7 +32,7 @@
 #include <io.h>
 typedef int64_t off64_t;
 #else
-#if defined(__APPLE__) || defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__NetBSD__)
+#if defined(__APPLE__) || defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__NetBSD__) || defined(__CYGWIN__)
 #  define off64_t off_t
 #endif
 #include <unistd.h> // ftruncate
--- origsrc/GDCM-3.0.14/Source/MediaStorageAndFileFormat/gdcmUIDGenerator.cxx	2022-06-24 16:37:44.000000000 +0900
+++ src/GDCM-3.0.14/Source/MediaStorageAndFileFormat/gdcmUIDGenerator.cxx	2022-06-28 17:15:07.932804900 +0900
@@ -19,7 +19,7 @@
 #include <cstring>
 
 // FIXME...
-#if defined(_WIN32) || defined(__CYGWIN__)
+#if defined(_WIN32)
 #define HAVE_UUIDCREATE
 #else
 #define HAVE_UUID_GENERATE
--- origsrc/GDCM-3.0.14/Source/MediaStorageAndFileFormat/gdcmUUIDGenerator.cxx	2022-06-24 16:37:44.000000000 +0900
+++ src/GDCM-3.0.14/Source/MediaStorageAndFileFormat/gdcmUUIDGenerator.cxx	2022-06-28 17:15:07.937901300 +0900
@@ -18,7 +18,7 @@
 #include <cstring> // memcpy
 
 // FIXME...
-#if defined(_WIN32) || defined(__CYGWIN__)
+#if defined(_WIN32)
 #define HAVE_UUIDCREATE
 #else
 #define HAVE_UUID_GENERATE
--- origsrc/GDCM-3.0.14/Utilities/VTK/CMakeLists.txt	2022-06-24 16:37:44.000000000 +0900
+++ src/GDCM-3.0.14/Utilities/VTK/CMakeLists.txt	2022-06-28 17:15:07.950882600 +0900
@@ -50,7 +50,15 @@ include_directories(
 #endif()
 
 # List the kits from VTK that are needed by this project.
-if("${VTK_MAJOR_VERSION}" LESS 6)
+if(CYGWIN)
+  set(vtkgdcm_LIBS
+    vtkCommon-${VTK_MAJOR_VERSION}.${VTK_MINOR_VERSION}
+    vtkFilters-${VTK_MAJOR_VERSION}.${VTK_MINOR_VERSION}
+    vtkIo-${VTK_MAJOR_VERSION}.${VTK_MINOR_VERSION}
+    vtkImaging-${VTK_MAJOR_VERSION}.${VTK_MINOR_VERSION}
+    vtkRendering-${VTK_MAJOR_VERSION}.${VTK_MINOR_VERSION}
+  )
+elseif("${VTK_MAJOR_VERSION}" LESS 6)
   set(vtkgdcm_LIBS
     vtkCommon
     vtkFiltering
--- origsrc/GDCM-3.0.14/Utilities/VTK/Testing/Cxx/CMakeLists.txt	2022-06-24 16:37:44.000000000 +0900
+++ src/GDCM-3.0.14/Utilities/VTK/Testing/Cxx/CMakeLists.txt	2022-06-28 17:15:07.956871800 +0900
@@ -65,7 +65,11 @@ create_test_sourcelist(vtkGDCMTests gdcm
   )
 add_executable(gdcmvtkGDCMTests ${vtkGDCMTests})
 target_link_libraries(gdcmvtkGDCMTests ${VTKGDCM_NAME} gdcmMSFF)
-target_link_libraries(gdcmvtkGDCMTests vtksys)
+if (CYGWIN)
+  target_link_libraries(gdcmvtkGDCMTests vtksys-${VTK_MAJOR_VERSION}.${VTK_MINOR_VERSION})
+else()
+  target_link_libraries(gdcmvtkGDCMTests vtksys)
+endif()
 if(VTK_USE_RENDERING)
   if( "${VTK_MAJOR_VERSION}.${VTK_MINOR_VERSION}" LESS 4.5 )
     target_link_libraries(gdcmvtkGDCMTests vtkRendering)
@@ -76,7 +80,9 @@ endif()
 # VTK 6.0 does not set VTK_USE_RENDERING anymore ?
 if( "${VTK_MAJOR_VERSION}.${VTK_MINOR_VERSION}" GREATER 6.0 )
   target_link_libraries(gdcmvtkGDCMTests ${vtkgdcm_LIBS})
-  target_link_libraries(gdcmvtkGDCMTests vtkIOLegacy vtkCommonCore)
+  if (NOT CYGWIN)
+    target_link_libraries(gdcmvtkGDCMTests vtkIOLegacy vtkCommonCore)
+  endif()
 endif()
 
 # Need full path to executable:
--- origsrc/GDCM-3.0.14/Utilities/VTK/vtkGDCMPolyDataWriter.cxx	2022-06-24 16:37:44.000000000 +0900
+++ src/GDCM-3.0.14/Utilities/VTK/vtkGDCMPolyDataWriter.cxx	2022-06-28 17:15:07.975990200 +0900
@@ -496,7 +496,7 @@ void vtkGDCMPolyDataWriter::WriteRTSTRUC
   sqi = new SequenceOfItems;
 
   vtkIdType npts = 0;
-  vtkIdType *indx = 0;
+  vtkIdType const *indx = 0;
   double v[3];
   unsigned int cellnum = 0;
 
@@ -759,7 +759,7 @@ void vtkGDCMPolyDataWriter::InitializeRT
     vtkPoints *pts;
     vtkCellArray *polys;
     vtkIdType npts = 0;
-    vtkIdType *indx = 0;
+    vtkIdType const *indx = 0;
     pts = theData->GetPoints();
     polys = theData->GetPolys();
     vtkCellArray* lines = theData->GetLines();
--- origsrc/GDCM-3.0.14/Utilities/VTK/vtkImageMapToWindowLevelColors2.cxx	2022-06-24 16:37:44.000000000 +0900
+++ src/GDCM-3.0.14/Utilities/VTK/vtkImageMapToWindowLevelColors2.cxx	2022-06-28 17:15:07.984871100 +0900
@@ -37,6 +37,8 @@
 #include "vtkScalarsToColors.h"
 #include "vtkPointData.h"
 
+#include <cmath>
+
 //vtkCxxRevisionMacro(vtkImageMapToWindowLevelColors2, "$Revision: 1.3 $")
 vtkStandardNewMacro(vtkImageMapToWindowLevelColors2)
 
