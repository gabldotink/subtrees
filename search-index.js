var searchIndex = JSON.parse('{\
"hrx":{"doc":"A Rust implementation of the HRX plain text archive format.","i":[[3,"HrxArchive","hrx","A Human-Readable Archive, consisting of an optional…",null,null],[12,"comment","","Some optional metadata.",0,null],[12,"entries","","Some optional archive entries with their paths.",0,null],[3,"HrxEntry","","A single entry in the archive, consisting of an optional…",null,null],[12,"comment","","Some optional metadata.",1,null],[12,"data","","The specific entry data.",1,null],[3,"HrxPath","","Verified-valid path to an entry in the archive.",null,null],[4,"ErroneousBodyPath","","A path to a `body` which contains an invalid sequence",null,null],[13,"RootComment","","The root archive comment",2,null],[13,"EntryComment","","A comment to the entry with the specified path",2,null],[13,"EntryData","","The data of the entry with the specified path",2,null],[4,"HrxError","","Generic error type, encompassing more precise errors.",null,null],[13,"NoBoundary","","No valid HRX boundary found",3,null],[13,"Parse","","An error occured during parsing",3,null],[13,"BodyContainsBoundary","","Some `body`s were made to contain the archive boundary.…",3,null],[13,"DuplicateEntry","","Two entries share the same path",3,null],[13,"FileAsDirectory","","An entry attempted to use a file as a directory",3,null],[4,"HrxEntryData","","Some variant of an entry\'s contained data.",null,null],[13,"File","","File with some optional contents.",4,null],[12,"body","hrx::HrxEntryData","",5,null],[13,"Directory","hrx","Bodyless directory.",4,null],[0,"util","","Module containing various utility functions.",null,null],[5,"boundary_str","hrx::util","Generate a boundary string of the specified length.",null,[[["nonzerousize",3]],["string",3]]],[0,"parse","hrx","Individual parsing primitives.",null,null],[3,"ParseError","hrx::parse","HRX parsing error ",null,null],[12,"line","","1-based line # of error ",6,null],[12,"column","","1-based column # of error ",6,null],[12,"offset","","Byte offset of error ",6,null],[12,"expected","","Expected but unmatched rules ",6,null],[5,"directory","","`boundary \\\" \\\"+ path \\\"/\\\" newline+`",null,[[["nonzerousize",3]],[["parseresult",6],["hrxpath",3]]]],[5,"archive","","`entry* comment?`",null,[[["nonzerousize",3]],["parseresult",6]]],[5,"comment","","`boundary newline body`",null,[[["nonzerousize",3]],["parseresult",6]]],[5,"entry","","`comment? (file | directory)`",null,[[["nonzerousize",3]],["parseresult",6]]],[5,"body","","`contents newline`",null,[[["nonzerousize",3]],["parseresult",6]]],[5,"file","","`boundary \\\" \\\"+ path newline body?`",null,[[["nonzerousize",3]],["parseresult",6]]],[5,"path","","`path-component (\\\"/\\\" path-component)*`",null,[[["nonzerousize",3]],[["parseresult",6],["hrxpath",3]]]],[5,"reduce_raw_entries_and_validate_directory_tree","","Convert a collexion of `(path, entry)` pairs into a `path…",null,[[["intoiterator",8]],[["hrxerror",4],["linkedhashmap",3],["result",4]]]],[5,"discover_first_boundary_length","","Search the specified for the length of the first `boundary`.",null,[[["asref",8]],[["option",4],["nonzerousize",3]]]],[6,"ParseResult","","Convenience result type ",null,null],[11,"new","hrx","Create an empty archive with the specified boundary length.",0,[[["nonzerousize",3]],["hrxarchive",3]]],[11,"boundary_length","","Get the current boundary length, i.e. the amount of `=`…",0,[[],["nonzerousize",3]]],[11,"set_boundary_length","","Set new boundary length, if valid.",0,[[["nonzerousize",3]],[["hrxerror",4],["result",4]]]],[11,"validate_content","","Validate that no `body`s contain a `boundary` or error out…",0,[[],[["hrxerror",4],["result",4]]]],[11,"serialise","","Write the archive out to the specified output stream,…",0,[[],[["result",4],["result",4]]]],[11,"into_inner","","Unwraps the contained path.",7,[[],["string",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"to_string","","",7,[[],["string",3]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","hrx::parse","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"as_ref","hrx","",7,[[]]],[11,"from","","",3,[[["parseerror",3]],["hrxerror",4]]],[11,"from","","",3,[[["erroneousbodypath",4]],["hrxerror",4]]],[11,"from","","",3,[[],["hrxerror",4]]],[11,"clone","hrx::parse","",6,[[],["parseerror",3]]],[11,"clone","hrx","",0,[[],["hrxarchive",3]]],[11,"clone","","",1,[[],["hrxentry",3]]],[11,"clone","","",4,[[],["hrxentrydata",4]]],[11,"clone","","",7,[[],["hrxpath",3]]],[11,"clone","","",3,[[],["hrxerror",4]]],[11,"clone","","",2,[[],["erroneousbodypath",4]]],[11,"cmp","","",0,[[["hrxarchive",3]],["ordering",4]]],[11,"cmp","","",1,[[["hrxentry",3]],["ordering",4]]],[11,"cmp","","",4,[[["hrxentrydata",4]],["ordering",4]]],[11,"cmp","","",7,[[["hrxpath",3]],["ordering",4]]],[11,"cmp","","",2,[[["erroneousbodypath",4]],["ordering",4]]],[11,"eq","hrx::parse","",6,[[["parseerror",3]]]],[11,"ne","","",6,[[["parseerror",3]]]],[11,"eq","hrx","",0,[[["hrxarchive",3]]]],[11,"ne","","",0,[[["hrxarchive",3]]]],[11,"eq","","",1,[[["hrxentry",3]]]],[11,"ne","","",1,[[["hrxentry",3]]]],[11,"eq","","",4,[[["hrxentrydata",4]]]],[11,"ne","","",4,[[["hrxentrydata",4]]]],[11,"eq","","",7,[[["hrxpath",3]]]],[11,"ne","","",7,[[["hrxpath",3]]]],[11,"eq","","",3,[[["hrxerror",4]]]],[11,"ne","","",3,[[["hrxerror",4]]]],[11,"eq","","",2,[[["erroneousbodypath",4]]]],[11,"ne","","",2,[[["erroneousbodypath",4]]]],[11,"partial_cmp","","",0,[[["hrxarchive",3]],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[["hrxarchive",3]]]],[11,"le","","",0,[[["hrxarchive",3]]]],[11,"gt","","",0,[[["hrxarchive",3]]]],[11,"ge","","",0,[[["hrxarchive",3]]]],[11,"partial_cmp","","",1,[[["hrxentry",3]],[["option",4],["ordering",4]]]],[11,"lt","","",1,[[["hrxentry",3]]]],[11,"le","","",1,[[["hrxentry",3]]]],[11,"gt","","",1,[[["hrxentry",3]]]],[11,"ge","","",1,[[["hrxentry",3]]]],[11,"partial_cmp","","",4,[[["hrxentrydata",4]],[["option",4],["ordering",4]]]],[11,"lt","","",4,[[["hrxentrydata",4]]]],[11,"le","","",4,[[["hrxentrydata",4]]]],[11,"gt","","",4,[[["hrxentrydata",4]]]],[11,"ge","","",4,[[["hrxentrydata",4]]]],[11,"partial_cmp","","",7,[[["hrxpath",3]],[["option",4],["ordering",4]]]],[11,"lt","","",7,[[["hrxpath",3]]]],[11,"le","","",7,[[["hrxpath",3]]]],[11,"gt","","",7,[[["hrxpath",3]]]],[11,"ge","","",7,[[["hrxpath",3]]]],[11,"partial_cmp","","",2,[[["erroneousbodypath",4]],[["option",4],["ordering",4]]]],[11,"lt","","",2,[[["erroneousbodypath",4]]]],[11,"le","","",2,[[["erroneousbodypath",4]]]],[11,"gt","","",2,[[["erroneousbodypath",4]]]],[11,"ge","","",2,[[["erroneousbodypath",4]]]],[11,"fmt","hrx::parse","",6,[[["formatter",3]],["result",6]]],[11,"fmt","hrx","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","hrx::parse","",6,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","hrx","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"hash","","",0,[[]]],[11,"hash","","",1,[[]]],[11,"hash","","",4,[[]]],[11,"hash","","",7,[[]]],[11,"hash","","",2,[[]]],[11,"borrow","","",7,[[]]],[11,"from_str","","",0,[[],["result",4]]],[11,"from_str","","",7,[[],["result",4]]],[11,"description","hrx::parse","",6,[[]]],[11,"source","hrx","",3,[[],[["option",4],["error",8]]]]],"p":[[3,"HrxArchive"],[3,"HrxEntry"],[4,"ErroneousBodyPath"],[4,"HrxError"],[4,"HrxEntryData"],[13,"File"],[3,"ParseError"],[3,"HrxPath"]]},\
"jetscii":{"doc":"A tiny library to efficiently search strings for sets of…","i":[[3,"Bytes","jetscii","Searches a slice for a set of bytes. Up to 16 bytes may be…",null,null],[3,"AsciiChars","","Searches a string for a set of ASCII characters. Up to 16…",null,null],[3,"ByteSubstring","","Searches a slice for the first occurence of the subslice.",null,null],[3,"Substring","","Searches a string for the first occurence of the substring.",null,null],[6,"BytesConst","","A convenience type that can be used in a constant or static.",null,null],[6,"AsciiCharsConst","","A convenience type that can be used in a constant or static.",null,null],[6,"ByteSubstringConst","","A convenience type that can be used in a constant or static.",null,null],[6,"SubstringConst","","A convenience type that can be used in a constant or static.",null,null],[11,"new","","Manual constructor; prefer using [`bytes!`] instead.",0,[[]]],[11,"find","","Searches the slice for the first matching byte in the set.",0,[[],["option",4]]],[11,"new","","Manual constructor; prefer using [`ascii_chars!`] instead.",1,[[]]],[11,"find","","Searches the string for the first matching ASCII byte in…",1,[[],["option",4]]],[11,"new","","",2,[[]]],[11,"find","","Searches the slice for the first occurence of the subslice.",2,[[],["option",4]]],[11,"new","","",3,[[]]],[11,"find","","Searches the string for the first occurence of the…",3,[[],["option",4]]],[14,"bytes","","A convenience constructor for a [`Bytes`] that…",null,null],[14,"ascii_chars","","A convenience constructor for an [`AsciiChars`] that…",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]]],"p":[[3,"Bytes"],[3,"AsciiChars"],[3,"ByteSubstring"],[3,"Substring"]]},\
"lazysort":{"doc":"","i":[[3,"LazySortIterator","lazysort","",null,null],[3,"LazySortIteratorPartialFirst","","",null,null],[3,"LazySortIteratorPartialLast","","",null,null],[3,"LazySortIteratorBy","","",null,null],[8,"Sorted","","",null,null],[16,"Item","","",0,null],[10,"sorted","","",0,[[],["lazysortiterator",3]]],[8,"SortedPartial","","",null,null],[16,"Item","","",1,null],[10,"sorted_partial_first","","",1,[[],["lazysortiteratorpartialfirst",3]]],[10,"sorted_partial_last","","",1,[[],["lazysortiteratorpartiallast",3]]],[8,"SortedBy","","",null,null],[16,"Item","","",2,null],[10,"sorted_by","","",2,[[],["lazysortiteratorby",3]]],[11,"sorted","","",3,[[],["lazysortiterator",3]]],[11,"sorted_partial_first","","",3,[[],["lazysortiteratorpartialfirst",3]]],[11,"sorted_partial_last","","",3,[[],["lazysortiteratorpartiallast",3]]],[11,"sorted_by","","",3,[[],["lazysortiteratorby",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"into_iter","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"sorted","","",4,[[],["lazysortiterator",3]]],[11,"sorted_partial_first","","",4,[[],["lazysortiteratorpartialfirst",3]]],[11,"sorted_partial_last","","",4,[[],["lazysortiteratorpartiallast",3]]],[11,"sorted_by","","",4,[[],["lazysortiteratorby",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"into_iter","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"sorted","","",5,[[],["lazysortiterator",3]]],[11,"sorted_partial_first","","",5,[[],["lazysortiteratorpartialfirst",3]]],[11,"sorted_partial_last","","",5,[[],["lazysortiteratorpartiallast",3]]],[11,"sorted_by","","",5,[[],["lazysortiteratorby",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"into_iter","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"sorted","","",6,[[],["lazysortiterator",3]]],[11,"sorted_partial_first","","",6,[[],["lazysortiteratorpartialfirst",3]]],[11,"sorted_partial_last","","",6,[[],["lazysortiteratorpartiallast",3]]],[11,"sorted_by","","",6,[[],["lazysortiteratorby",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"into_iter","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"next","","",3,[[],["option",4]]],[11,"size_hint","","",3,[[]]],[11,"next","","",4,[[],["option",4]]],[11,"size_hint","","",4,[[]]],[11,"next","","",5,[[],["option",4]]],[11,"size_hint","","",5,[[]]],[11,"next","","",6,[[],["option",4]]],[11,"size_hint","","",6,[[]]]],"p":[[8,"Sorted"],[8,"SortedPartial"],[8,"SortedBy"],[3,"LazySortIterator"],[3,"LazySortIteratorPartialFirst"],[3,"LazySortIteratorPartialLast"],[3,"LazySortIteratorBy"]]},\
"linked_hash_map":{"doc":"A `HashMap` wrapper that holds key-value pairs in…","i":[[3,"LinkedHashMap","linked_hash_map","A linked hash map.",null,null],[3,"Iter","","An insertion-order iterator over a `LinkedHashMap`\'s…",null,null],[3,"IterMut","","An insertion-order iterator over a `LinkedHashMap`\'s…",null,null],[3,"IntoIter","","A consuming insertion-order iterator over a…",null,null],[3,"Entries","","An insertion-order iterator over a `LinkedHashMap`\'s…",null,null],[3,"Keys","","An insertion-order iterator over a `LinkedHashMap`\'s keys.",null,null],[3,"Values","","An insertion-order iterator over a `LinkedHashMap`\'s values.",null,null],[3,"OccupiedEntry","","A view into a single occupied location in a `LinkedHashMap`.",null,null],[3,"VacantEntry","","A view into a single empty location in a `LinkedHashMap`.",null,null],[4,"Entry","","A view into a single location in a map, which may be…",null,null],[13,"Occupied","","An occupied Entry.",0,null],[13,"Vacant","","A vacant Entry.",0,null],[11,"new","","Creates a linked hash map.",1,[[]]],[11,"with_capacity","","Creates an empty linked hash map with the given initial…",1,[[]]],[11,"with_hasher","","Creates an empty linked hash map with the given initial…",1,[[]]],[11,"with_capacity_and_hasher","","Creates an empty linked hash map with the given initial…",1,[[]]],[11,"reserve","","Reserves capacity for at least `additional` more elements…",1,[[]]],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It…",1,[[]]],[11,"entry","","Gets the given key\'s corresponding entry in the map for…",1,[[],["entry",4]]],[11,"entries","","Returns an iterator visiting all entries in insertion…",1,[[],["entries",3]]],[11,"insert","","Inserts a key-value pair into the map. If the key already…",1,[[],["option",4]]],[11,"contains_key","","Checks if the map contains the given key.",1,[[]]],[11,"get","","Returns the value corresponding to the key in the map.",1,[[],["option",4]]],[11,"get_mut","","Returns the mutable reference corresponding to the key in…",1,[[],["option",4]]],[11,"get_refresh","","Returns the value corresponding to the key in the map.",1,[[],["option",4]]],[11,"remove","","Removes and returns the value corresponding to the key…",1,[[],["option",4]]],[11,"capacity","","Returns the maximum number of key-value pairs the map can…",1,[[]]],[11,"pop_front","","Removes the first entry.",1,[[],["option",4]]],[11,"front","","Gets the first entry.",1,[[],["option",4]]],[11,"pop_back","","Removes the last entry.",1,[[],["option",4]]],[11,"back","","Gets the last entry.",1,[[],["option",4]]],[11,"len","","Returns the number of key-value pairs in the map.",1,[[]]],[11,"is_empty","","Returns whether the map is currently empty.",1,[[]]],[11,"hasher","","Returns a reference to the map\'s hasher.",1,[[]]],[11,"clear","","Clears the map of all key-value pairs.",1,[[]]],[11,"iter","","Returns a double-ended iterator visiting all key-value…",1,[[],["iter",3]]],[11,"iter_mut","","Returns a double-ended iterator visiting all key-value…",1,[[],["itermut",3]]],[11,"keys","","Returns a double-ended iterator visiting all key in order…",1,[[],["keys",3]]],[11,"values","","Returns a double-ended iterator visiting all values in…",1,[[],["values",3]]],[11,"key","","Returns the entry key",0,[[]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default…",0,[[]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of…",0,[[["fnonce",8]]]],[11,"key","","Gets a reference to the entry key",2,[[]]],[11,"get","","Gets a reference to the value in the entry.",2,[[]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",2,[[]]],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the…",2,[[]]],[11,"insert","","Sets the value of the entry, and returns the entry\'s old…",2,[[]]],[11,"remove","","Takes the value out of the entry, and returns it",2,[[]]],[11,"key","","Gets a reference to the entry key",3,[[]]],[11,"insert","","Sets the value of the entry with the VacantEntry\'s key,…",3,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"into_iter","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"into_iter","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"into_iter","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"into_iter","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"into_iter","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"into_iter","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"into_iter","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"drop","","",1,[[]]],[11,"drop","","",6,[[]]],[11,"next_back","","",4,[[],["option",4]]],[11,"next_back","","",5,[[],["option",4]]],[11,"next_back","","",6,[[],["option",4]]],[11,"next_back","","",8,[[],["option",4]]],[11,"next_back","","",9,[[],["option",4]]],[11,"len","","",4,[[]]],[11,"len","","",5,[[]]],[11,"len","","",6,[[]]],[11,"len","","",8,[[]]],[11,"len","","",9,[[]]],[11,"extend","","",1,[[["intoiterator",8]]]],[11,"extend","","",1,[[["intoiterator",8]]]],[11,"into_iter","","",1,[[],["intoiter",3]]],[11,"next","","",4,[[],["option",4]]],[11,"size_hint","","",4,[[]]],[11,"next","","",5,[[],["option",4]]],[11,"size_hint","","",5,[[]]],[11,"next","","",6,[[],["option",4]]],[11,"size_hint","","",6,[[]]],[11,"next","","",7,[[],[["option",4],["occupiedentry",3]]]],[11,"size_hint","","",7,[[]]],[11,"next","","",8,[[],["option",4]]],[11,"size_hint","","",8,[[]]],[11,"next","","",9,[[],["option",4]]],[11,"size_hint","","",9,[[]]],[11,"clone","","",1,[[]]],[11,"clone","","",4,[[]]],[11,"clone","","",6,[[]]],[11,"clone","","",8,[[]]],[11,"clone","","",9,[[]]],[11,"default","","",1,[[]]],[11,"cmp","","",1,[[],["ordering",4]]],[11,"eq","","",1,[[]]],[11,"partial_cmp","","",1,[[],[["ordering",4],["option",4]]]],[11,"lt","","",1,[[]]],[11,"le","","",1,[[]]],[11,"ge","","",1,[[]]],[11,"gt","","",1,[[]]],[11,"fmt","","Returns a string that lists the key-value pairs in…",1,[[["formatter",3]],["result",6]]],[11,"index","","",1,[[]]],[11,"index_mut","","",1,[[]]],[11,"hash","","",1,[[]]],[11,"from_iter","","",1,[[["intoiterator",8]]]]],"p":[[4,"Entry"],[3,"LinkedHashMap"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Entries"],[3,"Keys"],[3,"Values"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);