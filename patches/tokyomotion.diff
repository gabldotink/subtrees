diff --git a/youtube_dl/extractor/extractors.py b/youtube_dl/extractor/extractors.py
index 06de556b7..01c23c1c5 100644
--- a/youtube_dl/extractor/extractors.py
+++ b/youtube_dl/extractor/extractors.py
@@ -1165,6 +1165,10 @@ from .tnaflix import (
     MovieFapIE,
 )
 from .toggle import ToggleIE
+from .tokyomotion2 import (
+    TokyoMotion2IE,
+    TokyoMotionUser2IE,
+)
 from .tonline import TOnlineIE
 from .toongoggles import ToonGogglesIE
 from .toutv import TouTvIE
diff --git a/youtube_dl/extractor/tokyomotion2.py b/youtube_dl/extractor/tokyomotion2.py
new file mode 100644
index 000000000..9c00657fc
--- /dev/null
+++ b/youtube_dl/extractor/tokyomotion2.py
@@ -0,0 +1,114 @@
+# coding: utf-8
+from __future__ import unicode_literals
+
+import re
+
+from .common import InfoExtractor
+from ..utils import (
+    sanitized_Request,
+    ExtractorError,
+)
+from ..compat import (
+    compat_urllib_parse,
+)
+
+class TokyoMotion2BaseIE(InfoExtractor):
+    IE_DESC = False  # Do not list
+    def download_page(self, url, video_id):
+        try:
+            # Why can't I use this method!?
+            return self._download_webpage(url, video_id)
+        except: # Above always fail, this will be used
+            request = sanitized_Request(url)
+            request.add_header('Accept-Encoding', '*')
+            full_response = self._request_webpage(request, video_id)
+            return self._webpage_read_content(full_response, url, video_id)
+
+class TokyoMotion2IE(TokyoMotion2BaseIE):
+    IE_NAME = 'tokyomotion'
+    _VALID_URL = r'(?P<url>https?://(?:www\.)?(?P<variant>tokyo|osaka)motion\.net/video/(?P<id>\d+)/[^#?&]+)(?:#.*)?'
+    _TEST = {
+        'url': 'https://www.tokyomotion.net/video/915034/%E9%80%86%E3%81%95',
+        'info_dict': {
+            'id': '915034',
+            'ext': 'mp4',
+            'title': '逆さ',
+        }
+    }
+
+    def _real_extract(self, url):
+        video_id = self._match_id(url)
+        url = self._VALID_URL_RE.match(url).group('url')
+        #self.to_screen(url)
+        variant = self._VALID_URL_RE.match(url).group('variant')
+        webpage = self.download_page(url, video_id)
+
+        title = self._og_search_title(webpage, default=None)
+
+        entries = self._parse_html5_media_entries(url, webpage, video_id, m3u8_id='hls')
+        variant_name = 'TokyoMotion' if variant == 'tokyo' else 'OsakaMotion'
+        if entries:
+            entry = entries[0]
+            self._sort_formats(entry['formats'])
+        else:
+            raise ExtractorError('Private video.')
+        entry.update({
+            'id': video_id,
+            'title': title,
+            'age_limit': 18,
+            'series': variant_name,
+        })
+        return entry
+
+class TokyoMotionUser2IE(TokyoMotion2BaseIE):
+    IE_NAME = 'tokyomotion:user'
+    _VALID_URL = r'https?://(?:www\.)?(?P<variant>tokyo|osaka)motion\.net/user/(?P<id>[^/]+)(?:/videos)?'
+    _TEST = {}
+    USER_VIDEOS_FULL_URL = 'https://www.%smotion.net/user/%s/videos?page=%d'
+
+    def _real_extract(self, url):
+        # no paging
+        # https://www.tokyomotion.net/user/kawhi
+        # https://www.tokyomotion.net/user/kawhi/videos
+        # paging
+        # https://www.tokyomotion.net/user/michel0320/videos?page=2
+        user_id = self._match_id(url)
+        variant = self._VALID_URL_RE.match(url).group('variant')
+        index = 1
+        all_matches = []
+        while True:
+            newurl = self.USER_VIDEOS_FULL_URL % (variant, user_id, index)
+            #self.to_screen(newurl)
+            self.to_screen('Downloading page %d' % index)
+            webpage = self.download_page(newurl, user_id)
+            all_matches.extend('https://www.%smotion.net%s' % (variant, compat_urllib_parse.quote(frg.group()))
+                for frg in re.finditer(r'/video/(?P<id>\d+)/[^#?&"\']+', webpage))
+            index = index + 1
+            if ('videos?page=%d"' % index) not in webpage:
+                break
+        return self.playlist_result((self.url_result(url) for url in set(all_matches)), user_id, 'Uploads from %s' % user_id)
+
+class TokyoMotionUserFavs2IE(TokyoMotion2BaseIE):
+    IE_NAME = 'tokyomotion:user:favs'
+    _VALID_URL = r'https?://(?:www\.)?(?P<variant>tokyo|osaka)motion\.net/user/(?P<id>[^/]+)/favorite/videos'
+    _TEST = {}
+    USER_VIDEOS_FULL_URL = 'https://www.%smotion.net/user/%s/favorite/videos?page=%d'
+
+    def _real_extract(self, url):
+        user_id = self._match_id(url)
+        variant = self._VALID_URL_RE.match(url).group('variant')
+        index = 1
+        all_matches = []
+        while True:
+            newurl = self.USER_VIDEOS_FULL_URL % (variant, user_id, index)
+            #self.to_screen(newurl)
+            self.to_screen('Downloading page %d' % index)
+            webpage = self.download_page(newurl, user_id)
+            all_matches.extend('https://www.%smotion.net%s' % (variant, compat_urllib_parse.quote(frg.group()))
+                for frg in re.finditer(r'/video/(?P<id>\d+)/[^#?&"\']+', webpage))
+            index = index + 1
+            if ('videos?page=%d"' % index) not in webpage:
+                break
+        return self.playlist_result((self.url_result(url) for url in set(all_matches)), user_id, 'Favorites from %s' % user_id)
+
+# TODO: searches, and playlists if any
