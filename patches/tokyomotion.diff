diff --git a/youtube_dl/extractor/extractors.py b/youtube_dl/extractor/extractors.py
index 06de556b7..98781f696 100644
--- a/youtube_dl/extractor/extractors.py
+++ b/youtube_dl/extractor/extractors.py
@@ -1165,6 +1165,7 @@ from .tnaflix import (
     MovieFapIE,
 )
 from .toggle import ToggleIE
+from .tokyomotion2 import TokyoMotion2IE
 from .tonline import TOnlineIE
 from .toongoggles import ToonGogglesIE
 from .toutv import TouTvIE
diff --git a/youtube_dl/extractor/tokyomotion2.py b/youtube_dl/extractor/tokyomotion2.py
new file mode 100644
index 000000000..a7bd28bfb
--- /dev/null
+++ b/youtube_dl/extractor/tokyomotion2.py
@@ -0,0 +1,51 @@
+# coding: utf-8
+from __future__ import unicode_literals
+
+from .common import InfoExtractor
+from ..utils import (
+    sanitized_Request,
+)
+
+class TokyoMotion2IE(InfoExtractor):
+    _VALID_URL = r'(?P<url>https?://(?:www\.)?(?P<variant>tokyo|osaka)motion\.net/video/(?P<id>\d+)/[^#?&]+)(?:#.*)?'
+    _TEST = {
+        'url': 'https://www.tokyomotion.net/video/915034/%E9%80%86%E3%81%95',
+        'info_dict': {
+            'id': '915034',
+            'ext': 'mp4',
+            'title': '逆さ',
+        }
+    }
+
+    def _real_extract(self, url):
+        video_id = self._match_id(url)
+        url = self._VALID_URL_RE.match(url).group('url')
+        variant = self._VALID_URL_RE.match(url).group('variant')
+
+        try:
+            # Why can't I use this method!?
+            webpage = self._download_webpage(url, video_id)
+        except: # Above always fail, this will be used
+            request = sanitized_Request(url)
+            request.add_header('Accept-Encoding', '*')
+            full_response = self._request_webpage(request, video_id)
+            webpage = self._webpage_read_content(full_response, url, video_id)
+
+        title = self._og_search_title(webpage, default=None)
+
+        entries = self._parse_html5_media_entries(url, webpage, video_id, m3u8_id='hls')
+        variant_name = 'TokyoMotion' if variant == 'tokyo' else 'OsakaMotion'
+        if entries:
+            entry = entries[0]
+            entry.update({
+                'id': video_id,
+                'title': title,
+                'age_limit': 18,
+                'series': variant_name,
+            })
+            self._sort_formats(entry['formats'])
+            return entry
+        else:
+            res = self.url_result(url, 'Generic', video_id)
+            res['_type'] = 'url_transparent_id'
+            return res
